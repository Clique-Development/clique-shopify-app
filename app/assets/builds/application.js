(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all3) => {
    for (var name in all3)
      __defProp(target, name, { get: all3[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error2(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component7(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component7.prototype.isReactComponent = {};
          Component7.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component7.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component7.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component7.prototype;
          function PureComponent4(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent4.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent4;
          assign(pureComponentPrototype, Component7.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef4() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement13(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement2(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement5(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement5(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement5(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext22(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error3) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error3;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef12(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo11(type, compare) {
            {
              if (!isValidElementType(type)) {
                error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error2("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext20(Context2) {
            var dispatcher = resolveDispatcher();
            {
              if (Context2._context !== void 0) {
                var realContext = Context2._context;
                if (realContext.Consumer === Context2) {
                  error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context2) {
                  error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context2);
          }
          function useState38(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer3(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef45(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect47(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect5(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback38(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo18(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle5(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId15() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component8) {
            var prototype3 = Component8.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray2(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement5(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement5(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement5(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement13.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement2.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition3(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error3) {
                popActScope(prevActScopeDepth);
                throw error3;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error3) {
                      popActScope(prevActScopeDepth);
                      reject(error3);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error3) {
                  reject(error3);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error3) {
                  queue = queue.slice(i + 1);
                  throw error3;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children8 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports.Children = Children8;
          exports.Component = Component7;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent4;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext22;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef4;
          exports.forwardRef = forwardRef12;
          exports.isValidElement = isValidElement5;
          exports.lazy = lazy;
          exports.memo = memo11;
          exports.startTransition = startTransition3;
          exports.unstable_act = act;
          exports.useCallback = useCallback38;
          exports.useContext = useContext20;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect47;
          exports.useId = useId15;
          exports.useImperativeHandle = useImperativeHandle5;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect5;
          exports.useMemo = useMemo18;
          exports.useReducer = useReducer3;
          exports.useRef = useRef45;
          exports.useState = useState38;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node) {
            var index = heap.length;
            heap.push(node);
            siftUp(heap, node, index);
          }
          function peek(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node, i) {
            var index = i;
            while (index > 0) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node, i) {
            var index = i;
            var length = heap.length;
            var halfLength = length >>> 1;
            while (index < halfLength) {
              var leftIndex = (index + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                  heap[index] = right;
                  heap[rightIndex] = node;
                  index = rightIndex;
                } else {
                  heap[index] = left;
                  heap[leftIndex] = node;
                  index = leftIndex;
                }
              } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error2) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error2;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React160 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React160.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error2(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment8 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error2("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix2 = name.toLowerCase().slice(0, 5);
                  return prefix2 !== "data-" && prefix2 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize3 = function(token) {
            return token[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize3);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize3);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize3);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component7) {
            var prototype3 = Component7.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node = workInProgress2;
              do {
                info += describeFiber(node);
                node = node.return;
              } while (node);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment8:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString3(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node) {
            return node._valueTracker;
          }
          function detachTracker(node) {
            node._valueTracker = null;
          }
          function getValueFromNode(node) {
            var value = "";
            if (!node) {
              return value;
            }
            if (isCheckable(node)) {
              value = node.checked ? "true" : "false";
            } else {
              value = node.value;
            }
            return value;
          }
          function trackValueOnNode(node) {
            var valueField = isCheckable(node) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node[valueField]);
            }
            var currentValue = "" + node[valueField];
            if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get3 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node, valueField, {
              configurable: true,
              get: function() {
                return get3.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
              }
            };
            return tracker;
          }
          function track(node) {
            if (getTracker(node)) {
              return;
            }
            node._valueTracker = trackValueOnNode(node);
          }
          function updateValueIfChanged(node) {
            if (!node) {
              return false;
            }
            var tracker = getTracker(node);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node = element;
            var checked = props.checked;
            var hostProps = assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node = element;
            {
              var controlled = isControlled(props);
              if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node.value != value) {
                  node.value = toString3(value);
                }
              } else if (node.value !== toString3(value)) {
                node.value = toString3(value);
              }
            } else if (type === "submit" || type === "reset") {
              node.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString3(node._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node.value) {
                    node.value = initialValue;
                  }
                }
              }
              {
                node.defaultValue = initialValue;
              }
            }
            var name = node.name;
            if (name !== "") {
              node.name = "";
            }
            {
              node.defaultChecked = !node.defaultChecked;
              node.defaultChecked = !!node._wrapperState.initialChecked;
            }
            if (name !== "") {
              node.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node = element;
            updateWrapper(node, props);
            updateNamedCousins(node, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node.ownerDocument) !== node
            ) {
              if (value == null) {
                node.defaultValue = toString3(node._wrapperState.initialValue);
              } else if (node.defaultValue !== toString3(value)) {
                node.defaultValue = toString3(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React160.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString3(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node, multiple, propValue, setDefaultSelected) {
            var options2 = node.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString3(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node = element;
            {
              checkSelectPropTypes(props);
            }
            node._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node = element;
            node.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node = element;
            var wasMultiple = node._wrapperState.wasMultiple;
            node._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString3(node._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString3(value);
              if (newValue !== node.value) {
                node.value = newValue;
              }
              if (props.defaultValue == null && node.defaultValue !== newValue) {
                node.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node.defaultValue = toString3(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node = element;
            var textContent = node.textContent;
            if (textContent === node._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
            if (node.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node.firstChild) {
                  node.removeChild(node.firstChild);
                }
                while (svgNode.firstChild) {
                  node.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node, text) {
            if (text) {
              var firstChild = node.firstChild;
              if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix2, key) {
            return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix2) {
              isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize2 = function(string) {
              return string.replace(hyphenPattern, function(_, character) {
                return character.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize2(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error2("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error2("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles54) {
            {
              var serialized = "";
              var delimiter = "";
              for (var styleName in styles54) {
                if (!styles54.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles54[styleName];
                if (styleValue != null) {
                  var isCustomProperty = styleName.indexOf("--") === 0;
                  serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                  delimiter = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node, styles54) {
            var style2 = node.style;
            for (var styleName in styles54) {
              if (!styles54.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty) {
                  warnValidStyle$1(styleName, styles54[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles54[styleName], isCustomProperty);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles54) {
            var expanded = {};
            for (var key in styles54) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error2("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error2("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error2("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a, b) {
            if (isInsideEventHandler) {
              return fn(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error3;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error3 = event.error;
                  didSetError = true;
                  if (error3 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error3 != null && typeof error3 === "object") {
                      try {
                        error3._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error3);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error3) {
              hasError = true;
              caughtError = error3;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error3 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error3;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error3 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error3;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error3 = caughtError;
              hasError = false;
              caughtError = null;
              return error3;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get2(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node;
              do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node.return;
                }
                nextNode = node.return;
              } while (nextNode);
            } else {
              while (node.return) {
                node = node.return;
              }
            }
            if (node.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get2(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              var match = findCurrentHostFiberImpl(child);
              if (match !== null) {
                return match;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            }
            var child = node.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) {
                  return match;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error2("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error2("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index2 = 0; index2 < TotalLanes; index2++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index2] & entangledLanes
              ) {
                entanglements[index2] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index2 = laneToIndex(lanes);
              var lane = 1 << index2;
              var updaters = pendingUpdatersLaneMap[index2];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node) {
            var state = node._wrapperState;
            if (!state || !state.controlled || node.type !== "number") {
              return;
            }
            {
              setDefaultValue(node, "number", node.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from = null;
              to = targetInst;
            }
            if (from === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from == null ? win : getNodeFromInstance(from);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node) {
            while (node && node.firstChild) {
              node = node.firstChild;
            }
            return node;
          }
          function getSiblingNode(node) {
            while (node) {
              if (node.nextSibling) {
                return node.nextSibling;
              }
              node = node.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node) {
              if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node = getLeafNode(getSiblingNode(node));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next = null;
                while (true) {
                  if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                    start = length + anchorOffset;
                  }
                  if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                    end = length + focusOffset;
                  }
                  if (node.nodeType === TEXT_NODE) {
                    length += node.nodeValue.length;
                  }
                  if ((next = node.firstChild) === null) {
                    break;
                  }
                  parentNode = node;
                  node = next;
                }
                while (true) {
                  if (node === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length;
                  }
                  if ((next = node.nextSibling) !== null) {
                    break;
                  }
                  node = parentNode;
                  parentNode = node.parentNode;
                }
                node = next;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node, offsets) {
            var doc = node.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length = node.textContent.length;
            var start = Math.min(offsets.start, length);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node, start);
            var endMarker = getNodeForCharacterOffset(node, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node) {
            return node && node.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node) {
            return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node) {
            if ("selectionStart" in node && hasSelectionCapabilities(node)) {
              return {
                start: node.selectionStart,
                end: node.selectionEnd
              };
            } else {
              var win = node.ownerDocument && node.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error2('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error2('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node = targetInst;
                mainLoop:
                  while (true) {
                    if (node === null) {
                      return;
                    }
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node = node.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
            var common = from && to ? getLowestCommonAncestor(from, to) : null;
            if (from !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error2("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop13() {
          }
          function trapClickOnNonInteractiveElement(node) {
            node.onclick = noop13;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement13(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node = domElement;
                  if (props.multiple) {
                    node.multiple = true;
                  } else if (props.size) {
                    node.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error2("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance2(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement13(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error3) {
            setTimeout(function() {
              throw error3;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node.nextSibling;
              parentInstance.removeChild(node);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data2 = nextNode.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_PENDING_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node = nextNode;
            } while (node);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node) {
            for (; node != null; node = node.nextSibling) {
              var nodeType = node.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node = suspenseInstance.nextSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node);
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node = node.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node = targetInstance.previousSibling;
            var depth = 0;
            while (node) {
              if (node.nodeType === COMMENT_NODE) {
                var data2 = node.data;
                if (data2 === SUSPENSE_START_DATA || data2 === SUSPENSE_FALLBACK_START_DATA || data2 === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node;
                  } else {
                    depth--;
                  }
                } else if (data2 === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node = node.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error2("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node) {
            delete node[internalInstanceKey];
            delete node[internalPropsKey];
            delete node[internalEventHandlersKey];
            delete node[internalEventHandlerListenersKey];
            delete node[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node) {
            node[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node) {
            node[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node) {
            node[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node) {
            return !!node[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node) {
            var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node) {
            return node[internalPropsKey] || null;
          }
          function updateFiberProps(node, props) {
            node[internalPropsKey] = props;
          }
          function getEventListenerSet(node) {
            var elementListenerSet = node[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor, fiber) {
            if (index < 0) {
              {
                error2("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error2("Unexpected Fiber popped.");
              }
            }
            cursor.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor, value, fiber) {
            index++;
            valueStack[index] = cursor.current;
            {
              fiberStack[index] = fiber;
            }
            cursor.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component7, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component7)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node = fiber;
              do {
                switch (node.tag) {
                  case HostRoot:
                    return node.stateNode.context;
                  case ClassComponent: {
                    var Component7 = node.type;
                    if (isContextProvider(Component7)) {
                      return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node = node.return;
              } while (node !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error3) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error3;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index2) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index2 + 1;
            var length = getBitLength(totalChildren) + baseLength;
            if (length > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error2("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error2("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error3) {
            if (hydrationErrors === null) {
              hydrationErrors = [error3];
            } else {
              hydrationErrors.push(error3);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node = fiber;
              while (node !== null) {
                if (node.mode & StrictLegacyMode) {
                  maybeStrictRoot = node;
                }
                node = node.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal2, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal2.containerInfo || current2.stateNode.implementation !== portal2.implementation) {
                var created = createFiberFromPortal(portal2, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal2.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment8) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment8) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal2, lanes) {
              var key = portal2.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal2.containerInfo && child.stateNode.implementation === portal2.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal2.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal2, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node = parent;
            while (node !== null) {
              var alternate = node.alternate;
              if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node === propagationRoot) {
                break;
              }
              node = node.return;
            }
            {
              if (node !== propagationRoot) {
                error2("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node = parent;
              parent = parent.return;
            }
            if (node.tag === HostRoot) {
              var root2 = node.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node = row;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node;
                  }
                }
              } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node;
                }
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === row) {
                return null;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === row) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component7, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component7(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component7(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error2("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error2("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error2("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error2("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error3) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition3(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start = startTransition3.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start;
            return [isPending, start];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start = hook.memoizedState;
            return [isPending, start];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error3) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component7, baseProps) {
            if (Component7 && Component7.defaultProps) {
              var props = assign({}, baseProps);
              var defaultProps2 = Component7.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get2(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error2("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error2("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error2("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error3 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error3 != null && error3._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error3);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error3);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error3 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error3);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node = returnFiber;
            do {
              if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
                return node;
              }
              node = node.return;
            } while (node !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component7, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component7.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component7)
                  );
                }
              }
            }
            var render2 = Component7.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component7, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component7.type;
              if (isSimpleFunctionComponent(type) && Component7.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component7.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component7.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error2("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component7.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component7.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component7.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component7, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component7, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component7, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component7.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component7)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component7, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component7, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component7, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component7, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component7.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component7)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component7)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component7, nextProps);
              mountClassInstance(workInProgress2, Component7, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component7, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component7, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component7, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component7, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component7, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component7.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component7, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node = child;
                while (node) {
                  node.flags = node.flags & ~Placement | Hydrating;
                  node = node.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component7 = init(payload);
            workInProgress2.type = Component7;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component7);
            var resolvedProps = resolveDefaultProps(Component7, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component7);
                  workInProgress2.type = Component7 = resolveFunctionForHotReloading(Component7);
                }
                child = updateFunctionComponent(null, workInProgress2, Component7, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component7 = resolveClassForHotReloading(Component7);
                }
                child = updateClassComponent(null, workInProgress2, Component7, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component7 = resolveForwardRefForHotReloading(Component7);
                }
                child = updateForwardRef(null, workInProgress2, Component7, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component7.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component7)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component7,
                  resolveDefaultProps(Component7.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component7 !== null && typeof Component7 === "object" && Component7.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component7 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component7, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component7)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component7, nextProps);
            mountClassInstance(workInProgress2, Component7, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component7, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component7, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component7, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component7.prototype && typeof Component7.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component7) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component7, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component7) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component7) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component7)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component7, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component7, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component7, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component7);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component7) {
            {
              if (Component7) {
                if (Component7.childContextTypes) {
                  error2("%s(...): childContextTypes cannot be defined on a function component.", Component7.displayName || Component7.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component7.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component7) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error2("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component7.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component7) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component7.contextType === "object" && Component7.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component7) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error2("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error2("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error3;
                if (message) {
                  error3 = new Error(message);
                } else {
                  error3 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error3, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node = firstChild;
            while (node !== null) {
              if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
                }
              } else if (node.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray2(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component7 = workInProgress2.type;
                if (isContextProvider(Component7)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component7 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component7 ? unresolvedProps : resolveDefaultProps(Component7, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component7, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment8:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node = workInProgress2.child;
              while (node !== null) {
                if (node.tag === HostComponent || node.tag === HostText) {
                  appendInitialChild(parent, node.stateNode);
                } else if (node.tag === HostPortal)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === workInProgress2) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === workInProgress2) {
                    return;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment8:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component7 = workInProgress2.type;
                if (isContextProvider(Component7)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance2(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next = renderState.tail;
                  renderState.rendering = next;
                  renderState.tail = next.sibling;
                  renderState.renderingStartTime = now();
                  next.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component7 = workInProgress2.type;
                if (isContextProvider(Component7)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error3) {
            {
              invokeGuardedCallback(null, function() {
                throw error3;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error3) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error3);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error2("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node) {
            switch (node.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                  } finally {
                    recordLayoutEffectDuration(node);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node, node.return, instance);
                }
                safelyAttachRef(node, node.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node, node.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node = finishedWork;
              while (true) {
                if (node.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                      var instance = node.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node.stateNode, node.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if (node.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                  ;
                else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === finishedWork) {
                  return;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node) {
                    hostSubtreeRoot = null;
                  }
                  node = node.return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node = fiber;
            siblings:
              while (true) {
                while (node.sibling === null) {
                  if (node.return === null || isHostParent(node.return)) {
                    return null;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
                while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                  if (node.flags & Placement) {
                    continue siblings;
                  }
                  if (node.child === null || node.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node.child.return = node;
                    node = node.child;
                  }
                }
                if (!(node.flags & Placement)) {
                  return node.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node, before, parent) {
            var tag = node.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error3) {
                  captureCommitPhaseError(childToDelete, parentFiber, error3);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error2("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error2("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error2("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node = finishedWork;
            while (true) {
              if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error3) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node.child;
              if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
              }
              if (node === finishedWork) {
                return true;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return true;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error3) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error3];
            } else {
              workInProgressRootConcurrentErrors.push(error3);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                  workInProgress = next;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error2("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error3) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error3;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
            var errorInfo = createCapturedValueAtFiber(error3, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error2("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error2("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node = fiber;
              while (true) {
                switch (node.tag) {
                  case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                }
                if (node.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node = node.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node.stateNode);
                } else if (node.child !== null) {
                  node.child.return = node;
                  node = node.child;
                  continue;
                }
                if (node === fiber) {
                  return foundHostInstances;
                }
                while (node.sibling === null) {
                  if (node.return === null || node.return === fiber) {
                    return foundHostInstances;
                  }
                  node = node.return;
                }
                node.sibling.return = node.return;
                node = node.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component7) {
            var prototype3 = Component7.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component7) {
            if (typeof Component7 === "function") {
              return shouldConstruct$1(Component7) ? ClassComponent : FunctionComponent;
            } else if (Component7 !== void 0 && Component7 !== null) {
              var $$typeof = Component7.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment8, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error2('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal2, mode, lanes) {
            var pendingProps = portal2.children !== null ? portal2.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal2.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal2.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal2.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get2(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component7 = fiber.type;
              if (isContextProvider(Component7)) {
                return processChildContext(fiber, Component7, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get2(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === path.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index2 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = isArray2(obj) ? obj.slice() : assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error3) {
            console["error"](error3);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error2("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error2("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error2("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error2("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error2("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node) {
            return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error2("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error2("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error2("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error2("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error2("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error2("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error2("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m = require_react_dom();
      if (false) {
        exports.createRoot = m.createRoot;
        exports.hydrateRoot = m.hydrateRoot;
      } else {
        i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.createRoot(c, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o) {
          i.usingClientEntryPoint = true;
          try {
            return m.hydrateRoot(c, h, o);
          } finally {
            i.usingClientEntryPoint = false;
          }
        };
      }
      var i;
    }
  });

  // node_modules/cookie/dist/index.js
  var require_dist = __commonJS({
    "node_modules/cookie/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parse = parse2;
      exports.serialize = serialize2;
      var cookieNameRegExp = /^[\u0021-\u003A\u003C\u003E-\u007E]+$/;
      var cookieValueRegExp = /^[\u0021-\u003A\u003C-\u007E]*$/;
      var domainValueRegExp = /^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i;
      var pathValueRegExp = /^[\u0020-\u003A\u003D-\u007E]*$/;
      var __toString = Object.prototype.toString;
      var NullObject = /* @__PURE__ */ (() => {
        const C = function() {
        };
        C.prototype = /* @__PURE__ */ Object.create(null);
        return C;
      })();
      function parse2(str, options) {
        const obj = new NullObject();
        const len = str.length;
        if (len < 2)
          return obj;
        const dec = options?.decode || decode;
        let index = 0;
        do {
          const eqIdx = str.indexOf("=", index);
          if (eqIdx === -1)
            break;
          const colonIdx = str.indexOf(";", index);
          const endIdx = colonIdx === -1 ? len : colonIdx;
          if (eqIdx > endIdx) {
            index = str.lastIndexOf(";", eqIdx - 1) + 1;
            continue;
          }
          const keyStartIdx = startIndex(str, index, eqIdx);
          const keyEndIdx = endIndex(str, eqIdx, keyStartIdx);
          const key = str.slice(keyStartIdx, keyEndIdx);
          if (obj[key] === void 0) {
            let valStartIdx = startIndex(str, eqIdx + 1, endIdx);
            let valEndIdx = endIndex(str, endIdx, valStartIdx);
            const value = dec(str.slice(valStartIdx, valEndIdx));
            obj[key] = value;
          }
          index = endIdx + 1;
        } while (index < len);
        return obj;
      }
      function startIndex(str, index, max) {
        do {
          const code = str.charCodeAt(index);
          if (code !== 32 && code !== 9)
            return index;
        } while (++index < max);
        return max;
      }
      function endIndex(str, index, min) {
        while (index > min) {
          const code = str.charCodeAt(--index);
          if (code !== 32 && code !== 9)
            return index + 1;
        }
        return min;
      }
      function serialize2(name, val, options) {
        const enc = options?.encode || encodeURIComponent;
        if (!cookieNameRegExp.test(name)) {
          throw new TypeError(`argument name is invalid: ${name}`);
        }
        const value = enc(val);
        if (!cookieValueRegExp.test(value)) {
          throw new TypeError(`argument val is invalid: ${val}`);
        }
        let str = name + "=" + value;
        if (!options)
          return str;
        if (options.maxAge !== void 0) {
          if (!Number.isInteger(options.maxAge)) {
            throw new TypeError(`option maxAge is invalid: ${options.maxAge}`);
          }
          str += "; Max-Age=" + options.maxAge;
        }
        if (options.domain) {
          if (!domainValueRegExp.test(options.domain)) {
            throw new TypeError(`option domain is invalid: ${options.domain}`);
          }
          str += "; Domain=" + options.domain;
        }
        if (options.path) {
          if (!pathValueRegExp.test(options.path)) {
            throw new TypeError(`option path is invalid: ${options.path}`);
          }
          str += "; Path=" + options.path;
        }
        if (options.expires) {
          if (!isDate2(options.expires) || !Number.isFinite(options.expires.valueOf())) {
            throw new TypeError(`option expires is invalid: ${options.expires}`);
          }
          str += "; Expires=" + options.expires.toUTCString();
        }
        if (options.httpOnly) {
          str += "; HttpOnly";
        }
        if (options.secure) {
          str += "; Secure";
        }
        if (options.partitioned) {
          str += "; Partitioned";
        }
        if (options.priority) {
          const priority = typeof options.priority === "string" ? options.priority.toLowerCase() : void 0;
          switch (priority) {
            case "low":
              str += "; Priority=Low";
              break;
            case "medium":
              str += "; Priority=Medium";
              break;
            case "high":
              str += "; Priority=High";
              break;
            default:
              throw new TypeError(`option priority is invalid: ${options.priority}`);
          }
        }
        if (options.sameSite) {
          const sameSite = typeof options.sameSite === "string" ? options.sameSite.toLowerCase() : options.sameSite;
          switch (sameSite) {
            case true:
            case "strict":
              str += "; SameSite=Strict";
              break;
            case "lax":
              str += "; SameSite=Lax";
              break;
            case "none":
              str += "; SameSite=None";
              break;
            default:
              throw new TypeError(`option sameSite is invalid: ${options.sameSite}`);
          }
        }
        return str;
      }
      function decode(str) {
        if (str.indexOf("%") === -1)
          return str;
        try {
          return decodeURIComponent(str);
        } catch (e) {
          return str;
        }
      }
      function isDate2(val) {
        return __toString.call(val) === "[object Date]";
      }
    }
  });

  // node_modules/deepmerge/dist/cjs.js
  var require_cjs = __commonJS({
    "node_modules/deepmerge/dist/cjs.js"(exports, module) {
      "use strict";
      var isMergeableObject = function isMergeableObject2(value) {
        return isNonNullObject(value) && !isSpecial(value);
      };
      function isNonNullObject(value) {
        return !!value && typeof value === "object";
      }
      function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
        return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
      }
      var canUseSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
      function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE;
      }
      function emptyTarget(val) {
        return Array.isArray(val) ? [] : {};
      }
      function cloneUnlessOtherwiseSpecified(value, options) {
        return options.clone !== false && options.isMergeableObject(value) ? deepmerge2(emptyTarget(value), value, options) : value;
      }
      function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function(element) {
          return cloneUnlessOtherwiseSpecified(element, options);
        });
      }
      function getMergeFunction(key, options) {
        if (!options.customMerge) {
          return deepmerge2;
        }
        var customMerge = options.customMerge(key);
        return typeof customMerge === "function" ? customMerge : deepmerge2;
      }
      function getEnumerableOwnPropertySymbols(target) {
        return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
          return Object.propertyIsEnumerable.call(target, symbol);
        }) : [];
      }
      function getKeys(target) {
        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
      }
      function propertyIsOnObject(object, property) {
        try {
          return property in object;
        } catch (_) {
          return false;
        }
      }
      function propertyIsUnsafe(target, key) {
        return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
      }
      function mergeObject(target, source, options) {
        var destination = {};
        if (options.isMergeableObject(target)) {
          getKeys(target).forEach(function(key) {
            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
          });
        }
        getKeys(source).forEach(function(key) {
          if (propertyIsUnsafe(target, key)) {
            return;
          }
          if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
          } else {
            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
          }
        });
        return destination;
      }
      function deepmerge2(target, source, options) {
        options = options || {};
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || isMergeableObject;
        options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
        if (!sourceAndTargetTypesMatch) {
          return cloneUnlessOtherwiseSpecified(source, options);
        } else if (sourceIsArray) {
          return options.arrayMerge(target, source, options);
        } else {
          return mergeObject(target, source, options);
        }
      }
      deepmerge2.all = function deepmergeAll(array, options) {
        if (!Array.isArray(array)) {
          throw new Error("first argument should be an array");
        }
        return array.reduce(function(prev, next) {
          return deepmerge2(prev, next, options);
        }, {});
      };
      var deepmerge_1 = deepmerge2;
      module.exports = deepmerge_1;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment8 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense3 = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment8;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense3;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s]);
          for (var key in from) {
            if (hasOwnProperty2.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values2, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error2;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error2 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error2 = ex;
              }
              if (error2 && !(error2 instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
                loggedTypeFailures[error2.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error2.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement5, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data2) {
          this.message = message;
          this.data = data2 && typeof data2 === "object" ? data2 : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error2 = typeChecker(propValue, i, componentName, location2, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement5(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error2 = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error2 instanceof Error) {
                  return error2;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error2 = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error2 = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement5(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/merge.js
  var require_merge = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/merge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function mergeProps(obj, newObj) {
        if (newObj == null) {
          return newObj;
        }
        if (typeof obj === "undefined" || !Object.prototype.isPrototypeOf.call(Object.getPrototypeOf(obj), newObj) || newObj.constructor.name !== "Object" && newObj.constructor.name !== "Array") {
          return newObj;
        }
        var clone = {};
        Object.keys(newObj).forEach(function(key) {
          var exists = Object.prototype.hasOwnProperty.call(obj, key);
          if (!exists) {
            clone[key] = newObj[key];
          } else if (typeof obj[key] === "object" && !Array.isArray(obj[key])) {
            clone[key] = mergeProps(obj[key], newObj[key]);
          } else {
            clone[key] = newObj[key];
          }
        });
        Object.keys(obj).forEach(function(key) {
          var exists = Object.prototype.hasOwnProperty.call(newObj, key);
          if (!exists) {
            clone[key] = obj[key];
          }
        });
        Object.setPrototypeOf(clone, Object.getPrototypeOf(obj));
        return clone;
      }
      exports.default = mergeProps;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/constants.js
  var require_constants = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SEPARATOR = exports.PREFIX = void 0;
      exports.PREFIX = "APP";
      exports.SEPARATOR = "::";
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/types.js
  var require_types = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ComponentType = exports.Group = void 0;
      var Group2;
      (function(Group3) {
        Group3["AuthCode"] = "AuthCode";
        Group3["Button"] = "Button";
        Group3["ButtonGroup"] = "ButtonGroup";
        Group3["Cart"] = "Cart";
        Group3["Client"] = "Client";
        Group3["ContextualSaveBar"] = "ContextualSaveBar";
        Group3["Error"] = "Error";
        Group3["Features"] = "Features";
        Group3["FeedbackModal"] = "FeedbackModal";
        Group3["Fullscreen"] = "Fullscreen";
        Group3["LeaveConfirmation"] = "LeaveConfirmation";
        Group3["Link"] = "Link";
        Group3["Loading"] = "Loading";
        Group3["Menu"] = "Menu";
        Group3["Modal"] = "Modal";
        Group3["Navigation"] = "Navigation";
        Group3["Performance"] = "Performance";
        Group3["Pos"] = "Pos";
        Group3["Print"] = "Print";
        Group3["ResourcePicker"] = "Resource_Picker";
        Group3["unstable_Picker"] = "unstable_Picker";
        Group3["Scanner"] = "Scanner";
        Group3["SessionToken"] = "SessionToken";
        Group3["Share"] = "Share";
        Group3["TitleBar"] = "TitleBar";
        Group3["Toast"] = "Toast";
        Group3["MarketingExternalActivityTopBar"] = "MarketingExternalActivityTopBar";
        Group3["WebVitals"] = "WebVitals";
      })(Group2 = exports.Group || (exports.Group = {}));
      var ComponentType;
      (function(ComponentType2) {
        ComponentType2["Button"] = "Button";
        ComponentType2["ButtonGroup"] = "ButtonGroup";
      })(ComponentType = exports.ComponentType || (exports.ComponentType = {}));
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/helper.js
  var require_helper = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/helper.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.updateActionFromPayload = exports.isValidOptionalString = exports.isValidOptionalNumber = exports.forEachInEnum = exports.getMergedProps = exports.findMatchInEnum = exports.getEventNameSpace = exports.NonSnakeCaseGroup = exports.actionWrapper = void 0;
      var merge_1 = __importDefault(require_merge());
      var constants_1 = require_constants();
      var types_1 = require_types();
      function actionWrapper(action) {
        return action;
      }
      exports.actionWrapper = actionWrapper;
      exports.NonSnakeCaseGroup = [
        types_1.Group.AuthCode,
        types_1.Group.Button,
        types_1.Group.ButtonGroup,
        types_1.Group.Cart,
        types_1.Group.Error,
        types_1.Group.Features,
        types_1.Group.Fullscreen,
        types_1.Group.Link,
        types_1.Group.Loading,
        types_1.Group.Menu,
        types_1.Group.Modal,
        types_1.Group.Navigation,
        types_1.Group.Pos,
        types_1.Group.Print,
        types_1.Group.ResourcePicker,
        types_1.Group.Scanner,
        types_1.Group.SessionToken,
        types_1.Group.Share,
        types_1.Group.TitleBar,
        types_1.Group.Toast,
        types_1.Group.unstable_Picker
      ];
      function camelCaseToSnakeCase(value) {
        return value.replace(/([A-Z])/g, function(matcher, _val, index) {
          return (index === 0 ? "" : "_") + matcher[0].toLowerCase();
        });
      }
      function groupToEventNameSpace(group) {
        if (exports.NonSnakeCaseGroup.includes(group)) {
          return group.toUpperCase();
        }
        return camelCaseToSnakeCase(group).toUpperCase();
      }
      function getEventNameSpace(group, eventName, component) {
        if (eventName.startsWith("" + constants_1.PREFIX + constants_1.SEPARATOR)) {
          return eventName;
        }
        var eventNameSpace = groupToEventNameSpace(group);
        if (component) {
          var subgroups_1 = component.subgroups, type = component.type;
          if (subgroups_1 && subgroups_1.length > 0) {
            eventNameSpace += eventNameSpace.length > 0 ? constants_1.SEPARATOR : "";
            subgroups_1.forEach(function(subgroup, index) {
              eventNameSpace += "" + subgroup.toUpperCase() + (index < subgroups_1.length - 1 ? constants_1.SEPARATOR : "");
            });
          }
          if (type !== group && type) {
            eventNameSpace += "" + (eventNameSpace.length > 0 ? constants_1.SEPARATOR : "") + type.toUpperCase();
          }
        }
        if (eventNameSpace) {
          eventNameSpace += "" + (eventNameSpace.length > 0 ? constants_1.SEPARATOR : "") + eventName.toUpperCase();
        }
        return "" + constants_1.PREFIX + constants_1.SEPARATOR + eventNameSpace;
      }
      exports.getEventNameSpace = getEventNameSpace;
      function findMatchInEnum(types, lookup) {
        var match = Object.keys(types).find(function(key) {
          return lookup === types[key];
        });
        return match ? types[match] : void 0;
      }
      exports.findMatchInEnum = findMatchInEnum;
      function getMergedProps(props, newProps) {
        var merged = merge_1.default(props, newProps);
        if (!merged) {
          var cloned = Object.assign(props, newProps);
          return cloned;
        }
        return merged;
      }
      exports.getMergedProps = getMergedProps;
      function forEachInEnum(types, callback) {
        Object.keys(types).forEach(function(key) {
          callback(types[key]);
        });
      }
      exports.forEachInEnum = forEachInEnum;
      function isValidOptionalNumber(value) {
        return value === null || value === void 0 || typeof value === "number";
      }
      exports.isValidOptionalNumber = isValidOptionalNumber;
      function isValidOptionalString(value) {
        return value === null || value === void 0 || typeof value === "string";
      }
      exports.isValidOptionalString = isValidOptionalString;
      function updateActionFromPayload(action, newProps) {
        var id = action.id;
        if (id === newProps.id) {
          Object.assign(action, getMergedProps(action, newProps));
          return true;
        }
        return false;
      }
      exports.updateActionFromPayload = updateActionFromPayload;
    }
  });

  // node_modules/@shopify/app-bridge/package.json
  var require_package = __commonJS({
    "node_modules/@shopify/app-bridge/package.json"(exports, module) {
      module.exports = {
        name: "@shopify/app-bridge",
        version: "3.7.10",
        types: "index.d.ts",
        main: "index.js",
        unpkg: "umd/index.js",
        jsdelivr: "umd/index.js",
        files: [
          "/actions/",
          "/client/",
          "/umd/",
          "/utilities/",
          "/util/",
          "/validate/",
          "/development.d.ts",
          "/development.js",
          "/index.d.ts",
          "/index.js",
          "/MessageTransport.d.ts",
          "/MessageTransport.js",
          "/production.d.ts",
          "/production.js"
        ],
        private: false,
        publishConfig: {
          access: "public",
          "@shopify:registry": "https://registry.npmjs.org"
        },
        repository: "git@github.com:Shopify/app-bridge.git",
        homepage: "https://shopify.dev/docs/api/app-bridge/previous-versions/app-bridge-from-npm/app-setup",
        author: "Shopify Inc.",
        license: "MIT",
        scripts: {
          build: "yarn build:tsc && yarn build:npm && yarn build:umd",
          "build:tsc": "NODE_ENV=production tsc",
          "build:umd": "NODE_ENV=production webpack -p",
          "build:npm": "shx cp -r ./npm/index.js ./index.js",
          check: "tsc",
          clean: "yarn clean:tsc && yarn clean:npm && yarn clean:umd",
          "clean:tsc": "NODE_ENV=production tsc --build --clean",
          "clean:umd": "rm -rf ./umd",
          "clean:npm": "rm -rf ./index.js",
          pack: "yarn pack",
          size: "size-limit"
        },
        sideEffects: false,
        "size-limit": [
          {
            limit: "10.5 KB",
            path: "production.js"
          }
        ],
        dependencies: {
          "@shopify/app-bridge-core": "1.1.1",
          base64url: "^3.0.1",
          "web-vitals": "^3.0.1"
        },
        devDependencies: {
          "@types/node": "^10.12.5",
          shx: "^0.3.3"
        }
      };
    }
  });

  // node_modules/@shopify/app-bridge/actions/helper.js
  var require_helper2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/helper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getPackageName = exports.getVersion = exports.getMergedProps = exports.updateActionFromPayload = exports.isValidOptionalString = exports.isValidOptionalNumber = exports.NonSnakeCaseGroup = exports.getEventNameSpace = exports.forEachInEnum = exports.findMatchInEnum = exports.actionWrapper = void 0;
      var helper_1 = require_helper();
      Object.defineProperty(exports, "actionWrapper", { enumerable: true, get: function() {
        return helper_1.actionWrapper;
      } });
      Object.defineProperty(exports, "findMatchInEnum", { enumerable: true, get: function() {
        return helper_1.findMatchInEnum;
      } });
      Object.defineProperty(exports, "forEachInEnum", { enumerable: true, get: function() {
        return helper_1.forEachInEnum;
      } });
      Object.defineProperty(exports, "getEventNameSpace", { enumerable: true, get: function() {
        return helper_1.getEventNameSpace;
      } });
      Object.defineProperty(exports, "NonSnakeCaseGroup", { enumerable: true, get: function() {
        return helper_1.NonSnakeCaseGroup;
      } });
      Object.defineProperty(exports, "isValidOptionalNumber", { enumerable: true, get: function() {
        return helper_1.isValidOptionalNumber;
      } });
      Object.defineProperty(exports, "isValidOptionalString", { enumerable: true, get: function() {
        return helper_1.isValidOptionalString;
      } });
      Object.defineProperty(exports, "updateActionFromPayload", { enumerable: true, get: function() {
        return helper_1.updateActionFromPayload;
      } });
      Object.defineProperty(exports, "getMergedProps", { enumerable: true, get: function() {
        return helper_1.getMergedProps;
      } });
      var packageJson = require_package();
      function getVersion() {
        return packageJson.version;
      }
      exports.getVersion = getVersion;
      function getPackageName() {
        return packageJson.name;
      }
      exports.getPackageName = getPackageName;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Print/index.js
  var require_Print = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Print/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.app = exports.Action = void 0;
      var helper_1 = require_helper();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["APP"] = "APP::PRINT::APP";
      })(Action3 = exports.Action || (exports.Action = {}));
      function app() {
        return helper_1.actionWrapper({
          group: types_1.Group.Print,
          type: Action3.APP
        });
      }
      exports.app = app;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Print/index.js
  var require_Print2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Print/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.app = exports.Action = void 0;
      var Print_1 = require_Print();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Print_1.Action;
      } });
      Object.defineProperty(exports, "app", { enumerable: true, get: function() {
        return Print_1.app;
      } });
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Error/index.js
  var require_Error = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Error/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.permissionAction = exports.isErrorEventName = exports.throwError = exports.invalidOriginAction = exports.fromAction = exports.AppBridgeError = exports.AppActionType = exports.Action = void 0;
      var types_1 = require_types();
      var helper_1 = require_helper();
      var Action3;
      (function(Action4) {
        Action4["INVALID_ACTION"] = "APP::ERROR::INVALID_ACTION";
        Action4["INVALID_ACTION_TYPE"] = "APP::ERROR::INVALID_ACTION_TYPE";
        Action4["INVALID_PAYLOAD"] = "APP::ERROR::INVALID_PAYLOAD";
        Action4["INVALID_OPTIONS"] = "APP::ERROR::INVALID_OPTIONS";
        Action4["UNEXPECTED_ACTION"] = "APP::ERROR::UNEXPECTED_ACTION";
        Action4["PERSISTENCE"] = "APP::ERROR::PERSISTENCE";
        Action4["UNSUPPORTED_OPERATION"] = "APP::ERROR::UNSUPPORTED_OPERATION";
        Action4["NETWORK"] = "APP::ERROR::NETWORK";
        Action4["PERMISSION"] = "APP::ERROR::PERMISSION";
        Action4["FAILED_AUTHENTICATION"] = "APP::ERROR::FAILED_AUTHENTICATION";
        Action4["INVALID_ORIGIN"] = "APP::ERROR::INVALID_ORIGIN";
      })(Action3 = exports.Action || (exports.Action = {}));
      var AppActionType;
      (function(AppActionType2) {
        AppActionType2["INVALID_CONFIG"] = "APP::ERROR::INVALID_CONFIG";
        AppActionType2["MISSING_CONFIG"] = "APP::APP_ERROR::MISSING_CONFIG";
        AppActionType2["MISSING_APP_BRIDGE_MIDDLEWARE"] = "APP::APP_ERROR::MISSING_APP_BRIDGE_MIDDLEWARE";
        AppActionType2["WINDOW_UNDEFINED"] = "APP::APP_ERROR::WINDOW_UNDEFINED";
        AppActionType2["REDUX_REINSTANTIATED"] = "APP::APP_ERROR::REDUX_REINSTANTIATED";
        AppActionType2["MISSING_LOCAL_ORIGIN"] = "APP::APP_ERROR::MISSING_LOCAL_ORIGIN";
        AppActionType2["MISSING_HOST_PROVIDER"] = "APP::APP_ERROR::MISSING_HOST_PROVIDER";
        AppActionType2["MISSING_ROUTER_CONTEXT"] = "APP::APP_ERROR::MISSING_ROUTER_CONTEXT";
        AppActionType2["MISSING_HISTORY_BLOCK"] = "APP::APP_ERROR::MISSING_HISTORY_BLOCK";
      })(AppActionType = exports.AppActionType || (exports.AppActionType = {}));
      var AppBridgeError = (
        /** @class */
        /* @__PURE__ */ function() {
          function AppBridgeError2(message) {
            this.name = "AppBridgeError";
            this.message = message;
            if (typeof Error.captureStackTrace === "function") {
              Error.captureStackTrace(this, this.constructor);
            } else {
              this.stack = new Error(this.message).stack;
            }
          }
          return AppBridgeError2;
        }()
      );
      exports.AppBridgeError = AppBridgeError;
      AppBridgeError.prototype = Object.create(Error.prototype);
      function fromAction(message, type, action) {
        var errorMessage = message ? type + ": " + message : type;
        var error2 = new AppBridgeError(errorMessage);
        error2.action = action;
        error2.type = type;
        return error2;
      }
      exports.fromAction = fromAction;
      function invalidOriginAction(message) {
        return helper_1.actionWrapper({
          group: types_1.Group.Error,
          payload: {
            message,
            type: Action3.INVALID_ORIGIN
          },
          type: Action3.INVALID_ORIGIN
        });
      }
      exports.invalidOriginAction = invalidOriginAction;
      function throwError() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var type = args[0];
        var message;
        var action;
        if (typeof args[1] === "string") {
          message = args[1];
        } else {
          action = args[1];
          message = args[2] || "";
        }
        throw fromAction(message, type, action);
      }
      exports.throwError = throwError;
      function isErrorEventName(eventName) {
        var match = helper_1.findMatchInEnum(Action3, eventName);
        return typeof match === "string";
      }
      exports.isErrorEventName = isErrorEventName;
      function errorActionWrapperWithId(type, action, message) {
        var castPayload = action.payload;
        return helper_1.actionWrapper({
          type,
          group: types_1.Group.Error,
          payload: {
            action,
            message,
            type,
            id: castPayload && castPayload.id ? castPayload.id : void 0
          }
        });
      }
      function permissionAction(action, message) {
        return errorActionWrapperWithId(Action3.PERMISSION, action, message || "Action is not permitted");
      }
      exports.permissionAction = permissionAction;
    }
  });

  // node_modules/@shopify/app-bridge/actions/types.js
  var require_types2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ComponentType = exports.Group = void 0;
      var types_1 = require_types();
      Object.defineProperty(exports, "Group", { enumerable: true, get: function() {
        return types_1.Group;
      } });
      Object.defineProperty(exports, "ComponentType", { enumerable: true, get: function() {
        return types_1.ComponentType;
      } });
    }
  });

  // node_modules/@shopify/app-bridge/actions/Error/index.js
  var require_Error2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Error/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.networkAction = exports.persistenceAction = exports.unsupportedOperationAction = exports.unexpectedAction = exports.invalidAction = exports.invalidActionType = exports.invalidPayload = exports.Message = exports.fromAction = exports.Action = exports.permissionAction = exports.isErrorEventName = exports.throwError = exports.invalidOriginAction = exports.AppBridgeError = exports.AppActionType = void 0;
      var Error_1 = require_Error();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Error_1.Action;
      } });
      Object.defineProperty(exports, "fromAction", { enumerable: true, get: function() {
        return Error_1.fromAction;
      } });
      var helper_1 = require_helper2();
      var types_1 = require_types2();
      var Error_2 = require_Error();
      Object.defineProperty(exports, "AppActionType", { enumerable: true, get: function() {
        return Error_2.AppActionType;
      } });
      Object.defineProperty(exports, "AppBridgeError", { enumerable: true, get: function() {
        return Error_2.AppBridgeError;
      } });
      Object.defineProperty(exports, "invalidOriginAction", { enumerable: true, get: function() {
        return Error_2.invalidOriginAction;
      } });
      Object.defineProperty(exports, "throwError", { enumerable: true, get: function() {
        return Error_2.throwError;
      } });
      Object.defineProperty(exports, "isErrorEventName", { enumerable: true, get: function() {
        return Error_2.isErrorEventName;
      } });
      Object.defineProperty(exports, "permissionAction", { enumerable: true, get: function() {
        return Error_2.permissionAction;
      } });
      function errorActionWrapperWithId(type, action, message) {
        var castPayload = action.payload;
        return helper_1.actionWrapper({
          type,
          group: types_1.Group.Error,
          payload: {
            action,
            message,
            type,
            id: castPayload && castPayload.id ? castPayload.id : void 0
          }
        });
      }
      var Message;
      (function(Message2) {
        Message2["MISSING_PAYLOAD"] = "Missing payload";
        Message2["INVALID_PAYLOAD_ID"] = "Id in payload is missing or invalid";
      })(Message = exports.Message || (exports.Message = {}));
      function invalidPayload(action, message) {
        return errorActionWrapperWithId(Error_1.Action.INVALID_PAYLOAD, action, message || "The action's payload is missing required properties or has invalid properties");
      }
      exports.invalidPayload = invalidPayload;
      function invalidActionType(action, message) {
        return helper_1.actionWrapper({
          group: types_1.Group.Error,
          payload: {
            action,
            message: message || "The action type is invalid or unsupported",
            type: Error_1.Action.INVALID_ACTION_TYPE
          },
          type: Error_1.Action.INVALID_ACTION_TYPE
        });
      }
      exports.invalidActionType = invalidActionType;
      function invalidAction(action, message) {
        return helper_1.actionWrapper({
          group: types_1.Group.Error,
          payload: {
            action,
            message: message || "The action's has missing/invalid values for `group`, `type` or `version`",
            type: Error_1.Action.INVALID_ACTION
          },
          type: Error_1.Action.INVALID_ACTION
        });
      }
      exports.invalidAction = invalidAction;
      function unexpectedAction(action, message) {
        return helper_1.actionWrapper({
          group: types_1.Group.Error,
          payload: {
            action,
            message: message || "Action cannot be called at this time",
            type: Error_1.Action.UNEXPECTED_ACTION
          },
          type: Error_1.Action.UNEXPECTED_ACTION
        });
      }
      exports.unexpectedAction = unexpectedAction;
      function unsupportedOperationAction(action, message) {
        return errorActionWrapperWithId(Error_1.Action.UNSUPPORTED_OPERATION, action, message || "The action type is unsupported");
      }
      exports.unsupportedOperationAction = unsupportedOperationAction;
      function persistenceAction(action, message) {
        return errorActionWrapperWithId(Error_1.Action.PERSISTENCE, action, message || "Action cannot be persisted on server");
      }
      exports.persistenceAction = persistenceAction;
      function networkAction(action, message) {
        return errorActionWrapperWithId(Error_1.Action.NETWORK, action, message || "Network error");
      }
      exports.networkAction = networkAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/client/types.js
  var require_types3 = __commonJS({
    "node_modules/@shopify/app-bridge-core/client/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LifecycleHook = exports.PermissionType = exports.MessageType = void 0;
      var MessageType;
      (function(MessageType2) {
        MessageType2["GetState"] = "getState";
        MessageType2["Dispatch"] = "dispatch";
        MessageType2["Subscribe"] = "subscribe";
        MessageType2["Unsubscribe"] = "unsubscribe";
      })(MessageType = exports.MessageType || (exports.MessageType = {}));
      var PermissionType;
      (function(PermissionType2) {
        PermissionType2["Dispatch"] = "Dispatch";
        PermissionType2["Subscribe"] = "Subscribe";
      })(PermissionType = exports.PermissionType || (exports.PermissionType = {}));
      var LifecycleHook;
      (function(LifecycleHook2) {
        LifecycleHook2["UpdateAction"] = "UpdateAction";
        LifecycleHook2["DispatchAction"] = "DispatchAction";
      })(LifecycleHook = exports.LifecycleHook || (exports.LifecycleHook = {}));
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/validator.js
  var require_validator = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/validator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isPermitted = exports.getPermissionKey = exports.isPerformanceOrWebVitalsAction = exports.isAppMessage = exports.isAppBridgeAction = void 0;
      var types_1 = require_types3();
      var constants_1 = require_constants();
      var helper_1 = require_helper();
      function isAppBridgeAction(action) {
        return action instanceof Object && Object.prototype.hasOwnProperty.call(action, "type") && action.type.toString().startsWith(constants_1.PREFIX);
      }
      exports.isAppBridgeAction = isAppBridgeAction;
      function isAppMessage(event) {
        if (typeof event !== "object" || !event.data || typeof event.data !== "object") {
          return false;
        }
        var data2 = event.data;
        return Object.prototype.hasOwnProperty.call(data2, "type") && helper_1.findMatchInEnum(types_1.MessageType, data2.type) !== void 0;
      }
      exports.isAppMessage = isAppMessage;
      function isPerformanceOrWebVitalsAction(_a) {
        var type = _a.type;
        return type.match(/^APP::(PERFORMANCE|WEB_VITALS)::/);
      }
      exports.isPerformanceOrWebVitalsAction = isPerformanceOrWebVitalsAction;
      function getPermissionKey(type) {
        return type.replace(new RegExp("^" + constants_1.PREFIX + constants_1.SEPARATOR + "\\w+" + constants_1.SEPARATOR), "");
      }
      exports.getPermissionKey = getPermissionKey;
      function isPermitted(features, _a, permissionType) {
        var group = _a.group, type = _a.type;
        if (!group || !Object.prototype.hasOwnProperty.call(features, group)) {
          return false;
        }
        var feature = features[group];
        if (!feature) {
          return false;
        }
        var actionType = getPermissionKey(type);
        return feature[actionType] ? feature[actionType][permissionType] === true : false;
      }
      exports.isPermitted = isPermitted;
    }
  });

  // node_modules/@shopify/app-bridge-core/util/collection.js
  var require_collection = __commonJS({
    "node_modules/@shopify/app-bridge-core/util/collection.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.removeFromCollection = exports.addAndRemoveFromCollection = void 0;
      function addAndRemoveFromCollection(collection, item, then) {
        collection.push(item);
        return function() {
          return removeFromCollection(collection, item, then);
        };
      }
      exports.addAndRemoveFromCollection = addAndRemoveFromCollection;
      function removeFromCollection(collection, item, then) {
        var idx = collection.findIndex(function(i) {
          return i === item;
        });
        if (idx >= 0) {
          collection.splice(idx, 1);
          if (then) {
            then(item);
          }
          return true;
        }
        return false;
      }
      exports.removeFromCollection = removeFromCollection;
    }
  });

  // node_modules/@shopify/app-bridge-core/util/env.js
  var require_env = __commonJS({
    "node_modules/@shopify/app-bridge-core/util/env.js"(exports) {
      "use strict";
      var _a;
      var _b;
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isUnframed = exports.isClient = exports.isServer = void 0;
      exports.isServer = typeof window === "undefined";
      exports.isClient = !exports.isServer;
      exports.isUnframed = exports.isClient && ((_b = (_a = window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) === null || _b === void 0 ? void 0 : _b.indexOf("Unframed")) > 0;
    }
  });

  // node_modules/@shopify/app-bridge-core/MessageTransport.js
  var require_MessageTransport = __commonJS({
    "node_modules/@shopify/app-bridge-core/MessageTransport.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createTransportListener = exports.fromWindow = exports.fromFrame = exports.Context = void 0;
      var Error_1 = require_Error();
      var validator_1 = require_validator();
      var types_1 = require_types3();
      var collection_1 = require_collection();
      var env_1 = require_env();
      var Context2;
      (function(Context3) {
        Context3["Modal"] = "Modal";
        Context3["Main"] = "Main";
      })(Context2 = exports.Context || (exports.Context = {}));
      function fromFrame(frame, localOrigin, context) {
        var handlers = [];
        var host = frame.host, frameWindow = frame.window;
        if (!host) {
          throw Error_1.fromAction("App frame is undefined", Error_1.AppActionType.WINDOW_UNDEFINED);
        }
        if (env_1.isUnframed && window.MobileWebView) {
          Object.assign(window.MobileWebView, {
            postMessageToIframe: function(message, origin2) {
              frameWindow === null || frameWindow === void 0 ? void 0 : frameWindow.postMessage(message, origin2);
              if (isDispatchAction(message)) {
                host.postMessage(JSON.stringify(message.payload), location.origin);
              }
            },
            updateIframeUrl: function(newUrl) {
              var currentWindowLocation = window.location;
              var frameWindowLocation = (frame.window || {}).location;
              try {
                var newUrlOrigin = new URL(newUrl).origin;
                if (newUrlOrigin === localOrigin && frameWindowLocation) {
                  frameWindowLocation.replace(newUrl);
                } else {
                  currentWindowLocation.href = newUrl;
                }
              } catch (_) {
              }
            }
          });
        }
        host.addEventListener("message", function(event) {
          if (event.source === host || !validator_1.isAppMessage(event)) {
            return;
          }
          if (event.origin !== localOrigin) {
            var errorMessage = "Message origin '" + event.origin + "' does not match app origin '" + localOrigin + "'.";
            var payload = Error_1.invalidOriginAction(errorMessage);
            var message = {
              type: "dispatch",
              payload
            };
            frameWindow === null || frameWindow === void 0 ? void 0 : frameWindow.postMessage(message, event.origin);
            return;
          }
          if (env_1.isUnframed && window.MobileWebView) {
            var payload = JSON.stringify({
              id: "unframed://fromClient",
              origin: localOrigin,
              data: event.data
            });
            window.MobileWebView.postMessage(payload);
            return;
          }
          for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
            var handler = handlers_1[_i];
            handler(event);
          }
        });
        return {
          context,
          localOrigin,
          frameWindow,
          hostFrame: host,
          dispatch: function(message) {
            frameWindow === null || frameWindow === void 0 ? void 0 : frameWindow.postMessage(message, localOrigin);
          },
          subscribe: function(handler) {
            return collection_1.addAndRemoveFromCollection(handlers, handler);
          }
        };
      }
      exports.fromFrame = fromFrame;
      function fromWindow(contentWindow, localOrigin) {
        var handlers = [];
        if (typeof window !== void 0) {
          window.addEventListener("message", function(event) {
            if (window === contentWindow && !env_1.isUnframed || event.source !== contentWindow || !(validator_1.isAppBridgeAction(event.data.payload) || validator_1.isAppMessage(event))) {
              return;
            }
            for (var _i = 0, handlers_2 = handlers; _i < handlers_2.length; _i++) {
              var handler = handlers_2[_i];
              handler(event);
            }
          });
        }
        return {
          localOrigin,
          hostFrame: contentWindow,
          dispatch: function(message) {
            var _a;
            if (!((_a = message.source) === null || _a === void 0 ? void 0 : _a.host)) {
              return;
            }
            if (env_1.isUnframed && window && window.MobileWebView) {
              var payload = JSON.stringify({
                id: "unframed://fromClient",
                origin: localOrigin,
                data: message
              });
              window.MobileWebView.postMessage(payload);
              return;
            }
            var messageOrigin = new URL("https://" + message.source.host).origin;
            contentWindow.postMessage(message, messageOrigin);
          },
          subscribe: function(handler) {
            return collection_1.addAndRemoveFromCollection(handlers, handler);
          }
        };
      }
      exports.fromWindow = fromWindow;
      function createTransportListener() {
        var listeners = [];
        var actionListeners = {};
        function createSubscribeHandler(dispatcher) {
          function subscribe() {
            if (arguments.length < 2) {
              return collection_1.addAndRemoveFromCollection(listeners, { callback: arguments[0] });
            }
            var _a = Array.from(arguments), type = _a[0], callback = _a[1], id = _a[2];
            var actionCallback = { callback, id };
            var payload = { type, id };
            if (!Object.prototype.hasOwnProperty.call(actionListeners, type)) {
              actionListeners[type] = [];
            }
            if (dispatcher) {
              dispatcher(types_1.MessageType.Subscribe, payload);
            }
            return collection_1.addAndRemoveFromCollection(actionListeners[type], actionCallback, function() {
              if (dispatcher) {
                dispatcher(types_1.MessageType.Unsubscribe, payload);
              }
            });
          }
          return subscribe;
        }
        return {
          createSubscribeHandler,
          handleMessage: function(message) {
            listeners.forEach(function(listener) {
              return listener.callback(message);
            });
          },
          handleActionDispatch: function(_a) {
            var type = _a.type, payload = _a.payload;
            var hasCallback = false;
            if (Object.prototype.hasOwnProperty.call(actionListeners, type)) {
              for (var _i = 0, _b = actionListeners[type]; _i < _b.length; _i++) {
                var listener = _b[_i];
                var id = listener.id, callback = listener.callback;
                var matchId = payload && payload.id === id;
                if (matchId || !id) {
                  callback(payload);
                  hasCallback = true;
                }
              }
            }
            return hasCallback;
          }
        };
      }
      exports.createTransportListener = createTransportListener;
      function isDispatchAction(message) {
        return message !== null && typeof message === "object" && !Array.isArray(message) && message.type === "dispatch" && typeof message.payload === "object";
      }
    }
  });

  // node_modules/@shopify/app-bridge/MessageTransport.js
  var require_MessageTransport2 = __commonJS({
    "node_modules/@shopify/app-bridge/MessageTransport.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_MessageTransport(), exports);
    }
  });

  // node_modules/@shopify/app-bridge/util/shared.js
  var require_shared = __commonJS({
    "node_modules/@shopify/app-bridge/util/shared.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mockAppBridge = exports.serverAppBridge = void 0;
      var Error_1 = require_Error2();
      var noop13 = function() {
      };
      var noopPromise = new Promise(function() {
      });
      exports.serverAppBridge = {
        dispatch: function() {
          return {};
        },
        error: function() {
          return noop13;
        },
        featuresAvailable: function() {
          return Promise.reject(Error_1.fromAction("Feature detection is only available on the client side.", Error_1.AppActionType.WINDOW_UNDEFINED));
        },
        getState: function() {
          return Promise.reject(Error_1.fromAction("State is only available on the client side.", Error_1.AppActionType.WINDOW_UNDEFINED));
        },
        localOrigin: "",
        hostOrigin: "",
        subscribe: function() {
          return noop13;
        }
      };
      exports.mockAppBridge = {
        dispatch: function() {
          return {};
        },
        error: function() {
          return noop13;
        },
        featuresAvailable: function() {
          return noopPromise;
        },
        getState: function() {
          return noopPromise;
        },
        localOrigin: "",
        hostOrigin: "",
        subscribe: function() {
          return noop13;
        }
      };
    }
  });

  // node_modules/@shopify/app-bridge/util/env.js
  var require_env2 = __commonJS({
    "node_modules/@shopify/app-bridge/util/env.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isDevelopmentClient = exports.isProduction = exports.isDevelopment = exports.isUnframed = exports.isServer = exports.isClient = void 0;
      var env_1 = require_env();
      var env_2 = require_env();
      Object.defineProperty(exports, "isClient", { enumerable: true, get: function() {
        return env_2.isClient;
      } });
      Object.defineProperty(exports, "isServer", { enumerable: true, get: function() {
        return env_2.isServer;
      } });
      Object.defineProperty(exports, "isUnframed", { enumerable: true, get: function() {
        return env_2.isUnframed;
      } });
      exports.isDevelopment = typeof process !== "undefined" && process.env && true;
      exports.isProduction = !exports.isDevelopment;
      exports.isDevelopmentClient = exports.isDevelopment && env_1.isClient;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Client/index.js
  var require_Client = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Client/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = void 0;
      var Action3;
      (function(Action4) {
        Action4["INITIALIZE"] = "APP::CLIENT::INITIALIZE";
      })(Action3 = exports.Action || (exports.Action = {}));
    }
  });

  // node_modules/@shopify/app-bridge/actions/Client/index.js
  var require_Client2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Client/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.initialize = exports.Action = void 0;
      var Client_1 = require_Client();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Client_1.Action;
      } });
      var types_1 = require_types2();
      var helper_1 = require_helper2();
      function initialize() {
        return helper_1.actionWrapper({
          group: types_1.Group.Client,
          type: Client_1.Action.INITIALIZE
        });
      }
      exports.initialize = initialize;
    }
  });

  // node_modules/web-vitals/dist/web-vitals.umd.cjs
  var require_web_vitals_umd = __commonJS({
    "node_modules/web-vitals/dist/web-vitals.umd.cjs"(exports, module) {
      !function(e, n) {
        "object" == typeof exports && "undefined" != typeof module ? n(exports) : "function" == typeof define && define.amd ? define(["exports"], n) : n((e = "undefined" != typeof globalThis ? globalThis : e || self).webVitals = {});
      }(exports, function(e) {
        "use strict";
        var n, t, i, r, o, a = -1, c = function(e2) {
          addEventListener("pageshow", function(n2) {
            n2.persisted && (a = n2.timeStamp, e2(n2));
          }, true);
        }, u = function() {
          return window.performance && performance.getEntriesByType && performance.getEntriesByType("navigation")[0];
        }, f = function() {
          var e2 = u();
          return e2 && e2.activationStart || 0;
        }, s = function(e2, n2) {
          var t2 = u(), i2 = "navigate";
          a >= 0 ? i2 = "back-forward-cache" : t2 && (document.prerendering || f() > 0 ? i2 = "prerender" : document.wasDiscarded ? i2 = "restore" : t2.type && (i2 = t2.type.replace(/_/g, "-")));
          return { name: e2, value: void 0 === n2 ? -1 : n2, rating: "good", delta: 0, entries: [], id: "v3-".concat(Date.now(), "-").concat(Math.floor(8999999999999 * Math.random()) + 1e12), navigationType: i2 };
        }, d = function(e2, n2, t2) {
          try {
            if (PerformanceObserver.supportedEntryTypes.includes(e2)) {
              var i2 = new PerformanceObserver(function(e3) {
                Promise.resolve().then(function() {
                  n2(e3.getEntries());
                });
              });
              return i2.observe(Object.assign({ type: e2, buffered: true }, t2 || {})), i2;
            }
          } catch (e3) {
          }
        }, l = function(e2, n2, t2, i2) {
          var r2, o2;
          return function(a2) {
            n2.value >= 0 && (a2 || i2) && ((o2 = n2.value - (r2 || 0)) || void 0 === r2) && (r2 = n2.value, n2.delta = o2, n2.rating = function(e3, n3) {
              return e3 > n3[1] ? "poor" : e3 > n3[0] ? "needs-improvement" : "good";
            }(n2.value, t2), e2(n2));
          };
        }, p = function(e2) {
          requestAnimationFrame(function() {
            return requestAnimationFrame(function() {
              return e2();
            });
          });
        }, v = function(e2) {
          var n2 = function(n3) {
            "pagehide" !== n3.type && "hidden" !== document.visibilityState || e2(n3);
          };
          addEventListener("visibilitychange", n2, true), addEventListener("pagehide", n2, true);
        }, m = function(e2) {
          var n2 = false;
          return function(t2) {
            n2 || (e2(t2), n2 = true);
          };
        }, h = -1, g = function() {
          return "hidden" !== document.visibilityState || document.prerendering ? 1 / 0 : 0;
        }, T = function(e2) {
          "hidden" === document.visibilityState && h > -1 && (h = "visibilitychange" === e2.type ? e2.timeStamp : 0, E());
        }, y = function() {
          addEventListener("visibilitychange", T, true), addEventListener("prerenderingchange", T, true);
        }, E = function() {
          removeEventListener("visibilitychange", T, true), removeEventListener("prerenderingchange", T, true);
        }, C = function() {
          return h < 0 && (h = g(), y(), c(function() {
            setTimeout(function() {
              h = g(), y();
            }, 0);
          })), { get firstHiddenTime() {
            return h;
          } };
        }, L = function(e2) {
          document.prerendering ? addEventListener("prerenderingchange", function() {
            return e2();
          }, true) : e2();
        }, b = [1800, 3e3], w = function(e2, n2) {
          n2 = n2 || {}, L(function() {
            var t2, i2 = C(), r2 = s("FCP"), o2 = d("paint", function(e3) {
              e3.forEach(function(e4) {
                "first-contentful-paint" === e4.name && (o2.disconnect(), e4.startTime < i2.firstHiddenTime && (r2.value = Math.max(e4.startTime - f(), 0), r2.entries.push(e4), t2(true)));
              });
            });
            o2 && (t2 = l(e2, r2, b, n2.reportAllChanges), c(function(i3) {
              r2 = s("FCP"), t2 = l(e2, r2, b, n2.reportAllChanges), p(function() {
                r2.value = performance.now() - i3.timeStamp, t2(true);
              });
            }));
          });
        }, S = [0.1, 0.25], P = function(e2, n2) {
          n2 = n2 || {}, w(m(function() {
            var t2, i2 = s("CLS", 0), r2 = 0, o2 = [], a2 = function(e3) {
              e3.forEach(function(e4) {
                if (!e4.hadRecentInput) {
                  var n3 = o2[0], t3 = o2[o2.length - 1];
                  r2 && e4.startTime - t3.startTime < 1e3 && e4.startTime - n3.startTime < 5e3 ? (r2 += e4.value, o2.push(e4)) : (r2 = e4.value, o2 = [e4]);
                }
              }), r2 > i2.value && (i2.value = r2, i2.entries = o2, t2());
            }, u2 = d("layout-shift", a2);
            u2 && (t2 = l(e2, i2, S, n2.reportAllChanges), v(function() {
              a2(u2.takeRecords()), t2(true);
            }), c(function() {
              r2 = 0, i2 = s("CLS", 0), t2 = l(e2, i2, S, n2.reportAllChanges), p(function() {
                return t2();
              });
            }), setTimeout(t2, 0));
          }));
        }, I = { passive: true, capture: true }, F = /* @__PURE__ */ new Date(), A = function(e2, r2) {
          n || (n = r2, t = e2, i = /* @__PURE__ */ new Date(), k(removeEventListener), D());
        }, D = function() {
          if (t >= 0 && t < i - F) {
            var e2 = { entryType: "first-input", name: n.type, target: n.target, cancelable: n.cancelable, startTime: n.timeStamp, processingStart: n.timeStamp + t };
            r.forEach(function(n2) {
              n2(e2);
            }), r = [];
          }
        }, M = function(e2) {
          if (e2.cancelable) {
            var n2 = (e2.timeStamp > 1e12 ? /* @__PURE__ */ new Date() : performance.now()) - e2.timeStamp;
            "pointerdown" == e2.type ? function(e3, n3) {
              var t2 = function() {
                A(e3, n3), r2();
              }, i2 = function() {
                r2();
              }, r2 = function() {
                removeEventListener("pointerup", t2, I), removeEventListener("pointercancel", i2, I);
              };
              addEventListener("pointerup", t2, I), addEventListener("pointercancel", i2, I);
            }(n2, e2) : A(n2, e2);
          }
        }, k = function(e2) {
          ["mousedown", "keydown", "touchstart", "pointerdown"].forEach(function(n2) {
            return e2(n2, M, I);
          });
        }, x = [100, 300], B = function(e2, i2) {
          i2 = i2 || {}, L(function() {
            var o2, a2 = C(), u2 = s("FID"), f2 = function(e3) {
              e3.startTime < a2.firstHiddenTime && (u2.value = e3.processingStart - e3.startTime, u2.entries.push(e3), o2(true));
            }, p2 = function(e3) {
              e3.forEach(f2);
            }, h2 = d("first-input", p2);
            o2 = l(e2, u2, x, i2.reportAllChanges), h2 && v(m(function() {
              p2(h2.takeRecords()), h2.disconnect();
            })), h2 && c(function() {
              var a3;
              u2 = s("FID"), o2 = l(e2, u2, x, i2.reportAllChanges), r = [], t = -1, n = null, k(addEventListener), a3 = f2, r.push(a3), D();
            });
          });
        }, N = 0, R = 1 / 0, H = 0, O = function(e2) {
          e2.forEach(function(e3) {
            e3.interactionId && (R = Math.min(R, e3.interactionId), H = Math.max(H, e3.interactionId), N = H ? (H - R) / 7 + 1 : 0);
          });
        }, j = function() {
          return o ? N : performance.interactionCount || 0;
        }, q = function() {
          "interactionCount" in performance || o || (o = d("event", O, { type: "event", buffered: true, durationThreshold: 0 }));
        }, V = [200, 500], _ = 0, z = function() {
          return j() - _;
        }, G = [], J = {}, K = function(e2) {
          var n2 = G[G.length - 1], t2 = J[e2.interactionId];
          if (t2 || G.length < 10 || e2.duration > n2.latency) {
            if (t2)
              t2.entries.push(e2), t2.latency = Math.max(t2.latency, e2.duration);
            else {
              var i2 = { id: e2.interactionId, latency: e2.duration, entries: [e2] };
              J[i2.id] = i2, G.push(i2);
            }
            G.sort(function(e3, n3) {
              return n3.latency - e3.latency;
            }), G.splice(10).forEach(function(e3) {
              delete J[e3.id];
            });
          }
        }, Q = function(e2, n2) {
          n2 = n2 || {}, L(function() {
            var t2;
            q();
            var i2, r2 = s("INP"), o2 = function(e3) {
              e3.forEach(function(e4) {
                (e4.interactionId && K(e4), "first-input" === e4.entryType) && (!G.some(function(n4) {
                  return n4.entries.some(function(n5) {
                    return e4.duration === n5.duration && e4.startTime === n5.startTime;
                  });
                }) && K(e4));
              });
              var n3, t3 = (n3 = Math.min(G.length - 1, Math.floor(z() / 50)), G[n3]);
              t3 && t3.latency !== r2.value && (r2.value = t3.latency, r2.entries = t3.entries, i2());
            }, a2 = d("event", o2, { durationThreshold: null !== (t2 = n2.durationThreshold) && void 0 !== t2 ? t2 : 40 });
            i2 = l(e2, r2, V, n2.reportAllChanges), a2 && ("PerformanceEventTiming" in window && "interactionId" in PerformanceEventTiming.prototype && a2.observe({ type: "first-input", buffered: true }), v(function() {
              o2(a2.takeRecords()), r2.value < 0 && z() > 0 && (r2.value = 0, r2.entries = []), i2(true);
            }), c(function() {
              G = [], _ = j(), r2 = s("INP"), i2 = l(e2, r2, V, n2.reportAllChanges);
            }));
          });
        }, U = [2500, 4e3], W = {}, X = function(e2, n2) {
          n2 = n2 || {}, L(function() {
            var t2, i2 = C(), r2 = s("LCP"), o2 = function(e3) {
              var n3 = e3[e3.length - 1];
              n3 && n3.startTime < i2.firstHiddenTime && (r2.value = Math.max(n3.startTime - f(), 0), r2.entries = [n3], t2());
            }, a2 = d("largest-contentful-paint", o2);
            if (a2) {
              t2 = l(e2, r2, U, n2.reportAllChanges);
              var u2 = m(function() {
                W[r2.id] || (o2(a2.takeRecords()), a2.disconnect(), W[r2.id] = true, t2(true));
              });
              ["keydown", "click"].forEach(function(e3) {
                addEventListener(e3, function() {
                  return setTimeout(u2, 0);
                }, true);
              }), v(u2), c(function(i3) {
                r2 = s("LCP"), t2 = l(e2, r2, U, n2.reportAllChanges), p(function() {
                  r2.value = performance.now() - i3.timeStamp, W[r2.id] = true, t2(true);
                });
              });
            }
          });
        }, Y = [800, 1800], Z = function e2(n2) {
          document.prerendering ? L(function() {
            return e2(n2);
          }) : "complete" !== document.readyState ? addEventListener("load", function() {
            return e2(n2);
          }, true) : setTimeout(n2, 0);
        }, $ = function(e2, n2) {
          n2 = n2 || {};
          var t2 = s("TTFB"), i2 = l(e2, t2, Y, n2.reportAllChanges);
          Z(function() {
            var r2 = u();
            if (r2) {
              var o2 = r2.responseStart;
              if (o2 <= 0 || o2 > performance.now())
                return;
              t2.value = Math.max(o2 - f(), 0), t2.entries = [r2], i2(true), c(function() {
                t2 = s("TTFB", 0), (i2 = l(e2, t2, Y, n2.reportAllChanges))(true);
              });
            }
          });
        };
        e.CLSThresholds = S, e.FCPThresholds = b, e.FIDThresholds = x, e.INPThresholds = V, e.LCPThresholds = U, e.TTFBThresholds = Y, e.getCLS = P, e.getFCP = w, e.getFID = B, e.getINP = Q, e.getLCP = X, e.getTTFB = $, e.onCLS = P, e.onFCP = w, e.onFID = B, e.onINP = Q, e.onLCP = X, e.onTTFB = $;
      });
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/WebVitals/index.js
  var require_WebVitals = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/WebVitals/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = void 0;
      var Action3;
      (function(Action4) {
        Action4["LARGEST_CONTENTFUL_PAINT"] = "APP::WEB_VITALS::LARGEST_CONTENTFUL_PAINT";
        Action4["FIRST_INPUT_DELAY"] = "APP::WEB_VITALS::FIRST_INPUT_DELAY";
        Action4["CUMULATIVE_LAYOUT_SHIFT"] = "APP::WEB_VITALS::CUMULATIVE_LAYOUT_SHIFT";
        Action4["FIRST_CONTENTFUL_PAINT"] = "APP::WEB_VITALS::FIRST_CONTENTFUL_PAINT";
        Action4["TIME_TO_FIRST_BYTE"] = "APP::WEB_VITALS::TIME_TO_FIRST_BYTE";
        Action4["INTERACTION_TO_NEXT_PAINT"] = "APP::WEB_VITALS::INTERACTION_TO_NEXT_PAINT";
      })(Action3 = exports.Action || (exports.Action = {}));
    }
  });

  // node_modules/@shopify/app-bridge/utilities/platform.js
  var require_platform = __commonJS({
    "node_modules/@shopify/app-bridge/utilities/platform.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isShopifyPing = exports.isShopifyPOS = exports.isShopifyMobile = exports.isShopifyEmbedded = exports.isMobile = void 0;
      var env_1 = require_env2();
      function isMobile() {
        return isShopifyMobile() || isShopifyPOS() || isShopifyPing();
      }
      exports.isMobile = isMobile;
      function isShopifyEmbedded() {
        return env_1.isClient && window.top !== window.self || env_1.isUnframed;
      }
      exports.isShopifyEmbedded = isShopifyEmbedded;
      function isShopifyMobile() {
        return typeof navigator !== "undefined" && navigator.userAgent.indexOf("Shopify Mobile") >= 0;
      }
      exports.isShopifyMobile = isShopifyMobile;
      function isShopifyPOS() {
        return typeof navigator !== "undefined" && navigator.userAgent.indexOf("Shopify POS") >= 0;
      }
      exports.isShopifyPOS = isShopifyPOS;
      function isShopifyPing() {
        return typeof navigator !== "undefined" && navigator.userAgent.indexOf("Shopify Ping") >= 0;
      }
      exports.isShopifyPing = isShopifyPing;
    }
  });

  // node_modules/@shopify/app-bridge/actions/WebVitals/actions.js
  var require_actions = __commonJS({
    "node_modules/@shopify/app-bridge/actions/WebVitals/actions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.initializeWebVitals = exports.interactionToNextPaint = exports.timeToFirstByte = exports.firstContentfulPaint = exports.cumulativeLayoutShift = exports.firstInputDelay = exports.largestContentfulPaint = exports.Action = void 0;
      var web_vitals_1 = require_web_vitals_umd();
      var WebVitals_1 = require_WebVitals();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return WebVitals_1.Action;
      } });
      var env_1 = require_env2();
      var types_1 = require_types2();
      var helper_1 = require_helper2();
      var platform_1 = require_platform();
      function largestContentfulPaint(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.WebVitals,
          type: WebVitals_1.Action.LARGEST_CONTENTFUL_PAINT,
          payload
        });
      }
      exports.largestContentfulPaint = largestContentfulPaint;
      function firstInputDelay(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.WebVitals,
          type: WebVitals_1.Action.FIRST_INPUT_DELAY,
          payload
        });
      }
      exports.firstInputDelay = firstInputDelay;
      function cumulativeLayoutShift(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.WebVitals,
          type: WebVitals_1.Action.CUMULATIVE_LAYOUT_SHIFT,
          payload
        });
      }
      exports.cumulativeLayoutShift = cumulativeLayoutShift;
      function firstContentfulPaint(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.WebVitals,
          type: WebVitals_1.Action.FIRST_CONTENTFUL_PAINT,
          payload
        });
      }
      exports.firstContentfulPaint = firstContentfulPaint;
      function timeToFirstByte(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.WebVitals,
          type: WebVitals_1.Action.TIME_TO_FIRST_BYTE,
          payload
        });
      }
      exports.timeToFirstByte = timeToFirstByte;
      function interactionToNextPaint(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.WebVitals,
          type: WebVitals_1.Action.INTERACTION_TO_NEXT_PAINT,
          payload
        });
      }
      exports.interactionToNextPaint = interactionToNextPaint;
      function initializeWebVitals(app) {
        function onReport(cb) {
          return function(data2) {
            var id = data2.id, metricName = data2.name, value = data2.value;
            var payload = { id, metricName, value };
            var event = cb(payload);
            app.dispatch(event);
          };
        }
        var untypedWindow = window;
        if (env_1.isServer || env_1.isClient && untypedWindow.__is_web_vitals_initialized__ || platform_1.isMobile()) {
          return;
        }
        untypedWindow.__is_web_vitals_initialized__ = true;
        web_vitals_1.onLCP(onReport(largestContentfulPaint));
        web_vitals_1.onFID(onReport(firstInputDelay));
        web_vitals_1.onCLS(onReport(cumulativeLayoutShift));
        web_vitals_1.onFCP(onReport(firstContentfulPaint));
        web_vitals_1.onTTFB(onReport(timeToFirstByte));
        web_vitals_1.onINP(onReport(interactionToNextPaint));
      }
      exports.initializeWebVitals = initializeWebVitals;
    }
  });

  // node_modules/@shopify/app-bridge/actions/WebVitals/index.js
  var require_WebVitals2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/WebVitals/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_actions(), exports);
    }
  });

  // node_modules/@shopify/app-bridge/client/redirect.js
  var require_redirect = __commonJS({
    "node_modules/@shopify/app-bridge/client/redirect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getWindow = exports.getLocation = exports.redirect = exports.shouldRedirect = void 0;
      function shouldRedirect(frame) {
        return frame === window;
      }
      exports.shouldRedirect = shouldRedirect;
      function redirect2(url) {
        var location2 = getLocation();
        if (!location2) {
          return;
        }
        location2.assign(url);
      }
      exports.redirect = redirect2;
      function getLocation() {
        return hasWindow() ? window.location : void 0;
      }
      exports.getLocation = getLocation;
      function getWindow() {
        return hasWindow() ? window : void 0;
      }
      exports.getWindow = getWindow;
      function hasWindow() {
        return typeof window !== "undefined";
      }
    }
  });

  // node_modules/@shopify/app-bridge/client/print.js
  var require_print = __commonJS({
    "node_modules/@shopify/app-bridge/client/print.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.handleAppPrint = void 0;
      var redirect_1 = require_redirect();
      function isRunningOniOS() {
        return navigator.userAgent.indexOf("iOS") >= 0;
      }
      function createHiddenInput() {
        var currentWindow = redirect_1.getWindow();
        if (!currentWindow || !currentWindow.document || !currentWindow.document.body) {
          return;
        }
        var inputElement = currentWindow.document.createElement("input");
        inputElement.style.display = "none";
        currentWindow.document.body.appendChild(inputElement);
        return inputElement;
      }
      function printWindow() {
        var _a;
        (_a = redirect_1.getWindow()) === null || _a === void 0 ? void 0 : _a.print();
      }
      function handleMobileAppPrint() {
        var input = createHiddenInput();
        if (!input) {
          return;
        }
        input.select();
        printWindow();
        input.remove();
      }
      function handleAppPrint() {
        if (isRunningOniOS()) {
          handleMobileAppPrint();
        } else {
          printWindow();
        }
      }
      exports.handleAppPrint = handleAppPrint;
    }
  });

  // node_modules/@shopify/app-bridge/client/types.js
  var require_types4 = __commonJS({
    "node_modules/@shopify/app-bridge/client/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isV1Config = exports.MessageType = exports.LifecycleHook = exports.PermissionType = void 0;
      var types_1 = require_types3();
      Object.defineProperty(exports, "MessageType", { enumerable: true, get: function() {
        return types_1.MessageType;
      } });
      var types_2 = require_types3();
      Object.defineProperty(exports, "PermissionType", { enumerable: true, get: function() {
        return types_2.PermissionType;
      } });
      Object.defineProperty(exports, "LifecycleHook", { enumerable: true, get: function() {
        return types_2.LifecycleHook;
      } });
      function isV1Config(config) {
        return !config.host;
      }
      exports.isV1Config = isV1Config;
    }
  });

  // node_modules/@shopify/app-bridge/util/collection.js
  var require_collection2 = __commonJS({
    "node_modules/@shopify/app-bridge/util/collection.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.removeFromCollection = exports.addAndRemoveFromCollection = void 0;
      var collection_1 = require_collection();
      Object.defineProperty(exports, "addAndRemoveFromCollection", { enumerable: true, get: function() {
        return collection_1.addAndRemoveFromCollection;
      } });
      Object.defineProperty(exports, "removeFromCollection", { enumerable: true, get: function() {
        return collection_1.removeFromCollection;
      } });
    }
  });

  // node_modules/@shopify/app-bridge/client/Hooks.js
  var require_Hooks = __commonJS({
    "node_modules/@shopify/app-bridge/client/Hooks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var collection_1 = require_collection2();
      var Hooks = (
        /** @class */
        function() {
          function Hooks2() {
            this.map = {};
          }
          Hooks2.prototype.set = function(hook, handler) {
            if (!Object.prototype.hasOwnProperty.call(this.map, hook)) {
              this.map[hook] = [];
            }
            var value = { handler, remove: function() {
            } };
            var remove = collection_1.addAndRemoveFromCollection(this.map[hook], value);
            value = { handler, remove };
            return remove;
          };
          Hooks2.prototype.get = function(hook) {
            var value = this.map[hook];
            return value ? value.map(function(val) {
              return val.handler;
            }) : void 0;
          };
          Hooks2.prototype.run = function(hook, final, context) {
            var initialArgs = [];
            for (var _i = 3; _i < arguments.length; _i++) {
              initialArgs[_i - 3] = arguments[_i];
            }
            var index = 0;
            var handlers = this.get(hook) || [];
            function handler() {
              var args = [];
              for (var _i2 = 0; _i2 < arguments.length; _i2++) {
                args[_i2] = arguments[_i2];
              }
              var childHandler = handlers[index++];
              if (childHandler) {
                return childHandler(handler).apply(context, args);
              }
              return final.apply(context, args);
            }
            return handler.apply(context, initialArgs);
          };
          return Hooks2;
        }()
      );
      exports.default = Hooks;
    }
  });

  // node_modules/@shopify/app-bridge/client/Client.js
  var require_Client3 = __commonJS({
    "node_modules/@shopify/app-bridge/client/Client.js"(exports) {
      "use strict";
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var __spreadArray = exports && exports.__spreadArray || function(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
          to[j] = from[i];
        return to;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createApp = exports.createAppWrapper = exports.createClientApp = exports.WINDOW_UNDEFINED_MESSAGE = void 0;
      var helper_1 = require_helper2();
      var Print_1 = require_Print2();
      var Error_1 = require_Error2();
      var MessageTransport_1 = require_MessageTransport2();
      var shared_1 = require_shared();
      var env_1 = require_env2();
      var Client_1 = require_Client2();
      var WebVitals_1 = require_WebVitals2();
      var print_1 = require_print();
      var redirect_1 = require_redirect();
      var types_1 = require_types4();
      var Hooks_1 = __importDefault(require_Hooks());
      exports.WINDOW_UNDEFINED_MESSAGE = "window is not defined. Running an app outside a browser is not supported";
      function redirectHandler(hostFrame, config) {
        var apiKey = config.apiKey, host = config.host, _a = config.forceRedirect, forceRedirect = _a === void 0 ? !env_1.isDevelopmentClient : _a;
        var location2 = redirect_1.getLocation();
        if (env_1.isUnframed || !location2 || !apiKey || !host || !forceRedirect || !redirect_1.shouldRedirect(hostFrame)) {
          return false;
        }
        var url = "https://" + host + "/apps/" + apiKey + location2.pathname + (location2.search || "");
        redirect_1.redirect(url);
        return true;
      }
      var actionWrapper = function(next) {
        return function(action) {
          return next(__assign(__assign({}, action), { version: helper_1.getVersion(), clientInterface: {
            name: helper_1.getPackageName(),
            version: helper_1.getVersion()
          } }));
        };
      };
      var actionWrappingMiddleware = function(hooks) {
        hooks.set(types_1.LifecycleHook.DispatchAction, actionWrapper);
      };
      function appSetUp(app) {
        app.subscribe(Print_1.Action.APP, print_1.handleAppPrint);
        app.dispatch(Client_1.initialize());
        try {
          WebVitals_1.initializeWebVitals(app);
        } catch (err) {
          console.error("App-Bridge failed to initialize web-vitals", err);
        }
      }
      var createClientApp = function(transport, middlewares) {
        if (middlewares === void 0) {
          middlewares = [];
        }
        var getStateListeners = [];
        var transportListener = MessageTransport_1.createTransportListener();
        var handler = function(event) {
          var message = event.data;
          var type = message.type, payload = message.payload;
          switch (type) {
            case "getState": {
              var resolvers2 = getStateListeners.splice(0);
              resolvers2.forEach(function(resolver) {
                return resolver(payload);
              });
              break;
            }
            case "dispatch": {
              transportListener.handleMessage(payload);
              var hasCallback = transportListener.handleActionDispatch(payload);
              if (hasCallback) {
                return;
              }
              var errorType = helper_1.findMatchInEnum(Error_1.Action, payload.type);
              if (errorType) {
                Error_1.throwError(errorType, payload);
              }
              break;
            }
            default:
          }
        };
        transport.subscribe(handler);
        return function(config) {
          var decodedConfig = validateAndDecodeConfig(config);
          var isRedirecting = redirectHandler(transport.hostFrame, decodedConfig);
          if (isRedirecting) {
            return shared_1.mockAppBridge;
          }
          var dispatcher = createDispatcher(transport, decodedConfig);
          var subscribe = transportListener.createSubscribeHandler(dispatcher);
          dispatcher(types_1.MessageType.Unsubscribe);
          function dispatch(action) {
            dispatcher(types_1.MessageType.Dispatch, action);
            return action;
          }
          var hostOrigin = new URL("https://" + decodedConfig.host).origin;
          var hooks = new Hooks_1.default();
          var app = {
            hostOrigin,
            localOrigin: transport.localOrigin,
            hooks,
            dispatch: function(action) {
              if (!app.hooks) {
                return dispatch(action);
              }
              return app.hooks.run(types_1.LifecycleHook.DispatchAction, dispatch, app, action);
            },
            featuresAvailable: function() {
              var features = [];
              for (var _i2 = 0; _i2 < arguments.length; _i2++) {
                features[_i2] = arguments[_i2];
              }
              var firstItem = features[0];
              var parsedFeatures = Array.isArray(firstItem) ? __spreadArray([], firstItem) : features;
              return app.getState("features").then(function(state) {
                if (parsedFeatures.length) {
                  return parsedFeatures.reduce(function(acc, feature) {
                    if (Object.keys(state).includes(feature)) {
                      acc[feature] = state[feature];
                    }
                    return acc;
                  }, {});
                }
                return state;
              });
            },
            getState: function(query) {
              if (query && typeof query !== "string") {
                return Promise.resolve(void 0);
              }
              return new Promise(function(resolve) {
                getStateListeners.push(resolve);
                dispatcher(types_1.MessageType.GetState);
              }).then(function(state) {
                var newState = state;
                if (query) {
                  for (var _i2 = 0, _a = query.split("."); _i2 < _a.length; _i2++) {
                    var key = _a[_i2];
                    if (newState == null || typeof newState !== "object" || Array.isArray(newState) || !Object.keys(newState).includes(key)) {
                      return void 0;
                    }
                    newState = newState[key];
                  }
                }
                return newState;
              });
            },
            subscribe,
            error: function(listener, id) {
              var unsubscribeCb = [];
              helper_1.forEachInEnum(Error_1.Action, function(eventNameSpace) {
                unsubscribeCb.push(subscribe(eventNameSpace, listener, id));
              });
              return function() {
                unsubscribeCb.forEach(function(unsubscribe) {
                  return unsubscribe();
                });
              };
            }
          };
          for (var _i = 0, middlewares_1 = middlewares; _i < middlewares_1.length; _i++) {
            var middleware = middlewares_1[_i];
            middleware(hooks, app);
          }
          appSetUp(app);
          return app;
        };
      };
      exports.createClientApp = createClientApp;
      function validateAndDecodeConfig(config) {
        var _a;
        if (!config.host) {
          throw Error_1.fromAction("host must be provided", Error_1.AppActionType.INVALID_CONFIG);
        }
        if (!config.apiKey) {
          throw Error_1.fromAction("apiKey must be provided", Error_1.AppActionType.INVALID_CONFIG);
        }
        try {
          var host = atob((_a = config.host) === null || _a === void 0 ? void 0 : _a.replace(/_/g, "/").replace(/-/g, "+"));
          return __assign(__assign({}, config), { host });
        } catch (_b) {
          var message = "not a valid host, please use the value provided by Shopify";
          throw Error_1.fromAction(message, Error_1.AppActionType.INVALID_CONFIG);
        }
      }
      function createAppWrapper(frame, localOrigin, middleware) {
        if (middleware === void 0) {
          middleware = [];
        }
        if (!frame) {
          throw Error_1.fromAction(exports.WINDOW_UNDEFINED_MESSAGE, Error_1.AppActionType.WINDOW_UNDEFINED);
        }
        var location2 = redirect_1.getLocation();
        var origin2 = localOrigin || location2 && location2.origin;
        if (!origin2) {
          throw Error_1.fromAction("local origin cannot be blank", Error_1.AppActionType.MISSING_LOCAL_ORIGIN);
        }
        var transport = MessageTransport_1.fromWindow(frame, origin2);
        var appCreator = exports.createClientApp(transport, __spreadArray([actionWrappingMiddleware], middleware));
        return appCreator;
      }
      exports.createAppWrapper = createAppWrapper;
      function createApp2(config) {
        var currentWindow = redirect_1.getWindow();
        if (!currentWindow || !currentWindow.top) {
          return shared_1.serverAppBridge;
        }
        return createAppWrapper(currentWindow.top)(config);
      }
      exports.createApp = createApp2;
      function createDispatcher(transport, config) {
        return function(type, payload) {
          transport.dispatch({
            payload,
            source: config,
            type
          });
        };
      }
      exports.default = createApp2;
    }
  });

  // node_modules/@shopify/app-bridge/client/index.js
  var require_client2 = __commonJS({
    "node_modules/@shopify/app-bridge/client/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var Client_1 = require_Client3();
      __exportStar(require_types4(), exports);
      __exportStar(require_Client3(), exports);
      exports.default = Client_1.createClientApp;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/uuid.js
  var require_uuid = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/uuid.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.generateUuid = void 0;
      function asHex(value) {
        return Array.from(value).map(function(i) {
          return ("00" + i.toString(16)).slice(-2);
        }).join("");
      }
      function getRandomBytes(size) {
        if (typeof Uint8Array === "function" && typeof window === "object" && window.crypto) {
          var buffer = new Uint8Array(size);
          var randomValues = window.crypto.getRandomValues(buffer);
          if (randomValues) {
            return randomValues;
          }
        }
        return Array.from(new Array(size), function() {
          return Math.random() * 255 | 0;
        });
      }
      function generateUuid() {
        var version = 64;
        var clockSeqHiAndReserved = getRandomBytes(1);
        var timeHiAndVersion = getRandomBytes(2);
        clockSeqHiAndReserved[0] &= 63 | 128;
        timeHiAndVersion[0] &= 15 | version;
        return [
          // time-low
          asHex(getRandomBytes(4)),
          "-",
          // time-mid
          asHex(getRandomBytes(2)),
          "-",
          // time-high-and-version
          asHex(timeHiAndVersion),
          "-",
          // clock-seq-and-reserved
          asHex(clockSeqHiAndReserved),
          // clock-seq-loq
          asHex(getRandomBytes(1)),
          "-",
          // node
          asHex(getRandomBytes(6))
        ].join("");
      }
      exports.generateUuid = generateUuid;
      exports.default = generateUuid;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/ActionSet.js
  var require_ActionSet = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/ActionSet.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var __spreadArray = exports && exports.__spreadArray || function(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
          to[j] = from[i];
        return to;
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unsubscribeActions = exports.ActionSetWithChildren = exports.ActionSet = void 0;
      var types_1 = require_types3();
      var collection_1 = require_collection();
      var Error_1 = require_Error();
      var types_2 = require_types();
      var uuid_1 = __importDefault(require_uuid());
      var helper_1 = require_helper();
      var ActionSet = (
        /** @class */
        function() {
          function ActionSet2(app, type, group, id) {
            var _this = this;
            this.app = app;
            this.type = type;
            this.group = group;
            this.subgroups = [];
            this.subscriptions = [];
            if (!app) {
              Error_1.throwError(Error_1.Action.INVALID_ACTION, "Missing required `app`");
            }
            this.id = id || uuid_1.default();
            this.defaultGroup = group;
            var defaultSet = this.set;
            this.set = function() {
              var _a;
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              if (!_this.app.hooks) {
                return defaultSet.apply(_this, args);
              }
              return (_a = _this.app.hooks).run.apply(_a, __spreadArray([types_1.LifecycleHook.UpdateAction, defaultSet, _this], args));
            };
          }
          ActionSet2.prototype.set = function() {
            var _ = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              _[_i] = arguments[_i];
            }
          };
          Object.defineProperty(ActionSet2.prototype, "component", {
            get: function() {
              return {
                id: this.id,
                subgroups: this.subgroups,
                type: this.type
              };
            },
            enumerable: false,
            configurable: true
          });
          ActionSet2.prototype.updateSubscription = function(subscriptionToRemove, group, subgroups) {
            var eventType = subscriptionToRemove.eventType, callback = subscriptionToRemove.callback, component = subscriptionToRemove.component;
            var currentIndex;
            currentIndex = this.subscriptions.findIndex(function(subscription) {
              return subscription === subscriptionToRemove;
            });
            if (currentIndex >= 0) {
              this.subscriptions[currentIndex].unsubscribe();
            } else {
              currentIndex = void 0;
            }
            this.group = group;
            this.subgroups = subgroups;
            Object.assign(component, { subgroups: this.subgroups });
            return this.subscribe(eventType, callback, component, currentIndex);
          };
          ActionSet2.prototype.error = function(callback) {
            var _this = this;
            var subscriptionIndices = [];
            helper_1.forEachInEnum(Error_1.Action, function(eventNameSpace) {
              subscriptionIndices.push(_this.subscriptions.length);
              _this.subscribe(eventNameSpace, callback);
            });
            return function() {
              var subscriptionsToRemove = subscriptionIndices.map(function(index) {
                return _this.subscriptions[index];
              });
              subscriptionsToRemove.forEach(function(toRemove) {
                collection_1.removeFromCollection(_this.subscriptions, toRemove, function(removed) {
                  removed.unsubscribe();
                });
              });
            };
          };
          ActionSet2.prototype.subscribe = function(eventName, callback, component, currentIndex) {
            var _this = this;
            var eventComponent = component || this.component;
            var eventType = eventName.toUpperCase();
            var boundedCallback = typeof currentIndex === "number" ? callback : callback.bind(this);
            var eventNameSpace;
            if (Error_1.isErrorEventName(eventName)) {
              eventNameSpace = helper_1.getEventNameSpace(types_2.Group.Error, eventName, __assign(__assign({}, eventComponent), { type: "" }));
            } else {
              eventNameSpace = helper_1.getEventNameSpace(this.group, eventName, eventComponent);
            }
            var unsubscribe = this.app.subscribe(eventNameSpace, boundedCallback, component ? component.id : this.id);
            var subscription = {
              eventType,
              unsubscribe,
              callback: boundedCallback,
              component: eventComponent,
              updateSubscribe: function(group, subgroups) {
                return _this.updateSubscription(subscription, group, subgroups);
              }
            };
            if (typeof currentIndex === "number" && currentIndex >= 0 && currentIndex < this.subscriptions.length) {
              this.subscriptions[currentIndex] = subscription;
            } else {
              this.subscriptions.push(subscription);
            }
            return unsubscribe;
          };
          ActionSet2.prototype.unsubscribe = function(resetOnly) {
            if (resetOnly === void 0) {
              resetOnly = false;
            }
            unsubscribeActions(this.subscriptions, this.defaultGroup, resetOnly);
            return this;
          };
          return ActionSet2;
        }()
      );
      exports.ActionSet = ActionSet;
      var ActionSetWithChildren = (
        /** @class */
        function(_super) {
          __extends(ActionSetWithChildren2, _super);
          function ActionSetWithChildren2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.children = [];
            return _this;
          }
          ActionSetWithChildren2.prototype.unsubscribe = function(unsubscribeChildren, resetParentOnly) {
            if (unsubscribeChildren === void 0) {
              unsubscribeChildren = true;
            }
            if (resetParentOnly === void 0) {
              resetParentOnly = false;
            }
            unsubscribeActions(this.subscriptions, this.defaultGroup, resetParentOnly);
            this.children.forEach(function(child) {
              if (child instanceof ActionSetWithChildren2) {
                child.unsubscribe(unsubscribeChildren, !unsubscribeChildren);
              } else {
                child.unsubscribe(!unsubscribeChildren);
              }
            });
            return this;
          };
          ActionSetWithChildren2.prototype.getChild = function(id) {
            var childIndex = this.children.findIndex(function(child) {
              return child.id === id;
            });
            return childIndex >= 0 ? this.children[childIndex] : void 0;
          };
          ActionSetWithChildren2.prototype.getChildIndex = function(id) {
            return this.children.findIndex(function(child) {
              return child.id === id;
            });
          };
          ActionSetWithChildren2.prototype.getChildSubscriptions = function(id, eventType) {
            return this.subscriptions.filter(function(sub) {
              return sub.component.id === id && (!eventType || eventType === sub.eventType);
            });
          };
          ActionSetWithChildren2.prototype.addChild = function(child, group, subgroups) {
            var _this = this;
            var subscriptions = child.subscriptions;
            var existingChild = this.getChild(child.id);
            if (!existingChild) {
              this.children.push(child);
            }
            if (!subscriptions || group === child.group && subgroups === child.subgroups) {
              return this;
            }
            subscriptions.forEach(function(subscription) {
              var updateSubscribe = subscription.updateSubscribe;
              updateSubscribe(group, subgroups);
            });
            Object.assign(child, { group, subgroups });
            if (child instanceof ActionSetWithChildren2) {
              child.children.forEach(function(childIter) {
                return _this.addChild(childIter, group, subgroups);
              });
            }
            return this;
          };
          ActionSetWithChildren2.prototype.removeChild = function(id) {
            var _this = this;
            collection_1.removeFromCollection(this.children, this.getChild(id), function() {
              var toBeRemoved = _this.subscriptions.filter(function(subs) {
                return subs.component.id === id;
              });
              toBeRemoved.forEach(function(toRemove) {
                collection_1.removeFromCollection(_this.subscriptions, toRemove, function(removed) {
                  removed.unsubscribe();
                });
              });
            });
            return this;
          };
          ActionSetWithChildren2.prototype.subscribeToChild = function(child, eventName, callback) {
            var _this = this;
            var boundedCallback = callback.bind(this);
            if (eventName instanceof Array) {
              eventName.forEach(function(eventNameIter) {
                return _this.subscribeToChild(child, eventNameIter, callback);
              });
              return this;
            }
            if (typeof eventName !== "string") {
              return this;
            }
            var eventType = eventName.toUpperCase();
            var currentSubscriptions = this.getChildSubscriptions(child.id, eventType);
            if (currentSubscriptions.length > 0) {
              currentSubscriptions.forEach(function(subs) {
                return subs.updateSubscribe(_this.group, child.subgroups);
              });
            } else {
              var childComponent = {
                id: child.id,
                subgroups: child.subgroups,
                type: child.type
              };
              this.subscribe(eventType, boundedCallback, childComponent);
            }
            return this;
          };
          ActionSetWithChildren2.prototype.getUpdatedChildActions = function(newActions, currentActions) {
            if (newActions.length === 0) {
              while (currentActions.length > 0) {
                var action = currentActions.pop();
                if (!action) {
                  break;
                }
                this.removeChild(action.id);
              }
              return void 0;
            }
            var uniqueActions = newActions.filter(function(action2, index, actionsArr) {
              return index === actionsArr.indexOf(action2);
            });
            var newActionIds = uniqueActions.map(function(action2) {
              return action2.id;
            });
            var unusedActions = currentActions.filter(function(action2) {
              return newActionIds.indexOf(action2.id) < 0;
            });
            while (unusedActions.length > 0) {
              var action = unusedActions.pop();
              if (!action) {
                break;
              }
              this.removeChild(action.id);
            }
            return uniqueActions;
          };
          return ActionSetWithChildren2;
        }(ActionSet)
      );
      exports.ActionSetWithChildren = ActionSetWithChildren;
      function unsubscribeActions(subscriptions, defaultGroup, reassign) {
        if (reassign === void 0) {
          reassign = false;
        }
        subscriptions.forEach(function(subscription) {
          if (reassign) {
            var updateSubscribe = subscription.updateSubscribe;
            updateSubscribe(defaultGroup, []);
          } else {
            var unsubscribe = subscription.unsubscribe;
            unsubscribe();
          }
        });
        if (!reassign) {
          subscriptions.length = 0;
        }
      }
      exports.unsubscribeActions = unsubscribeActions;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Button/index.js
  var require_Button = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Button/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Button = exports.update = exports.clickButton = exports.Style = exports.Icon = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["CLICK"] = "CLICK";
        Action4["UPDATE"] = "UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
      var Icon2;
      (function(Icon3) {
        Icon3["Print"] = "print";
      })(Icon2 = exports.Icon || (exports.Icon = {}));
      var Style;
      (function(Style2) {
        Style2["Danger"] = "danger";
      })(Style = exports.Style || (exports.Style = {}));
      function clickButton(group, component, payload) {
        var id = component.id;
        var action = helper_1.getEventNameSpace(group, Action3.CLICK, component);
        var buttonPayload = {
          id,
          payload
        };
        return helper_1.actionWrapper({ type: action, group, payload: buttonPayload });
      }
      exports.clickButton = clickButton;
      function update(group, component, props) {
        var id = component.id;
        var label = props.label;
        var action = helper_1.getEventNameSpace(group, Action3.UPDATE, component);
        var buttonPayload = __assign(__assign({}, props), { id, label });
        return helper_1.actionWrapper({ type: action, group, payload: buttonPayload });
      }
      exports.update = update;
      var Button2 = (
        /** @class */
        function(_super) {
          __extends(Button3, _super);
          function Button3(app, options) {
            var _this = _super.call(this, app, types_1.ComponentType.Button, types_1.Group.Button) || this;
            _this.disabled = false;
            _this.loading = false;
            _this.plain = false;
            _this.set(options, false);
            return _this;
          }
          Object.defineProperty(Button3.prototype, "options", {
            get: function() {
              return {
                disabled: this.disabled,
                icon: this.icon,
                label: this.label,
                style: this.style,
                loading: this.loading,
                plain: this.plain
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Button3.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { id: this.id });
            },
            enumerable: false,
            configurable: true
          });
          Button3.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var label = mergedOptions.label, disabled = mergedOptions.disabled, icon = mergedOptions.icon, style = mergedOptions.style, loading = mergedOptions.loading, plain = mergedOptions.plain;
            this.label = label;
            this.disabled = Boolean(disabled);
            this.icon = icon;
            this.style = style;
            this.loading = Boolean(loading);
            this.plain = Boolean(plain);
            if (shouldUpdate) {
              this.dispatch(Action3.UPDATE);
            }
            return this;
          };
          Button3.prototype.dispatch = function(action, payload) {
            switch (action) {
              case Action3.CLICK:
                this.app.dispatch(clickButton(this.group, this.component, payload));
                break;
              case Action3.UPDATE: {
                var updateAction = update(this.group, this.component, this.payload);
                this.app.dispatch(updateAction);
                break;
              }
            }
            return this;
          };
          return Button3;
        }(ActionSet_1.ActionSet)
      );
      exports.Button = Button2;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/type-validate.js
  var require_type_validate = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/type-validate.js"(exports) {
      "use strict";
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var __spreadArray = exports && exports.__spreadArray || function(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
          to[j] = from[i];
        return to;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validate = exports.matchesPositiveInteger = exports.matchesBoolean = exports.makeOptional = exports.matchesString = exports.matchesObject = exports.getErrors = exports.oneOf = exports.matchesArray = exports.matchesEnum = exports.composeSchemas = exports.TYPE_ERROR = void 0;
      exports.TYPE_ERROR = "type_error_expected";
      function composeSchemas() {
        var validators3 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          validators3[_i] = arguments[_i];
        }
        return function(val) {
          var error2;
          var i = 0;
          var len = validators3.length;
          while (!error2 && i < len) {
            error2 = validators3[i](val);
            if (error2) {
              return error2;
            }
            i++;
          }
        };
      }
      exports.composeSchemas = composeSchemas;
      function matchesEnum(types, options) {
        return function(value) {
          var values2 = Object.keys(types).map(function(key) {
            return types[key];
          });
          var message = options && options.message || "expected:" + values2.map(function(val) {
            return "`" + val + "`";
          }).join(" or ");
          return values2.includes(value) ? void 0 : constructErrors(value, "invalid_enum_value", __assign(__assign({}, options), { message }));
        };
      }
      exports.matchesEnum = matchesEnum;
      function matchesArray(validator, options) {
        return function(value) {
          if (!Array.isArray(value)) {
            return constructErrors(value, exports.TYPE_ERROR + "_array", options);
          }
          if (!validator) {
            return;
          }
          var errors = [];
          value.forEach(function(val, key) {
            var objectError = validator(val);
            if (objectError) {
              errors = errors.concat(objectError.map(function(error2) {
                return __assign(__assign({}, error2), { path: "['" + key + "']" + (error2.path || "") });
              }));
            }
          });
          return errors.length ? errors : void 0;
        };
      }
      exports.matchesArray = matchesArray;
      function oneOf() {
        var validators3 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          validators3[_i] = arguments[_i];
        }
        return function(val) {
          var errors = [];
          for (var _i2 = 0, validators_1 = validators3; _i2 < validators_1.length; _i2++) {
            var validator = validators_1[_i2];
            var result = validator(val);
            if (result == null)
              return result;
            errors.push.apply(errors, result);
          }
          return errors;
        };
      }
      exports.oneOf = oneOf;
      function constructErrors(value, error2, options) {
        if (options === void 0) {
          options = { message: void 0 };
        }
        return [
          {
            value,
            error: error2,
            message: typeof options.message === "function" ? options.message(error2, value) : options.message
          }
        ];
      }
      function getErrors(obj, validator, key) {
        var value = key ? obj[key] : obj;
        var path = key ? "['" + key + "']" : void 0;
        var error2 = validator(value);
        if (!error2) {
          return;
        }
        return error2.map(function(errorObj) {
          return __assign(__assign({}, errorObj), { path: "" + (path || "") + (errorObj.path || "") || void 0 });
        });
      }
      exports.getErrors = getErrors;
      function matchesObject(schema, options) {
        return function(val) {
          if (typeof val !== "object" || !val || Array.isArray(val)) {
            return constructErrors(val, exports.TYPE_ERROR + "_object", options);
          }
          var flattened = Object.keys(schema).reduce(function(acc, key) {
            return __spreadArray(__spreadArray([], acc), getErrors(val, schema[key], key) || []);
          }, []);
          return flattened.length ? flattened : void 0;
        };
      }
      exports.matchesObject = matchesObject;
      function matchesString(options) {
        return function(value) {
          return typeof value === "string" ? void 0 : constructErrors(value, exports.TYPE_ERROR + "_string", options);
        };
      }
      exports.matchesString = matchesString;
      function makeOptional(validator) {
        return function(value) {
          if (value === void 0 || value === null) {
            return void 0;
          }
          return validator(value);
        };
      }
      exports.makeOptional = makeOptional;
      function matchesBoolean(options) {
        return function(value) {
          return typeof value === "boolean" ? void 0 : constructErrors(value, exports.TYPE_ERROR + "_boolean", options);
        };
      }
      exports.matchesBoolean = matchesBoolean;
      function matchesPositiveInteger(options) {
        return function(value) {
          return !Number.isInteger(value) || value < 0 ? constructErrors(value, exports.TYPE_ERROR + "_integer", options) : void 0;
        };
      }
      exports.matchesPositiveInteger = matchesPositiveInteger;
      function validate(obj, validator) {
        return getErrors(obj, validator);
      }
      exports.validate = validate;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/utils.js
  var require_utils = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.relativePathSchema = exports.relativeUrlSchema = exports.isValidRelativePath = exports.createActionValidator = void 0;
      var type_validate_1 = require_type_validate();
      function createActionValidator(type, payloadSchema, payloadRequired, idRequired) {
        if (payloadSchema === void 0) {
          payloadSchema = void 0;
        }
        if (payloadRequired === void 0) {
          payloadRequired = false;
        }
        if (idRequired === void 0) {
          idRequired = false;
        }
        var idSchema = type_validate_1.matchesObject({
          id: idRequired ? type_validate_1.matchesString() : type_validate_1.makeOptional(type_validate_1.matchesString())
        });
        var schema = payloadSchema ? type_validate_1.composeSchemas(idSchema, payloadSchema) : idSchema;
        return type_validate_1.matchesObject({
          type: type_validate_1.matchesEnum(type, {
            message: function(_, val) {
              return "The action type `" + val + "` is invalid or unsupported";
            }
          }),
          payload: payloadRequired ? schema : type_validate_1.makeOptional(schema)
        });
      }
      exports.createActionValidator = createActionValidator;
      function isValidRelativePath(path) {
        return typeof path === "string" && (path === "" || path.startsWith("/"));
      }
      exports.isValidRelativePath = isValidRelativePath;
      exports.relativeUrlSchema = type_validate_1.composeSchemas(type_validate_1.matchesString(), function(value) {
        return isValidRelativePath(value) ? void 0 : [{ error: "invalid_relative_path", value, message: "expected string to start with `/`" }];
      });
      exports.relativePathSchema = type_validate_1.matchesObject({
        path: exports.relativeUrlSchema
      });
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/button.js
  var require_button = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/button.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = exports.validateProps = exports.buttonSchemaWithId = exports.buttonSchema = void 0;
      var Button_1 = require_Button();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Button_1.Action;
      } });
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      exports.buttonSchema = type_validate_1.matchesObject({
        disabled: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        label: type_validate_1.matchesString(),
        style: type_validate_1.makeOptional(type_validate_1.matchesEnum(Button_1.Style)),
        icon: type_validate_1.makeOptional(type_validate_1.matchesEnum(Button_1.Icon)),
        loading: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        plain: type_validate_1.makeOptional(type_validate_1.matchesBoolean())
      });
      exports.buttonSchemaWithId = type_validate_1.composeSchemas(type_validate_1.matchesObject({
        id: type_validate_1.matchesString()
      }), exports.buttonSchema);
      function validateProps(props) {
        return type_validate_1.validate(props, exports.buttonSchema);
      }
      exports.validateProps = validateProps;
      function validateAction(action) {
        var validator = utils_1.createActionValidator(Button_1.Action, action.type === Button_1.Action.UPDATE ? exports.buttonSchema : void 0, true, true);
        return type_validate_1.validate(action, validator);
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/buttonHelper.js
  var require_buttonHelper = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/buttonHelper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getSingleButton = void 0;
      var Button_1 = require_Button();
      function getSingleButton(action, button, subgroups, updateCb) {
        action.addChild(button, action.group, subgroups);
        action.subscribeToChild(button, Button_1.Action.UPDATE, updateCb);
        return button.payload;
      }
      exports.getSingleButton = getSingleButton;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/ButtonGroup/index.js
  var require_ButtonGroup = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/ButtonGroup/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.ButtonGroup = exports.isGroupedButtonPayload = exports.isGroupedButton = exports.update = exports.Action = void 0;
      var buttonHelper_1 = require_buttonHelper();
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["UPDATE"] = "UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
      function update(group, component, props) {
        return buttonActionWrapper(group, component, Action3.UPDATE, props);
      }
      exports.update = update;
      function isGroupedButton(options) {
        var castOptions = options;
        return castOptions.buttons && castOptions.buttons.length > 0 && castOptions.label !== void 0;
      }
      exports.isGroupedButton = isGroupedButton;
      function isGroupedButtonPayload(payload) {
        var castOptions = payload;
        return Array.isArray(castOptions.buttons) && typeof castOptions.id === "string" && typeof castOptions.label === "string";
      }
      exports.isGroupedButtonPayload = isGroupedButtonPayload;
      var ButtonGroup2 = (
        /** @class */
        function(_super) {
          __extends(ButtonGroup3, _super);
          function ButtonGroup3(app, options) {
            var _this = _super.call(this, app, types_1.ComponentType.ButtonGroup, types_1.Group.ButtonGroup) || this;
            _this.disabled = false;
            _this.plain = false;
            _this.buttonsOptions = [];
            _this.buttons = [];
            _this.set(options, false);
            return _this;
          }
          Object.defineProperty(ButtonGroup3.prototype, "options", {
            get: function() {
              return {
                buttons: this.buttonsOptions,
                disabled: this.disabled,
                label: this.label,
                plain: this.plain
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(ButtonGroup3.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { buttons: this.buttons, id: this.id });
            },
            enumerable: false,
            configurable: true
          });
          ButtonGroup3.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var label = mergedOptions.label, disabled = mergedOptions.disabled, buttons = mergedOptions.buttons, plain = mergedOptions.plain;
            this.label = label;
            this.disabled = Boolean(disabled);
            this.buttons = this.getButtons(buttons);
            this.plain = Boolean(plain);
            if (shouldUpdate) {
              this.dispatch(Action3.UPDATE);
            }
            return this;
          };
          ButtonGroup3.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.UPDATE: {
                var updateAction = update(this.group, this.component, this.payload);
                this.app.dispatch(updateAction);
                break;
              }
            }
            return this;
          };
          ButtonGroup3.prototype.updateButtons = function(newPayload) {
            if (!this.buttons || this.buttons.length === 0) {
              return;
            }
            var updated;
            for (var _i = 0, _a = this.buttons; _i < _a.length; _i++) {
              var action = _a[_i];
              updated = helper_1.updateActionFromPayload(action, newPayload);
              if (updated) {
                break;
              }
            }
            if (updated) {
              this.dispatch(Action3.UPDATE);
            }
          };
          ButtonGroup3.prototype.getSingleButton = function(button) {
            return buttonHelper_1.getSingleButton(this, button, this.subgroups, this.updateButtons);
          };
          ButtonGroup3.prototype.getButtons = function(buttonOptions) {
            var _this = this;
            var buttons = [];
            if (!buttonOptions) {
              return [];
            }
            buttonOptions.forEach(function(button) {
              var singleButton = buttonHelper_1.getSingleButton(_this, button, _this.subgroups, _this.updateButtons);
              buttons.push(singleButton);
            });
            this.buttonsOptions = buttonOptions;
            return buttons;
          };
          return ButtonGroup3;
        }(ActionSet_1.ActionSetWithChildren)
      );
      exports.ButtonGroup = ButtonGroup2;
      function create(app, options) {
        return new ButtonGroup2(app, options);
      }
      exports.create = create;
      function buttonActionWrapper(group, component, eventName, props, payload) {
        var id = component.id;
        var label = props.label;
        var action = helper_1.getEventNameSpace(group, eventName, component);
        var buttonPayload = __assign(__assign({}, props), { id, label, payload });
        return helper_1.actionWrapper({ type: action, group, payload: buttonPayload });
      }
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/buttonGroup.js
  var require_buttonGroup = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/buttonGroup.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = exports.validateProps = exports.buttonGroupSchema = void 0;
      var ButtonGroup_1 = require_ButtonGroup();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return ButtonGroup_1.Action;
      } });
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      var button_1 = require_button();
      exports.buttonGroupSchema = type_validate_1.composeSchemas(button_1.buttonSchema, type_validate_1.matchesObject({
        buttons: type_validate_1.matchesArray(type_validate_1.makeOptional(button_1.buttonSchemaWithId))
      }));
      function validateProps(props) {
        return type_validate_1.validate(props, exports.buttonGroupSchema);
      }
      exports.validateProps = validateProps;
      function validateAction(action) {
        var validator = utils_1.createActionValidator(ButtonGroup_1.Action, exports.buttonGroupSchema, true, true);
        return type_validate_1.validate(action, validator);
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/ContextualSaveBar/index.js
  var require_ContextualSaveBar = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/ContextualSaveBar/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ContextualSaveBar = exports.update = exports.discard = exports.save = exports.hide = exports.show = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["DISCARD"] = "APP::CONTEXTUAL_SAVE_BAR::DISCARD";
        Action4["SAVE"] = "APP::CONTEXTUAL_SAVE_BAR::SAVE";
        Action4["SHOW"] = "APP::CONTEXTUAL_SAVE_BAR::SHOW";
        Action4["HIDE"] = "APP::CONTEXTUAL_SAVE_BAR::HIDE";
        Action4["UPDATE"] = "APP::CONTEXTUAL_SAVE_BAR::UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
      function createContextBarAction(action, payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.ContextualSaveBar,
          type: action,
          payload
        });
      }
      function show(payload) {
        return createContextBarAction(Action3.SHOW, payload);
      }
      exports.show = show;
      function hide(payload) {
        return createContextBarAction(Action3.HIDE, payload);
      }
      exports.hide = hide;
      function save(payload) {
        return createContextBarAction(Action3.SAVE, payload);
      }
      exports.save = save;
      function discard(payload) {
        return createContextBarAction(Action3.DISCARD, payload);
      }
      exports.discard = discard;
      function update(payload) {
        return createContextBarAction(Action3.UPDATE, payload);
      }
      exports.update = update;
      var ContextualSaveBar = (
        /** @class */
        function(_super) {
          __extends(ContextualSaveBar2, _super);
          function ContextualSaveBar2(app, options) {
            if (options === void 0) {
              options = {};
            }
            var _this = _super.call(this, app, types_1.Group.ContextualSaveBar, types_1.Group.ContextualSaveBar) || this;
            _this.options = options;
            _this.set(options, false);
            return _this;
          }
          Object.defineProperty(ContextualSaveBar2.prototype, "payload", {
            /**
             * Returns the action set payload
             */
            get: function() {
              return __assign({ id: this.id }, this.options);
            },
            enumerable: false,
            configurable: true
          });
          ContextualSaveBar2.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            this.options = mergedOptions;
            if (shouldUpdate) {
              this.dispatch(Action3.UPDATE);
            }
            return this;
          };
          ContextualSaveBar2.prototype.dispatch = function(action) {
            this.app.dispatch(createContextBarAction(action, this.payload));
            return this;
          };
          return ContextualSaveBar2;
        }(ActionSet_1.ActionSet)
      );
      exports.ContextualSaveBar = ContextualSaveBar;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/contextualSaveBar.js
  var require_contextualSaveBar = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/contextualSaveBar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = exports.validateProps = exports.contextSaveBarSchema = void 0;
      var type_validate_1 = require_type_validate();
      var ContextualSaveBar_1 = require_ContextualSaveBar();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return ContextualSaveBar_1.Action;
      } });
      var utils_1 = require_utils();
      exports.contextSaveBarSchema = type_validate_1.makeOptional(type_validate_1.matchesObject({
        fullWidth: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        discardAction: type_validate_1.makeOptional(type_validate_1.matchesObject({
          disabled: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
          discardConfirmationModal: type_validate_1.makeOptional(type_validate_1.matchesBoolean())
        })),
        saveAction: type_validate_1.makeOptional(type_validate_1.matchesObject({
          disabled: type_validate_1.makeOptional(type_validate_1.matchesBoolean())
        })),
        leaveConfirmationDisable: type_validate_1.makeOptional(type_validate_1.matchesBoolean())
      }));
      function validateProps(props) {
        return type_validate_1.validate(props, exports.contextSaveBarSchema);
      }
      exports.validateProps = validateProps;
      function validateAction(action) {
        var validator = utils_1.createActionValidator(ContextualSaveBar_1.Action, exports.contextSaveBarSchema);
        return type_validate_1.validate(action, validator);
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/FeedbackModal/index.js
  var require_FeedbackModal = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/FeedbackModal/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.FeedbackModal = exports.close = exports.open = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["OPEN"] = "APP::FEEDBACK_MODAL::OPEN";
        Action4["CLOSE"] = "APP::FEEDBACK_MODAL::CLOSE";
      })(Action3 = exports.Action || (exports.Action = {}));
      function open(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.FeedbackModal,
          payload,
          type: Action3.OPEN
        });
      }
      exports.open = open;
      function close(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.FeedbackModal,
          payload,
          type: Action3.CLOSE
        });
      }
      exports.close = close;
      var FeedbackModal = (
        /** @class */
        function(_super) {
          __extends(FeedbackModal2, _super);
          function FeedbackModal2(app, options) {
            var _this = _super.call(this, app, types_1.Group.FeedbackModal, types_1.Group.FeedbackModal) || this;
            _this.options = options;
            _this.set(options);
            return _this;
          }
          Object.defineProperty(FeedbackModal2.prototype, "payload", {
            /**
             * Returns the action set payload
             */
            get: function() {
              return __assign({ id: this.id }, this.options);
            },
            enumerable: false,
            configurable: true
          });
          FeedbackModal2.prototype.set = function(options) {
            this.options = helper_1.getMergedProps(this.options, options);
            return this;
          };
          FeedbackModal2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.OPEN: {
                var openAction = open(this.payload);
                this.app.dispatch(openAction);
                break;
              }
              case Action3.CLOSE: {
                var closeAction = close(this.payload);
                this.app.dispatch(closeAction);
                break;
              }
            }
            return this;
          };
          return FeedbackModal2;
        }(ActionSet_1.ActionSet)
      );
      exports.FeedbackModal = FeedbackModal;
      function create(app, options) {
        return new FeedbackModal(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/feedbackModal.js
  var require_feedbackModal = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/feedbackModal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = exports.validateProps = exports.feedbackModalSchema = void 0;
      var FeedbackModal_1 = require_FeedbackModal();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return FeedbackModal_1.Action;
      } });
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      exports.feedbackModalSchema = type_validate_1.matchesObject({
        formId: type_validate_1.matchesPositiveInteger()
      });
      function validateProps(props) {
        return type_validate_1.validate(props, exports.feedbackModalSchema);
      }
      exports.validateProps = validateProps;
      function validateAction(action) {
        switch (action.type) {
          case FeedbackModal_1.Action.OPEN:
            return type_validate_1.validate(action, utils_1.createActionValidator(FeedbackModal_1.Action, exports.feedbackModalSchema, true));
          case FeedbackModal_1.Action.CLOSE:
          default:
            return type_validate_1.validate(action, utils_1.createActionValidator(FeedbackModal_1.Action));
        }
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/LeaveConfirmation/index.js
  var require_LeaveConfirmation = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/LeaveConfirmation/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.LeaveConfirmation = exports.confirm = exports.disable = exports.enable = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["ENABLE"] = "APP::LEAVE_CONFIRMATION::ENABLE";
        Action4["DISABLE"] = "APP::LEAVE_CONFIRMATION::DISABLE";
        Action4["CONFIRM"] = "APP::LEAVE_CONFIRMATION::CONFIRM";
      })(Action3 = exports.Action || (exports.Action = {}));
      function enable(payload) {
        if (payload === void 0) {
          payload = {};
        }
        return helper_1.actionWrapper({
          group: types_1.Group.LeaveConfirmation,
          payload,
          type: Action3.ENABLE
        });
      }
      exports.enable = enable;
      function disable(payload) {
        if (payload === void 0) {
          payload = {};
        }
        return helper_1.actionWrapper({
          group: types_1.Group.LeaveConfirmation,
          payload,
          type: Action3.DISABLE
        });
      }
      exports.disable = disable;
      function confirm(payload) {
        if (payload === void 0) {
          payload = {};
        }
        return helper_1.actionWrapper({
          group: types_1.Group.LeaveConfirmation,
          payload,
          type: Action3.CONFIRM
        });
      }
      exports.confirm = confirm;
      var LeaveConfirmation = (
        /** @class */
        function(_super) {
          __extends(LeaveConfirmation2, _super);
          function LeaveConfirmation2(app, options) {
            if (options === void 0) {
              options = {};
            }
            var _this = _super.call(this, app, types_1.Group.LeaveConfirmation, types_1.Group.LeaveConfirmation) || this;
            _this.options = options;
            _this.set(options);
            return _this;
          }
          Object.defineProperty(LeaveConfirmation2.prototype, "payload", {
            /**
             * Returns the action set payload
             */
            get: function() {
              return __assign({ id: this.id }, this.options);
            },
            enumerable: false,
            configurable: true
          });
          LeaveConfirmation2.prototype.set = function(options) {
            this.options = helper_1.getMergedProps(this.options, options);
            return this;
          };
          LeaveConfirmation2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.ENABLE: {
                var enableAction = enable(this.payload);
                this.app.dispatch(enableAction);
                break;
              }
              case Action3.DISABLE: {
                var disableAction = disable(this.payload);
                this.app.dispatch(disableAction);
                break;
              }
              case Action3.CONFIRM: {
                var confirmAction = confirm(this.payload);
                this.app.dispatch(confirmAction);
                break;
              }
            }
            return this;
          };
          return LeaveConfirmation2;
        }(ActionSet_1.ActionSet)
      );
      exports.LeaveConfirmation = LeaveConfirmation;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/leaveConfirmation.js
  var require_leaveConfirmation = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/leaveConfirmation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = void 0;
      var LeaveConfirmation_1 = require_LeaveConfirmation();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return LeaveConfirmation_1.Action;
      } });
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      function validateAction(action) {
        var validator = utils_1.createActionValidator(LeaveConfirmation_1.Action);
        return type_validate_1.validate(action, validator);
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Navigation/Redirect/index.js
  var require_Redirect = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Navigation/Redirect/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Redirect = exports.isProductVariantResourcePayload = exports.isCreateResourcePayload = exports.isAdminSection = exports.isRemotePayload = exports.isAdminSectionPayload = exports.isAdminPathPayload = exports.isAppPayload = exports.getRelativePath = exports.normalizeUrl = exports.getPathWithSearchAndHash = exports.toDestination = exports.toApp = exports.toRemote = exports.toAdminSection = exports.toAdminPath = exports.isResourcePayload = exports.ResourceType = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["ADMIN_SECTION"] = "APP::NAVIGATION::REDIRECT::ADMIN::SECTION";
        Action4["ADMIN_PATH"] = "APP::NAVIGATION::REDIRECT::ADMIN::PATH";
        Action4["REMOTE"] = "APP::NAVIGATION::REDIRECT::REMOTE";
        Action4["APP"] = "APP::NAVIGATION::REDIRECT::APP";
      })(Action3 = exports.Action || (exports.Action = {}));
      var ResourceType;
      (function(ResourceType2) {
        ResourceType2["Product"] = "products";
        ResourceType2["Collection"] = "collections";
        ResourceType2["Order"] = "orders";
        ResourceType2["Customer"] = "customers";
        ResourceType2["Discount"] = "discounts";
      })(ResourceType = exports.ResourceType || (exports.ResourceType = {}));
      function isResourcePayload(resource) {
        return typeof resource.id === "string";
      }
      exports.isResourcePayload = isResourcePayload;
      function toAdminPath(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Navigation,
          type: Action3.ADMIN_PATH
        });
      }
      exports.toAdminPath = toAdminPath;
      function toAdminSection(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Navigation,
          type: Action3.ADMIN_SECTION
        });
      }
      exports.toAdminSection = toAdminSection;
      function toRemote(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Navigation,
          type: Action3.REMOTE
        });
      }
      exports.toRemote = toRemote;
      function toApp(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Navigation,
          type: Action3.APP
        });
      }
      exports.toApp = toApp;
      function toDestination(action, payload, id) {
        switch (action) {
          case Action3.APP: {
            var appPayload = isAppPayload(payload) ? payload : { path: payload };
            return toApp(__assign({ id }, appPayload));
          }
          case Action3.ADMIN_PATH: {
            var adminPathPayload = isAdminPathPayload(payload) ? payload : { path: payload };
            return toAdminPath(__assign({ id }, adminPathPayload));
          }
          case Action3.ADMIN_SECTION: {
            var adminSectionPayload = isAdminSectionPayload(payload) ? payload : { section: payload };
            return toAdminSection(__assign({ id }, adminSectionPayload));
          }
          case Action3.REMOTE: {
            var remotePayload = isRemotePayload(payload) ? payload : { url: payload };
            return toRemote(__assign({ id }, remotePayload));
          }
        }
      }
      exports.toDestination = toDestination;
      function getPathWithSearchAndHash(_a) {
        var pathname = _a.pathname, search = _a.search, hash = _a.hash;
        return "" + pathname + (search || "") + (hash || "");
      }
      exports.getPathWithSearchAndHash = getPathWithSearchAndHash;
      function normalizeUrl(to) {
        if (to instanceof URL) {
          return to.toString();
        }
        if (typeof to === "string") {
          return to;
        }
        return getRelativePath(to);
      }
      exports.normalizeUrl = normalizeUrl;
      function getRelativePath(to) {
        if (typeof to === "string") {
          if (to.startsWith("/")) {
            return to;
          }
          return getPathWithSearchAndHash(new URL(to));
        }
        var search = to.search instanceof URLSearchParams ? to.search.toString() : to.search;
        return getPathWithSearchAndHash(__assign(__assign({}, to), { search }));
      }
      exports.getRelativePath = getRelativePath;
      function isAppPayload(payload) {
        return typeof payload === "object" && Object.prototype.hasOwnProperty.call(payload, "path");
      }
      exports.isAppPayload = isAppPayload;
      function isAdminPathPayload(payload) {
        return typeof payload === "object" && Object.prototype.hasOwnProperty.call(payload, "path");
      }
      exports.isAdminPathPayload = isAdminPathPayload;
      function isAdminSectionPayload(payload) {
        return typeof payload === "object" && typeof payload.section === "object" && Object.prototype.hasOwnProperty.call(payload.section, "name");
      }
      exports.isAdminSectionPayload = isAdminSectionPayload;
      function isRemotePayload(payload) {
        return typeof payload === "object" && Object.prototype.hasOwnProperty.call(payload, "url");
      }
      exports.isRemotePayload = isRemotePayload;
      function isAdminSection(to) {
        return typeof to === "object" && typeof (to === null || to === void 0 ? void 0 : to.name) === "string";
      }
      exports.isAdminSection = isAdminSection;
      function isCreateResourcePayload(resource) {
        return resource.create === true;
      }
      exports.isCreateResourcePayload = isCreateResourcePayload;
      function isProductVariantResourcePayload(resource) {
        var castResource = resource;
        return castResource.id !== void 0 && castResource.variant !== void 0;
      }
      exports.isProductVariantResourcePayload = isProductVariantResourcePayload;
      var Redirect = (
        /** @class */
        function(_super) {
          __extends(Redirect2, _super);
          function Redirect2(app) {
            return _super.call(this, app, "Redirect", types_1.Group.Navigation) || this;
          }
          Object.defineProperty(Redirect2.prototype, "payload", {
            get: function() {
              return { id: this.id };
            },
            enumerable: false,
            configurable: true
          });
          Redirect2.prototype.dispatch = function(action, payload) {
            var redirectAction = toDestination(action, payload, this.payload.id);
            this.app.dispatch(redirectAction);
            return this;
          };
          return Redirect2;
        }(ActionSet_1.ActionSet)
      );
      exports.Redirect = Redirect;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Link/AppLink/index.js
  var require_AppLink = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Link/AppLink/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.AppLink = exports.update = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Redirect_1 = require_Redirect();
      var Action3;
      (function(Action4) {
        Action4["UPDATE"] = "UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
      function update(group, component, updatePayload) {
        var id = component.id;
        var label = updatePayload.label, destination = updatePayload.destination;
        var linkPayload = __assign(__assign({}, updatePayload), { id, label, destination });
        return helper_1.actionWrapper({
          group,
          type: helper_1.getEventNameSpace(group, Action3.UPDATE, component),
          payload: linkPayload
        });
      }
      exports.update = update;
      var AppLink2 = (
        /** @class */
        function(_super) {
          __extends(AppLink3, _super);
          function AppLink3(app, options) {
            var _this = _super.call(this, app, types_1.Group.Link, types_1.Group.Link) || this;
            _this.label = "";
            _this.destination = "";
            _this.set(options, false);
            return _this;
          }
          Object.defineProperty(AppLink3.prototype, "options", {
            get: function() {
              var _a = this, label = _a.label, destination = _a.destination;
              return {
                label,
                destination,
                redirectType: Redirect_1.Action.APP
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(AppLink3.prototype, "payload", {
            get: function() {
              var _a = this.options, label = _a.label, destination = _a.destination, redirectType = _a.redirectType;
              var path = destination;
              return {
                id: this.id,
                label,
                destination: { path },
                redirectType
              };
            },
            enumerable: false,
            configurable: true
          });
          AppLink3.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var _a = helper_1.getMergedProps(this.options, options), label = _a.label, destination = _a.destination;
            this.label = label;
            this.destination = destination;
            if (shouldUpdate) {
              this.dispatch(Action3.UPDATE);
            }
            return this;
          };
          AppLink3.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.UPDATE: {
                var updateAction = update(this.group, this.component, this.payload);
                this.app.dispatch(updateAction);
                break;
              }
            }
            return this;
          };
          return AppLink3;
        }(ActionSet_1.ActionSet)
      );
      exports.AppLink = AppLink2;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/link.js
  var require_link = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/link.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = exports.validateProps = exports.linkActionSchema = exports.linkPropsSchema = void 0;
      var AppLink_1 = require_AppLink();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return AppLink_1.Action;
      } });
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      var AllowedRedirectType;
      (function(AllowedRedirectType2) {
        AllowedRedirectType2["APP"] = "APP::NAVIGATION::REDIRECT::APP";
        AllowedRedirectType2["LEGACY_APP"] = "APP";
      })(AllowedRedirectType || (AllowedRedirectType = {}));
      exports.linkPropsSchema = type_validate_1.matchesObject({
        label: type_validate_1.matchesString(),
        destination: utils_1.relativeUrlSchema,
        redirectType: type_validate_1.matchesEnum(AllowedRedirectType)
      });
      exports.linkActionSchema = type_validate_1.matchesObject({
        label: type_validate_1.matchesString(),
        destination: utils_1.relativePathSchema,
        redirectType: type_validate_1.matchesEnum(AllowedRedirectType)
      });
      function validateProps(props) {
        return type_validate_1.validate(props, exports.linkPropsSchema);
      }
      exports.validateProps = validateProps;
      function validateAction(action) {
        return type_validate_1.validate(action, utils_1.createActionValidator(AppLink_1.Action, exports.linkActionSchema, true, true));
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Menu/NavigationMenu/index.js
  var require_NavigationMenu = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Menu/NavigationMenu/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.NavigationMenu = exports.update = exports.Action = void 0;
      var AppLink_1 = require_AppLink();
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var SUBGROUPS = ["Navigation_Menu"];
      var Action3;
      (function(Action4) {
        Action4["UPDATE"] = "APP::MENU::NAVIGATION_MENU::UPDATE";
        Action4["LINK_UPDATE"] = "APP::MENU::NAVIGATION_MENU::LINK::UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
      function update(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Menu,
          type: Action3.UPDATE
        });
      }
      exports.update = update;
      var NavigationMenu2 = (
        /** @class */
        function(_super) {
          __extends(NavigationMenu3, _super);
          function NavigationMenu3(app, options) {
            var _this = _super.call(this, app, "Navigation_Menu", types_1.Group.Menu) || this;
            _this.items = [];
            _this.set(options);
            return _this;
          }
          Object.defineProperty(NavigationMenu3.prototype, "options", {
            get: function() {
              return {
                items: this.itemsOptions,
                active: this.activeOptions
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(NavigationMenu3.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { active: this.active, items: this.items, id: this.id });
            },
            enumerable: false,
            configurable: true
          });
          NavigationMenu3.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var items = mergedOptions.items, active = mergedOptions.active;
            this.setItems(items);
            this.activeOptions = active;
            this.active = active && active.id;
            if (shouldUpdate) {
              this.dispatch(Action3.UPDATE);
            }
            return this;
          };
          NavigationMenu3.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.UPDATE:
                this.app.dispatch(update(this.payload));
                break;
            }
            return this;
          };
          NavigationMenu3.prototype.updateItem = function(newPayload) {
            if (!this.items) {
              return;
            }
            var itemToUpdate = this.items.find(function(action) {
              return action.id === newPayload.id;
            });
            if (!itemToUpdate) {
              return;
            }
            if (helper_1.updateActionFromPayload(itemToUpdate, newPayload)) {
              this.dispatch(Action3.UPDATE);
            }
          };
          NavigationMenu3.prototype.setItems = function(newOptions) {
            var _this = this;
            var newItems = newOptions || [];
            var currentItems = this.itemsOptions || [];
            this.itemsOptions = this.getUpdatedChildActions(newItems, currentItems);
            this.items = this.itemsOptions ? this.itemsOptions.map(function(action) {
              _this.addChild(action, _this.group, SUBGROUPS);
              _this.subscribeToChild(action, AppLink_1.Action.UPDATE, _this.updateItem);
              return action.payload;
            }) : [];
          };
          return NavigationMenu3;
        }(ActionSet_1.ActionSetWithChildren)
      );
      exports.NavigationMenu = NavigationMenu2;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Menu/ChannelMenu/index.js
  var require_ChannelMenu = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Menu/ChannelMenu/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ChannelMenu = exports.update = exports.Action = void 0;
      var AppLink_1 = require_AppLink();
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var SUBGROUPS = ["Channel_Menu"];
      var Action3;
      (function(Action4) {
        Action4["UPDATE"] = "APP::MENU::CHANNEL_MENU::UPDATE";
        Action4["LINK_UPDATE"] = "APP::MENU::CHANNEL_MENU::LINK::UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
      function update(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Menu,
          type: Action3.UPDATE
        });
      }
      exports.update = update;
      var ChannelMenu = (
        /** @class */
        function(_super) {
          __extends(ChannelMenu2, _super);
          function ChannelMenu2(app, options) {
            var _this = _super.call(this, app, "Channel_Menu", types_1.Group.Menu) || this;
            _this.items = [];
            _this.set(options);
            return _this;
          }
          Object.defineProperty(ChannelMenu2.prototype, "options", {
            get: function() {
              return {
                items: this.itemsOptions,
                active: this.activeOptions
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(ChannelMenu2.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { active: this.active, items: this.items, id: this.id });
            },
            enumerable: false,
            configurable: true
          });
          ChannelMenu2.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var items = mergedOptions.items, active = mergedOptions.active;
            this.setItems(items);
            this.activeOptions = active;
            this.active = active && active.id;
            if (shouldUpdate) {
              this.dispatch(Action3.UPDATE);
            }
            return this;
          };
          ChannelMenu2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.UPDATE:
                this.app.dispatch(update(this.payload));
                break;
            }
            return this;
          };
          ChannelMenu2.prototype.updateItem = function(newPayload) {
            if (!this.items) {
              return;
            }
            var itemToUpdate = this.items.find(function(action) {
              return action.id === newPayload.id;
            });
            if (!itemToUpdate) {
              return;
            }
            if (helper_1.updateActionFromPayload(itemToUpdate, newPayload)) {
              this.dispatch(Action3.UPDATE);
            }
          };
          ChannelMenu2.prototype.setItems = function(newOptions) {
            var _this = this;
            var newItems = newOptions || [];
            var currentItems = this.itemsOptions || [];
            this.itemsOptions = this.getUpdatedChildActions(newItems, currentItems);
            this.items = this.itemsOptions ? this.itemsOptions.map(function(action) {
              _this.addChild(action, _this.group, SUBGROUPS);
              _this.subscribeToChild(action, AppLink_1.Action.UPDATE, _this.updateItem);
              return action.payload;
            }) : [];
          };
          return ChannelMenu2;
        }(ActionSet_1.ActionSetWithChildren)
      );
      exports.ChannelMenu = ChannelMenu;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/menu.js
  var require_menu = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/menu.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAction = exports.validateProps = void 0;
      var NavigationMenu_1 = require_NavigationMenu();
      var ChannelMenu_1 = require_ChannelMenu();
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      var helper_1 = require_helper();
      var link_1 = require_link();
      var linkOptionsValidator = type_validate_1.matchesObject({ id: type_validate_1.matchesString(), options: link_1.linkPropsSchema });
      function activeLinkError(value) {
        return [
          {
            error: "invalid_active_item",
            value,
            message: "expected active item to exist in menu items"
          }
        ];
      }
      function getOptionsSchema(options) {
        var baseSchema = type_validate_1.matchesObject({
          items: type_validate_1.makeOptional(type_validate_1.matchesArray(linkOptionsValidator)),
          active: type_validate_1.makeOptional(linkOptionsValidator)
        });
        var items = options.items, active = options.active;
        if (items && active) {
          var activeItemSchema = type_validate_1.matchesObject({
            active: type_validate_1.composeSchemas(linkOptionsValidator, function(value) {
              return items.find(function(item) {
                return item.id === value.id;
              }) ? void 0 : activeLinkError(value);
            })
          });
          return type_validate_1.composeSchemas(baseSchema, activeItemSchema);
        }
        return baseSchema;
      }
      function getPayloadSchema(payload) {
        var baseSchema = type_validate_1.matchesObject({
          items: type_validate_1.makeOptional(type_validate_1.matchesArray(link_1.linkActionSchema)),
          active: type_validate_1.makeOptional(type_validate_1.matchesString())
        });
        var items = payload.items, active = payload.active;
        if (items && active) {
          var activeItemSchema = type_validate_1.matchesObject({
            active: type_validate_1.composeSchemas(type_validate_1.matchesString(), function(value) {
              return items.find(function(item) {
                return item.id === value;
              }) ? void 0 : activeLinkError(value);
            })
          });
          return type_validate_1.composeSchemas(baseSchema, activeItemSchema);
        }
        return baseSchema;
      }
      function validateProps(props) {
        var result = type_validate_1.validate(props, getOptionsSchema(props));
        return result;
      }
      exports.validateProps = validateProps;
      function validateAction(action) {
        var actionType = NavigationMenu_1.Action;
        if (helper_1.findMatchInEnum(ChannelMenu_1.Action, action.type)) {
          actionType = ChannelMenu_1.Action;
        }
        return type_validate_1.validate(action, utils_1.createActionValidator(actionType, getPayloadSchema(action.payload), true, false));
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Modal/index.js
  var require_Modal = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Modal/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModalIframe = exports.ModalMessage = exports.Modal = exports.isMessageModal = exports.isIframeModal = exports.data = exports.update = exports.clickFooterButton = exports.updateModalSize = exports.closeModal = exports.openModal = exports.Size = exports.Action = void 0;
      var buttonHelper_1 = require_buttonHelper();
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Button_1 = require_Button();
      var Action3;
      (function(Action4) {
        Action4["OPEN"] = "APP::MODAL::OPEN";
        Action4["CLOSE"] = "APP::MODAL::CLOSE";
        Action4["UPDATE"] = "APP::MODAL::UPDATE";
        Action4["UPDATE_CONTENT"] = "APP::MODAL::CONTENT::UPDATE";
        Action4["FOOTER_BUTTON_CLICK"] = "APP::MODAL::FOOTER::BUTTON::CLICK";
        Action4["FOOTER_BUTTON_UPDATE"] = "APP::MODAL::FOOTER::BUTTON::UPDATE";
        Action4["UPDATE_SIZE"] = "APP::MODAL::UPDATE_SIZE";
        Action4["DATA"] = "APP::MODAL::DATA";
      })(Action3 = exports.Action || (exports.Action = {}));
      var Size;
      (function(Size2) {
        Size2["Small"] = "small";
        Size2["Medium"] = "medium";
        Size2["Large"] = "large";
        Size2["Full"] = "full";
        Size2["Auto"] = "auto";
      })(Size = exports.Size || (exports.Size = {}));
      var FOOTER_BUTTON_PROPS = {
        group: types_1.Group.Modal,
        subgroups: ["Footer"],
        type: types_1.ComponentType.Button
      };
      function openModal(modalPayload) {
        return helper_1.actionWrapper({
          group: types_1.Group.Modal,
          payload: modalPayload,
          type: Action3.OPEN
        });
      }
      exports.openModal = openModal;
      function closeModal(modalClosePayload) {
        return helper_1.actionWrapper({
          group: types_1.Group.Modal,
          payload: modalClosePayload,
          type: Action3.CLOSE
        });
      }
      exports.closeModal = closeModal;
      function updateModalSize(updateSizePayload) {
        return helper_1.actionWrapper({
          group: types_1.Group.Modal,
          payload: updateSizePayload,
          type: Action3.UPDATE_SIZE
        });
      }
      exports.updateModalSize = updateModalSize;
      function clickFooterButton(id, payload) {
        var component = __assign({ id }, FOOTER_BUTTON_PROPS);
        return Button_1.clickButton(types_1.Group.Modal, component, payload);
      }
      exports.clickFooterButton = clickFooterButton;
      function update(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Modal,
          type: Action3.UPDATE
        });
      }
      exports.update = update;
      function data2(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Modal,
          type: Action3.DATA
        });
      }
      exports.data = data2;
      function isIframeModal(options) {
        return typeof options.url === "string" || typeof options.path === "string";
      }
      exports.isIframeModal = isIframeModal;
      function isMessageModal(options) {
        return typeof options.message === "string";
      }
      exports.isMessageModal = isMessageModal;
      var Modal3 = (
        /** @class */
        function(_super) {
          __extends(Modal4, _super);
          function Modal4() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.size = Size.Small;
            return _this;
          }
          Object.defineProperty(Modal4.prototype, "footer", {
            get: function() {
              if (!this.footerPrimary && !this.footerSecondary) {
                return void 0;
              }
              return {
                buttons: {
                  primary: this.footerPrimary,
                  secondary: this.footerSecondary
                }
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Modal4.prototype, "footerOptions", {
            get: function() {
              if (!this.footerPrimaryOptions && !this.footerSecondaryOptions) {
                return void 0;
              }
              return {
                buttons: {
                  primary: this.footerPrimaryOptions,
                  secondary: this.footerSecondaryOptions
                }
              };
            },
            enumerable: false,
            configurable: true
          });
          Modal4.prototype.close = function() {
            this.app.dispatch(closeModal({ id: this.id }));
          };
          Modal4.prototype.setFooterPrimaryButton = function(newOptions, updateCb) {
            var _this = this;
            var subgroups = FOOTER_BUTTON_PROPS.subgroups;
            this.footerPrimaryOptions = this.getChildButton(newOptions, this.footerPrimaryOptions);
            this.footerPrimary = this.footerPrimaryOptions ? buttonHelper_1.getSingleButton(this, this.footerPrimaryOptions, subgroups, function(newPayload) {
              _this.updatePrimaryFooterButton(newPayload, updateCb);
            }) : void 0;
          };
          Modal4.prototype.setFooterSecondaryButtons = function(newOptions, updateCb) {
            var _this = this;
            var subgroups = FOOTER_BUTTON_PROPS.subgroups;
            var newButtons = newOptions || [];
            var currentOptions = this.footerOptions && this.footerOptions.buttons.secondary || [];
            this.footerSecondaryOptions = this.getUpdatedChildActions(newButtons, currentOptions);
            this.footerSecondary = this.footerSecondaryOptions ? this.footerSecondaryOptions.map(function(action) {
              return buttonHelper_1.getSingleButton(_this, action, subgroups, function(newPayload) {
                _this.updateSecondaryFooterButton(newPayload, updateCb);
              });
            }) : void 0;
          };
          Modal4.prototype.getChildButton = function(newAction, currentAction) {
            var newButtons = newAction ? [newAction] : [];
            var currentButtons = currentAction ? [currentAction] : [];
            var updatedButton = this.getUpdatedChildActions(newButtons, currentButtons);
            return updatedButton ? updatedButton[0] : void 0;
          };
          Modal4.prototype.updatePrimaryFooterButton = function(newPayload, updateCb) {
            if (!this.footer || !this.footer.buttons.primary) {
              return;
            }
            if (helper_1.updateActionFromPayload(this.footer.buttons.primary, newPayload)) {
              updateCb();
            }
          };
          Modal4.prototype.updateSecondaryFooterButton = function(newPayload, updateCb) {
            if (!this.footer || !this.footer.buttons || !this.footer.buttons.secondary) {
              return;
            }
            var updated;
            for (var _i = 0, _a = this.footer.buttons.secondary; _i < _a.length; _i++) {
              var action = _a[_i];
              updated = helper_1.updateActionFromPayload(action, newPayload);
              if (updated) {
                break;
              }
            }
            if (updated) {
              updateCb();
            }
          };
          return Modal4;
        }(ActionSet_1.ActionSetWithChildren)
      );
      exports.Modal = Modal3;
      var ModalMessage = (
        /** @class */
        function(_super) {
          __extends(ModalMessage2, _super);
          function ModalMessage2(app, options) {
            var _this = _super.call(this, app, types_1.Group.Modal, types_1.Group.Modal) || this;
            _this.set(options, false);
            return _this;
          }
          Object.defineProperty(ModalMessage2.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { footer: this.footer, id: this.id });
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(ModalMessage2.prototype, "options", {
            get: function() {
              return {
                footer: this.footerOptions,
                message: this.message,
                size: this.size,
                title: this.title
              };
            },
            enumerable: false,
            configurable: true
          });
          ModalMessage2.prototype.set = function(options, shouldUpdate) {
            var _this = this;
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var title = mergedOptions.title, footer = mergedOptions.footer, message = mergedOptions.message, size = mergedOptions.size;
            this.title = title;
            this.message = message;
            this.size = size;
            this.setFooterPrimaryButton(footer ? footer.buttons.primary : void 0, function() {
              _this.dispatch(Action3.UPDATE);
            });
            this.setFooterSecondaryButtons(footer ? footer.buttons.secondary : void 0, function() {
              _this.dispatch(Action3.UPDATE);
            });
            if (shouldUpdate) {
              this.dispatch(Action3.UPDATE);
            }
            return this;
          };
          ModalMessage2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.OPEN:
                this.app.dispatch(openModal(this.payload));
                break;
              case Action3.CLOSE:
                this.close();
                break;
              case Action3.UPDATE:
                this.app.dispatch(update(this.payload));
                break;
            }
            return this;
          };
          return ModalMessage2;
        }(Modal3)
      );
      exports.ModalMessage = ModalMessage;
      var ModalIframe = (
        /** @class */
        function(_super) {
          __extends(ModalIframe2, _super);
          function ModalIframe2(app, options) {
            var _this = _super.call(this, app, types_1.Group.Modal, types_1.Group.Modal) || this;
            _this.set(options, false);
            return _this;
          }
          Object.defineProperty(ModalIframe2.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { footer: this.footer, id: this.id });
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(ModalIframe2.prototype, "options", {
            get: function() {
              return {
                footer: this.footerOptions,
                path: this.path,
                size: this.size,
                title: this.title,
                url: this.url,
                loading: this.loading
              };
            },
            enumerable: false,
            configurable: true
          });
          ModalIframe2.prototype.set = function(options, shouldUpdate) {
            var _this = this;
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var title = mergedOptions.title, footer = mergedOptions.footer, path = mergedOptions.path, url = mergedOptions.url, size = mergedOptions.size, loading = mergedOptions.loading;
            this.title = title;
            this.url = url;
            this.path = path;
            this.size = size;
            this.loading = loading;
            this.setFooterPrimaryButton(footer ? footer.buttons.primary : void 0, function() {
              _this.dispatch(Action3.UPDATE);
            });
            this.setFooterSecondaryButtons(footer ? footer.buttons.secondary : void 0, function() {
              _this.dispatch(Action3.UPDATE);
            });
            if (shouldUpdate) {
              this.dispatch(Action3.UPDATE);
            }
            return this;
          };
          ModalIframe2.prototype.dispatch = function(action, payload) {
            switch (action) {
              case Action3.OPEN:
                this.app.dispatch(openModal(this.payload));
                break;
              case Action3.CLOSE:
                this.close();
                break;
              case Action3.UPDATE:
                this.app.dispatch(update(this.payload));
                break;
              case Action3.DATA:
                this.app.dispatch(data2(payload || {}));
                break;
            }
            return this;
          };
          return ModalIframe2;
        }(Modal3)
      );
      exports.ModalIframe = ModalIframe;
    }
  });

  // node_modules/@shopify/app-bridge-core/util/constants.js
  var require_constants2 = __commonJS({
    "node_modules/@shopify/app-bridge-core/util/constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.INTERNAL_PROTOCOL = void 0;
      exports.INTERNAL_PROTOCOL = "shopify:";
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/safe-redirect.js
  var require_safe_redirect = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/safe-redirect.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isSafe = void 0;
      var constants_1 = require_constants2();
      var FILE_URI_MATCH = /\/\/\//;
      var INVALID_RELATIVE_URL = /[/\\][/\\]/;
      var VALID_PROTOCOLS = ["https:", "http:"];
      var DUMMY_HOSTNAME = "http://test.com";
      function isSafe(redirectUrl, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.allowedDomains, allowedDomains = _c === void 0 ? [] : _c, _d = _b.subdomains, subdomains = _d === void 0 ? [] : _d, matchPath2 = _b.matchPath, requireAbsolute = _b.requireAbsolute, requireSSL = _b.requireSSL, allowInternalProtocol = _b.allowInternalProtocol;
        if (FILE_URI_MATCH.test(redirectUrl)) {
          return false;
        }
        if (redirectUrl.startsWith("/")) {
          if (allowedDomains.length > 0 || subdomains.length > 0 || requireAbsolute || requireSSL) {
            return false;
          }
          if (matchPath2) {
            return pathMatches(new URL(redirectUrl, DUMMY_HOSTNAME), redirectUrl, matchPath2);
          }
          return !INVALID_RELATIVE_URL.test(redirectUrl);
        }
        var url;
        try {
          url = new URL(redirectUrl);
        } catch (error2) {
          return false;
        }
        if (allowInternalProtocol && url.protocol === constants_1.INTERNAL_PROTOCOL) {
          return true;
        }
        if (!VALID_PROTOCOLS.includes(url.protocol)) {
          return false;
        }
        if (requireSSL && url.protocol !== "https:") {
          return false;
        }
        if (url.username || url.password) {
          return false;
        }
        if (matchPath2 && !pathMatches(url, redirectUrl, matchPath2)) {
          return false;
        }
        if (!hostIsValid(url, allowedDomains, subdomains)) {
          return false;
        }
        return true;
      }
      exports.isSafe = isSafe;
      function hostIsValid(url, allowedDomains, subdomains) {
        if (!subdomains.every(function(subdomain) {
          return subdomain.startsWith(".");
        })) {
          throw new TypeError("Subdomains must begin with .");
        }
        var hostname = url.hostname;
        return allowedDomains.length === 0 && subdomains.length === 0 || allowedDomains.includes(hostname) || subdomains.some(function(subdomain) {
          return hostname.endsWith(subdomain);
        });
      }
      function pathMatches(url, originalUrl, matcher) {
        var pathname = url.pathname;
        var originalPathname = originalUrl.replace(url.origin, "").split("?")[0];
        return typeof matcher === "string" ? pathname === matcher && originalPathname === matcher : matcher.test(pathname) && matcher.test(originalPathname);
      }
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/modal.js
  var require_modal = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/modal.js"(exports) {
      "use strict";
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = exports.validateProps = void 0;
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      var Modal_1 = require_Modal();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Modal_1.Action;
      } });
      var Button_1 = require_Button();
      var safe_redirect_1 = require_safe_redirect();
      var button_1 = require_button();
      function matchesSafeOrigin(value, localOrigin) {
        var hostName;
        try {
          hostName = new URL(localOrigin).hostname;
        } catch (error2) {
          return [
            {
              error: "invalid_app_origin",
              value: localOrigin,
              message: "Provided value for app origin: `" + localOrigin + "` is invalid"
            }
          ];
        }
        var isSafeSrc = safe_redirect_1.isSafe(value, {
          requireAbsolute: true,
          requireSSL: true,
          allowInternalProtocol: true,
          allowedDomains: [hostName]
        });
        if (!isSafeSrc) {
          return [
            {
              error: "not_matching_app_origin",
              value,
              message: "Provided URL origin does not match app origin `" + hostName + "`"
            }
          ];
        }
      }
      function matchesSize() {
        return function(value) {
          var values2 = [Modal_1.Size.Small, Modal_1.Size.Medium, Modal_1.Size.Large];
          if (values2.includes(value)) {
            return;
          }
          var message = "expected:" + values2.map(function(val) {
            return "`" + val + "`";
          }).join(" or ");
          if (value === Modal_1.Size.Full) {
            message += ". Size `" + value + "` is deprecated as of version 1.6.5 and will fall back to size `medium`";
          }
          if (value === Modal_1.Size.Auto) {
            message += ". Size `" + value + "` is deprecated as of version 1.12.x and will fall back to size `medium`. Use the `setUpModalAutoSizing` utility from `app-bridge` instead";
          }
          return [
            {
              error: "invalid_enum_value",
              value,
              message
            }
          ];
        };
      }
      function getModalSchema(props, localOrigin) {
        if (props === void 0) {
          props = {};
        }
        var baseModalSchema = type_validate_1.matchesObject({
          title: type_validate_1.makeOptional(type_validate_1.matchesString()),
          footer: type_validate_1.makeOptional(type_validate_1.matchesObject({
            buttons: type_validate_1.matchesObject({
              primary: type_validate_1.makeOptional(button_1.buttonSchemaWithId),
              secondary: type_validate_1.makeOptional(type_validate_1.matchesArray(button_1.buttonSchemaWithId))
            })
          })),
          size: type_validate_1.makeOptional(matchesSize())
        });
        if (Modal_1.isIframeModal(props)) {
          if (props.url) {
            var urlSchema = type_validate_1.matchesObject({
              url: type_validate_1.composeSchemas(type_validate_1.matchesString(), function(value) {
                return localOrigin ? matchesSafeOrigin(value, localOrigin) : void 0;
              })
            });
            return type_validate_1.composeSchemas(baseModalSchema, urlSchema);
          }
          return type_validate_1.composeSchemas(baseModalSchema, utils_1.relativePathSchema);
        }
        return type_validate_1.composeSchemas(baseModalSchema, type_validate_1.matchesObject({ message: type_validate_1.matchesString() }));
      }
      function validateProps(props, localOrigin) {
        return type_validate_1.validate(props, getModalSchema(props, localOrigin));
      }
      exports.validateProps = validateProps;
      function validateAction(action, localOrigin) {
        var schema = getModalSchema(action.payload, localOrigin);
        switch (action.type) {
          case Modal_1.Action.OPEN:
          case Modal_1.Action.UPDATE:
            return type_validate_1.validate(action, utils_1.createActionValidator(Modal_1.Action, schema, true, action.type === Modal_1.Action.UPDATE));
          case Modal_1.Action.FOOTER_BUTTON_CLICK:
            return button_1.validateAction(__assign(__assign({}, action), { type: Button_1.Action.CLICK }));
          case Modal_1.Action.FOOTER_BUTTON_UPDATE:
            return button_1.validateAction(__assign(__assign({}, action), { type: Button_1.Action.UPDATE }));
          case Modal_1.Action.CLOSE:
          default:
            return type_validate_1.validate(action, utils_1.createActionValidator(Modal_1.Action));
        }
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Navigation/History/index.js
  var require_History = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Navigation/History/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.History = exports.replace = exports.push = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["PUSH"] = "APP::NAVIGATION::HISTORY::PUSH";
        Action4["REPLACE"] = "APP::NAVIGATION::HISTORY::REPLACE";
      })(Action3 = exports.Action || (exports.Action = {}));
      function push(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Navigation,
          type: Action3.PUSH
        });
      }
      exports.push = push;
      function replace2(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Navigation,
          type: Action3.REPLACE
        });
      }
      exports.replace = replace2;
      var History = (
        /** @class */
        function(_super) {
          __extends(History2, _super);
          function History2(app) {
            return _super.call(this, app, "History", types_1.Group.Navigation) || this;
          }
          Object.defineProperty(History2.prototype, "payload", {
            get: function() {
              return { id: this.id };
            },
            enumerable: false,
            configurable: true
          });
          History2.prototype.dispatch = function(type, path) {
            var payload = __assign(__assign({}, this.payload), { path });
            switch (type) {
              case Action3.PUSH:
                this.app.dispatch(push(payload));
                break;
              case Action3.REPLACE:
                this.app.dispatch(replace2(payload));
                break;
            }
            return this;
          };
          return History2;
        }(ActionSet_1.ActionSet)
      );
      exports.History = History;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/navigation.js
  var require_navigation = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/navigation.js"(exports) {
      "use strict";
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validateAction = exports.getSectionSchema = exports.matchesAbsolutePath = void 0;
      var History = __importStar(require_History());
      var Redirect = __importStar(require_Redirect());
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      function matchesAbsolutePath(value) {
        return value.match("^https?://") ? void 0 : [
          {
            value,
            error: "invalid_absolute_url",
            message: "expected string to start with `https://` or `http://`"
          }
        ];
      }
      exports.matchesAbsolutePath = matchesAbsolutePath;
      function getSectionSchema(payload) {
        var isProductVariant = payload && payload.section && payload.section.resource && payload.section.name === Redirect.ResourceType.Product;
        var resourceSchema = {
          create: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
          id: type_validate_1.makeOptional(type_validate_1.matchesString())
        };
        var productVariantSchema = __assign(__assign({}, resourceSchema), { variant: type_validate_1.makeOptional(type_validate_1.matchesObject(resourceSchema)) });
        return type_validate_1.matchesObject({
          section: type_validate_1.matchesObject({
            name: type_validate_1.matchesEnum(Redirect.ResourceType),
            resource: type_validate_1.makeOptional(type_validate_1.matchesObject(isProductVariant ? productVariantSchema : resourceSchema))
          })
        });
      }
      exports.getSectionSchema = getSectionSchema;
      function validateAction(action) {
        var newContextSchema = type_validate_1.matchesObject({ newContext: type_validate_1.makeOptional(type_validate_1.matchesBoolean()) });
        var actionType = Redirect.Action;
        var schema;
        switch (action.type) {
          case History.Action.PUSH:
          case History.Action.REPLACE:
            actionType = History.Action;
            schema = utils_1.relativePathSchema;
            break;
          case Redirect.Action.APP:
            schema = utils_1.relativePathSchema;
            break;
          case Redirect.Action.REMOTE:
            schema = type_validate_1.composeSchemas(type_validate_1.matchesObject({
              url: type_validate_1.composeSchemas(type_validate_1.matchesString(), function(value) {
                return matchesAbsolutePath(value);
              })
            }), newContextSchema);
            break;
          case Redirect.Action.ADMIN_PATH:
            schema = type_validate_1.composeSchemas(utils_1.relativePathSchema, newContextSchema);
            break;
          case Redirect.Action.ADMIN_SECTION:
            schema = type_validate_1.composeSchemas(getSectionSchema(action.payload), newContextSchema);
            break;
        }
        return type_validate_1.validate(action, utils_1.createActionValidator(actionType, schema));
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/ResourcePicker/index.js
  var require_ResourcePicker = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/ResourcePicker/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ResourcePicker = exports.update = exports.close = exports.cancel = exports.open = exports.select = exports.ActionVerb = exports.ResourceType = exports.ProductStatus = exports.ProductVariantInventoryManagement = exports.ProductVariantInventoryPolicy = exports.WeightUnit = exports.FulfillmentServiceType = exports.CollectionSortOrder = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["OPEN"] = "APP::RESOURCE_PICKER::OPEN";
        Action4["SELECT"] = "APP::RESOURCE_PICKER::SELECT";
        Action4["CLOSE"] = "APP::RESOURCE_PICKER::CLOSE";
        Action4["UPDATE"] = "APP::RESOURCE_PICKER::UPDATE";
        Action4["CANCEL"] = "APP::RESOURCE_PICKER::CANCEL";
      })(Action3 = exports.Action || (exports.Action = {}));
      var CollectionSortOrder;
      (function(CollectionSortOrder2) {
        CollectionSortOrder2["Manual"] = "MANUAL";
        CollectionSortOrder2["BestSelling"] = "BEST_SELLING";
        CollectionSortOrder2["AlphaAsc"] = "ALPHA_ASC";
        CollectionSortOrder2["AlphaDesc"] = "ALPHA_DESC";
        CollectionSortOrder2["PriceDesc"] = "PRICE_DESC";
        CollectionSortOrder2["PriceAsc"] = "PRICE_ASC";
        CollectionSortOrder2["CreatedDesc"] = "CREATED_DESC";
        CollectionSortOrder2["Created"] = "CREATED";
        CollectionSortOrder2["MostRelevant"] = "MOST_RELEVANT";
      })(CollectionSortOrder = exports.CollectionSortOrder || (exports.CollectionSortOrder = {}));
      var FulfillmentServiceType;
      (function(FulfillmentServiceType2) {
        FulfillmentServiceType2["GiftCard"] = "GIFT_CARD";
        FulfillmentServiceType2["Manual"] = "MANUAL";
        FulfillmentServiceType2["ThirdParty"] = "THIRD_PARTY";
      })(FulfillmentServiceType = exports.FulfillmentServiceType || (exports.FulfillmentServiceType = {}));
      var WeightUnit;
      (function(WeightUnit2) {
        WeightUnit2["Kilograms"] = "KILOGRAMS";
        WeightUnit2["Grams"] = "GRAMS";
        WeightUnit2["Pounds"] = "POUNDS";
        WeightUnit2["Ounces"] = "OUNCES";
      })(WeightUnit = exports.WeightUnit || (exports.WeightUnit = {}));
      var ProductVariantInventoryPolicy;
      (function(ProductVariantInventoryPolicy2) {
        ProductVariantInventoryPolicy2["Deny"] = "DENY";
        ProductVariantInventoryPolicy2["Continue"] = "CONTINUE";
      })(ProductVariantInventoryPolicy = exports.ProductVariantInventoryPolicy || (exports.ProductVariantInventoryPolicy = {}));
      var ProductVariantInventoryManagement;
      (function(ProductVariantInventoryManagement2) {
        ProductVariantInventoryManagement2["Shopify"] = "SHOPIFY";
        ProductVariantInventoryManagement2["NotManaged"] = "NOT_MANAGED";
        ProductVariantInventoryManagement2["FulfillmentService"] = "FULFILLMENT_SERVICE";
      })(ProductVariantInventoryManagement = exports.ProductVariantInventoryManagement || (exports.ProductVariantInventoryManagement = {}));
      var ProductStatus;
      (function(ProductStatus2) {
        ProductStatus2["Active"] = "ACTIVE";
        ProductStatus2["Archived"] = "ARCHIVED";
        ProductStatus2["Draft"] = "DRAFT";
      })(ProductStatus = exports.ProductStatus || (exports.ProductStatus = {}));
      var ResourceType;
      (function(ResourceType2) {
        ResourceType2["Product"] = "product";
        ResourceType2["ProductVariant"] = "variant";
        ResourceType2["Collection"] = "collection";
      })(ResourceType = exports.ResourceType || (exports.ResourceType = {}));
      var ActionVerb;
      (function(ActionVerb2) {
        ActionVerb2["Add"] = "add";
        ActionVerb2["Select"] = "select";
      })(ActionVerb = exports.ActionVerb || (exports.ActionVerb = {}));
      function select(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.ResourcePicker,
          type: Action3.SELECT
        });
      }
      exports.select = select;
      function open(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.ResourcePicker,
          type: Action3.OPEN
        });
      }
      exports.open = open;
      function cancel(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.ResourcePicker,
          type: Action3.CANCEL
        });
      }
      exports.cancel = cancel;
      function close(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.ResourcePicker,
          type: Action3.CANCEL
        });
      }
      exports.close = close;
      function update(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.ResourcePicker,
          type: Action3.UPDATE
        });
      }
      exports.update = update;
      var ResourcePicker = (
        /** @class */
        function(_super) {
          __extends(ResourcePicker2, _super);
          function ResourcePicker2(app, options, resourceType) {
            var _this = _super.call(this, app, types_1.Group.ResourcePicker, types_1.Group.ResourcePicker) || this;
            _this.initialSelectionIds = [];
            _this.selection = [];
            _this.resourceType = resourceType;
            _this.set(options, false);
            return _this;
          }
          Object.defineProperty(ResourcePicker2.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { id: this.id, resourceType: this.resourceType });
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(ResourcePicker2.prototype, "options", {
            get: function() {
              var options = {
                initialQuery: this.initialQuery,
                filterQuery: this.filterQuery,
                selectMultiple: this.selectMultiple,
                initialSelectionIds: this.initialSelectionIds,
                showHidden: this.showHidden,
                actionVerb: this.actionVerb
              };
              if (this.resourceType === ResourceType.Product) {
                var productOptions = __assign(__assign({}, options), { showVariants: this.showVariants, showDraft: this.showDraft, showArchived: this.showArchived, showDraftBadge: this.showDraftBadge, showArchivedBadge: this.showArchivedBadge });
                return productOptions;
              }
              return options;
            },
            enumerable: false,
            configurable: true
          });
          ResourcePicker2.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var initialQuery = mergedOptions.initialQuery, filterQuery = mergedOptions.filterQuery, _a = mergedOptions.initialSelectionIds, initialSelectionIds = _a === void 0 ? [] : _a, _b = mergedOptions.showHidden, showHidden = _b === void 0 ? true : _b, _c = mergedOptions.showVariants, showVariants = _c === void 0 ? true : _c, _d = mergedOptions.showDraft, showDraft = _d === void 0 ? true : _d, _e = mergedOptions.showArchived, showArchived = _e === void 0 ? true : _e, _f = mergedOptions.showDraftBadge, showDraftBadge = _f === void 0 ? false : _f, _g = mergedOptions.showArchivedBadge, showArchivedBadge = _g === void 0 ? false : _g, _h = mergedOptions.selectMultiple, selectMultiple = _h === void 0 ? true : _h, _j = mergedOptions.actionVerb, actionVerb = _j === void 0 ? ActionVerb.Add : _j;
            this.initialQuery = initialQuery;
            this.filterQuery = filterQuery;
            this.initialSelectionIds = initialSelectionIds;
            this.showHidden = showHidden;
            this.showVariants = showVariants;
            this.showDraft = showDraft;
            this.showArchived = showArchived;
            this.showDraftBadge = showDraftBadge;
            this.showArchivedBadge = showArchivedBadge;
            this.selectMultiple = selectMultiple;
            this.actionVerb = actionVerb;
            if (shouldUpdate) {
              this.update();
            }
            return this;
          };
          ResourcePicker2.prototype.dispatch = function(action, selection) {
            if (action === Action3.OPEN) {
              this.open();
            } else if (action === Action3.UPDATE) {
              this.update();
            } else if (action === Action3.CLOSE || action === Action3.CANCEL) {
              this.cancel();
            } else if (action === Action3.SELECT) {
              this.selection = selection;
              this.app.dispatch(select({ id: this.id, selection: this.selection }));
            }
            return this;
          };
          ResourcePicker2.prototype.update = function() {
            this.app.dispatch(update(this.payload));
          };
          ResourcePicker2.prototype.open = function() {
            this.app.dispatch(open(this.payload));
          };
          ResourcePicker2.prototype.cancel = function() {
            this.app.dispatch(cancel({ id: this.id }));
          };
          ResourcePicker2.prototype.close = function() {
            this.cancel();
          };
          return ResourcePicker2;
        }(ActionSet_1.ActionSet)
      );
      exports.ResourcePicker = ResourcePicker;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/resourcePicker.js
  var require_resourcePicker = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/resourcePicker.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = exports.validateProps = void 0;
      var ResourcePicker_1 = require_ResourcePicker();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return ResourcePicker_1.Action;
      } });
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      var resourceSelectionSchema = type_validate_1.matchesArray(type_validate_1.matchesObject({
        id: type_validate_1.matchesString()
      }));
      var resourcePickerOptions = type_validate_1.matchesObject({
        initialQuery: type_validate_1.makeOptional(type_validate_1.matchesString()),
        filterQuery: type_validate_1.makeOptional(type_validate_1.matchesString()),
        initialSelectionIds: type_validate_1.makeOptional(resourceSelectionSchema),
        selectMultiple: type_validate_1.makeOptional(type_validate_1.oneOf(type_validate_1.matchesBoolean(), type_validate_1.matchesPositiveInteger())),
        showHidden: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        showVariants: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        showDraft: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        showArchived: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        showDraftBadge: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        showArchivedBadge: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        actionVerb: type_validate_1.makeOptional(type_validate_1.matchesEnum(ResourcePicker_1.ActionVerb))
      });
      var resourcePickerActionSchema = type_validate_1.matchesObject({
        resourceType: type_validate_1.matchesEnum(ResourcePicker_1.ResourceType),
        options: type_validate_1.makeOptional(resourcePickerOptions)
      });
      var selectionSchema = type_validate_1.matchesObject({
        selection: resourceSelectionSchema
      });
      function validateProps(props) {
        return type_validate_1.validate(props, resourcePickerOptions);
      }
      exports.validateProps = validateProps;
      function validateAction(action) {
        switch (action.type) {
          case ResourcePicker_1.Action.UPDATE:
          case ResourcePicker_1.Action.OPEN:
            return type_validate_1.validate(action, utils_1.createActionValidator(ResourcePicker_1.Action, resourcePickerActionSchema, false, true));
          case ResourcePicker_1.Action.SELECT:
            return type_validate_1.validate(action, utils_1.createActionValidator(ResourcePicker_1.Action, selectionSchema, true, true));
          case ResourcePicker_1.Action.CANCEL:
          case ResourcePicker_1.Action.CLOSE:
          default:
            return type_validate_1.validate(action, utils_1.createActionValidator(ResourcePicker_1.Action));
        }
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/buttonGroupHelper.js
  var require_buttonGroupHelper = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/buttonGroupHelper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getGroupedButton = void 0;
      var ButtonGroup_1 = require_ButtonGroup();
      function getGroupedButton(action, button, subgroups, updateCb) {
        action.addChild(button, action.group, subgroups);
        var id = button.id, label = button.label, disabled = button.disabled, buttons = button.buttons, plain = button.plain;
        action.subscribeToChild(button, ButtonGroup_1.Action.UPDATE, updateCb);
        return { id, label, buttons, disabled, plain };
      }
      exports.getGroupedButton = getGroupedButton;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/TitleBar/index.js
  var require_TitleBar = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/TitleBar/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TitleBar = exports.update = exports.clickBreadcrumb = exports.clickActionButton = exports.Action = void 0;
      var ActionSet_1 = require_ActionSet();
      var Button_1 = require_Button();
      var ButtonGroup_1 = require_ButtonGroup();
      var buttonGroupHelper_1 = require_buttonGroupHelper();
      var buttonHelper_1 = require_buttonHelper();
      var helper_1 = require_helper();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["UPDATE"] = "APP::TITLEBAR::UPDATE";
        Action4["BUTTON_CLICK"] = "APP::TITLEBAR::BUTTONS::BUTTON::CLICK";
        Action4["BUTTON_UPDATE"] = "APP::TITLEBAR::BUTTONS::BUTTON::UPDATE";
        Action4["BUTTON_GROUP_UPDATE"] = "APP::TITLEBAR::BUTTONS::BUTTONGROUP::UPDATE";
        Action4["BREADCRUMBS_CLICK"] = "APP::TITLEBAR::BREADCRUMBS::BUTTON::CLICK";
        Action4["BREADCRUMBS_UPDATE"] = "APP::TITLEBAR::BREADCRUMBS::BUTTON::UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
      var TITLEBAR_BUTTON_PROPS = {
        group: types_1.Group.TitleBar,
        subgroups: ["Buttons"]
      };
      var BREADCRUMB_BUTTON_PROPS = {
        group: types_1.Group.TitleBar,
        subgroups: ["Breadcrumbs"],
        type: types_1.ComponentType.Button
      };
      function clickActionButton(id, payload) {
        var type = types_1.ComponentType.Button;
        var component = __assign({ id, type }, TITLEBAR_BUTTON_PROPS);
        return Button_1.clickButton(types_1.Group.TitleBar, component, payload);
      }
      exports.clickActionButton = clickActionButton;
      function clickBreadcrumb(id, payload) {
        var component = __assign({ id }, BREADCRUMB_BUTTON_PROPS);
        return Button_1.clickButton(types_1.Group.TitleBar, component, payload);
      }
      exports.clickBreadcrumb = clickBreadcrumb;
      function update(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.TitleBar,
          type: Action3.UPDATE
        });
      }
      exports.update = update;
      var TitleBar = (
        /** @class */
        function(_super) {
          __extends(TitleBar2, _super);
          function TitleBar2(app, options) {
            var _this = _super.call(this, app, types_1.Group.TitleBar, types_1.Group.TitleBar) || this;
            if (!options.title && !options.breadcrumbs && !options.buttons) {
              return _this;
            }
            _this.set(options);
            return _this;
          }
          Object.defineProperty(TitleBar2.prototype, "buttons", {
            get: function() {
              if (!this.primary && !this.secondary) {
                return void 0;
              }
              return {
                primary: this.primary,
                secondary: this.secondary
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(TitleBar2.prototype, "buttonsOptions", {
            get: function() {
              if (!this.primaryOptions && !this.secondaryOptions) {
                return void 0;
              }
              return {
                primary: this.primaryOptions,
                secondary: this.secondaryOptions
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(TitleBar2.prototype, "options", {
            get: function() {
              return {
                breadcrumbs: this.breadcrumbsOption,
                buttons: this.buttonsOptions,
                title: this.title
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(TitleBar2.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { breadcrumbs: this.breadcrumb, buttons: this.buttons, id: this.id });
            },
            enumerable: false,
            configurable: true
          });
          TitleBar2.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var title = mergedOptions.title, buttons = mergedOptions.buttons, breadcrumbs = mergedOptions.breadcrumbs;
            this.title = title;
            this.setBreadcrumbs(breadcrumbs);
            this.setPrimaryButton(buttons ? buttons.primary : void 0);
            this.setSecondaryButton(buttons ? buttons.secondary : void 0);
            if (shouldUpdate) {
              this.dispatch(Action3.UPDATE);
            }
            return this;
          };
          TitleBar2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.UPDATE:
                this.app.dispatch(update(this.payload));
                break;
            }
            return this;
          };
          TitleBar2.prototype.getButton = function(button, subgroups, updateCb) {
            if (button instanceof ButtonGroup_1.ButtonGroup) {
              return buttonGroupHelper_1.getGroupedButton(this, button, subgroups, updateCb);
            }
            return buttonHelper_1.getSingleButton(this, button, subgroups, updateCb);
          };
          TitleBar2.prototype.updatePrimaryButton = function(newPayload) {
            if (!this.primary) {
              return;
            }
            if (helper_1.updateActionFromPayload(this.primary, newPayload)) {
              this.dispatch(Action3.UPDATE);
            }
          };
          TitleBar2.prototype.updateSecondaryButtons = function(newPayload) {
            if (!this.secondary) {
              return;
            }
            var buttonToUpdate = this.secondary.find(function(action) {
              return action.id === newPayload.id;
            });
            if (!buttonToUpdate) {
              return;
            }
            var updated = false;
            if (ButtonGroup_1.isGroupedButtonPayload(newPayload)) {
              updated = helper_1.updateActionFromPayload(buttonToUpdate, newPayload);
            } else {
              updated = helper_1.updateActionFromPayload(buttonToUpdate, newPayload);
            }
            if (updated) {
              this.dispatch(Action3.UPDATE);
            }
          };
          TitleBar2.prototype.updateBreadcrumbButton = function(newPayload) {
            if (!this.breadcrumb) {
              return;
            }
            if (helper_1.updateActionFromPayload(this.breadcrumb, newPayload)) {
              this.dispatch(Action3.UPDATE);
            }
          };
          TitleBar2.prototype.setPrimaryButton = function(newOptions) {
            this.primaryOptions = this.getChildButton(newOptions, this.primaryOptions);
            this.primary = this.primaryOptions ? this.getButton(this.primaryOptions, TITLEBAR_BUTTON_PROPS.subgroups, this.updatePrimaryButton) : void 0;
          };
          TitleBar2.prototype.setSecondaryButton = function(newOptions) {
            var _this = this;
            var newButtons = newOptions || [];
            var currentButtons = this.secondaryOptions || [];
            this.secondaryOptions = this.getUpdatedChildActions(newButtons, currentButtons);
            this.secondary = this.secondaryOptions ? this.secondaryOptions.map(function(action) {
              return _this.getButton(action, TITLEBAR_BUTTON_PROPS.subgroups, _this.updateSecondaryButtons);
            }) : void 0;
          };
          TitleBar2.prototype.setBreadcrumbs = function(breadcrumb) {
            this.breadcrumbsOption = this.getChildButton(breadcrumb, this.breadcrumbsOption);
            this.breadcrumb = this.breadcrumbsOption ? this.getButton(this.breadcrumbsOption, BREADCRUMB_BUTTON_PROPS.subgroups, this.updateBreadcrumbButton) : void 0;
          };
          TitleBar2.prototype.getChildButton = function(newAction, currentAction) {
            var newButtons = newAction ? [newAction] : [];
            var currentButtons = currentAction ? [currentAction] : [];
            var updatedButton = this.getUpdatedChildActions(newButtons, currentButtons);
            return updatedButton ? updatedButton[0] : void 0;
          };
          return TitleBar2;
        }(ActionSet_1.ActionSetWithChildren)
      );
      exports.TitleBar = TitleBar;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/titleBar.js
  var require_titleBar = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/titleBar.js"(exports) {
      "use strict";
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = exports.validateProps = exports.titleBarSchema = void 0;
      var TitleBar_1 = require_TitleBar();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return TitleBar_1.Action;
      } });
      var Button_1 = require_Button();
      var ButtonGroup_1 = require_ButtonGroup();
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      var button_1 = require_button();
      var buttonGroup_1 = require_buttonGroup();
      var buttonSchemaWithId = type_validate_1.composeSchemas(button_1.buttonSchema, type_validate_1.matchesObject({
        id: type_validate_1.matchesString()
      }));
      exports.titleBarSchema = type_validate_1.matchesObject({
        breadcrumbs: type_validate_1.makeOptional(button_1.buttonSchema),
        title: type_validate_1.makeOptional(type_validate_1.matchesString()),
        buttons: type_validate_1.makeOptional(type_validate_1.matchesObject({
          primary: type_validate_1.makeOptional(buttonSchemaWithId),
          secondary: type_validate_1.makeOptional(type_validate_1.matchesArray(type_validate_1.composeSchemas(buttonSchemaWithId, type_validate_1.matchesObject({
            buttons: type_validate_1.makeOptional(type_validate_1.matchesArray(buttonSchemaWithId))
          }))))
        }))
      });
      function validateProps(props) {
        return type_validate_1.validate(props, exports.titleBarSchema);
      }
      exports.validateProps = validateProps;
      function validateAction(action) {
        switch (action.type) {
          default:
          case TitleBar_1.Action.UPDATE:
            return type_validate_1.validate(action, utils_1.createActionValidator(TitleBar_1.Action, exports.titleBarSchema, true, false));
          case TitleBar_1.Action.BUTTON_CLICK:
          case TitleBar_1.Action.BREADCRUMBS_CLICK:
            return button_1.validateAction(__assign(__assign({}, action), { type: Button_1.Action.CLICK }));
          case TitleBar_1.Action.BUTTON_UPDATE:
          case TitleBar_1.Action.BREADCRUMBS_UPDATE:
            return button_1.validateAction(__assign(__assign({}, action), { type: Button_1.Action.UPDATE }));
          case TitleBar_1.Action.BUTTON_GROUP_UPDATE:
            return buttonGroup_1.validateAction(__assign(__assign({}, action), { type: ButtonGroup_1.Action.UPDATE }));
        }
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Toast/index.js
  var require_Toast = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Toast/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Toast = exports.primaryAction = exports.clear = exports.show = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["SHOW"] = "APP::TOAST::SHOW";
        Action4["CLEAR"] = "APP::TOAST::CLEAR";
        Action4["ACTION"] = "APP::TOAST::ACTION";
      })(Action3 = exports.Action || (exports.Action = {}));
      function show(toastMessage) {
        return helper_1.actionWrapper({
          group: types_1.Group.Toast,
          payload: toastMessage,
          type: Action3.SHOW
        });
      }
      exports.show = show;
      function clear(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Toast,
          type: Action3.CLEAR
        });
      }
      exports.clear = clear;
      function primaryAction(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Toast,
          type: Action3.ACTION
        });
      }
      exports.primaryAction = primaryAction;
      var Toast = (
        /** @class */
        function(_super) {
          __extends(Toast2, _super);
          function Toast2(app, options) {
            var _this = _super.call(this, app, types_1.Group.Toast, types_1.Group.Toast) || this;
            _this.message = "";
            _this.duration = 5e3;
            _this.set(options);
            return _this;
          }
          Object.defineProperty(Toast2.prototype, "options", {
            get: function() {
              var _a;
              return {
                duration: this.duration,
                isError: this.isError,
                message: this.message,
                action: ((_a = this.action) === null || _a === void 0 ? void 0 : _a.content) ? {
                  content: this.action.content
                } : void 0
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Toast2.prototype, "payload", {
            get: function() {
              return __assign({ id: this.id }, this.options);
            },
            enumerable: false,
            configurable: true
          });
          Toast2.prototype.set = function(options) {
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var message = mergedOptions.message, duration = mergedOptions.duration, isError = mergedOptions.isError, action = mergedOptions.action;
            this.message = message;
            this.duration = duration;
            this.isError = isError;
            this.action = (action === null || action === void 0 ? void 0 : action.content) ? {
              content: action.content || ""
            } : void 0;
            return this;
          };
          Toast2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.SHOW: {
                var openAction = show(this.payload);
                this.app.dispatch(openAction);
                break;
              }
              case Action3.CLEAR:
                this.app.dispatch(clear({ id: this.id }));
                break;
              case Action3.ACTION:
                this.app.dispatch(primaryAction({ id: this.id }));
                break;
            }
            return this;
          };
          return Toast2;
        }(ActionSet_1.ActionSet)
      );
      exports.Toast = Toast;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/toast.js
  var require_toast = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/toast.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateProps = exports.validateAction = exports.toastSchema = void 0;
      var Toast_1 = require_Toast();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Toast_1.Action;
      } });
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      exports.toastSchema = type_validate_1.matchesObject({
        message: type_validate_1.matchesString(),
        duration: type_validate_1.matchesPositiveInteger(),
        isError: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        action: type_validate_1.makeOptional(type_validate_1.matchesObject({
          content: type_validate_1.matchesString()
        }))
      });
      function validateAction(action) {
        switch (action.type) {
          case Toast_1.Action.SHOW:
            return type_validate_1.validate(action, utils_1.createActionValidator(Toast_1.Action, exports.toastSchema, true));
          default:
            return type_validate_1.validate(action, utils_1.createActionValidator(Toast_1.Action));
        }
      }
      exports.validateAction = validateAction;
      function validateProps(props) {
        return type_validate_1.validate(props, exports.toastSchema);
      }
      exports.validateProps = validateProps;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Picker/index.js
  var require_Picker = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Picker/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unstable_Picker = exports.loadMore = exports.search = exports.update = exports.cancel = exports.open = exports.select = exports.ALL_RESOURCE_VERTICAL_ALIGNMENT = exports.ALL_MEDIA_KINDS = exports.ALL_BADGE_STATUSES = exports.ALL_BADGE_PROGRESSES = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["OPEN"] = "APP::PICKER::OPEN";
        Action4["SELECT"] = "APP::PICKER::SELECT";
        Action4["UPDATE"] = "APP::PICKER::UPDATE";
        Action4["CANCEL"] = "APP::PICKER::CANCEL";
        Action4["SEARCH"] = "APP::PICKER::SEARCH";
        Action4["LOAD_MORE"] = "APP::PICKER::LOAD_MORE";
      })(Action3 = exports.Action || (exports.Action = {}));
      exports.ALL_BADGE_PROGRESSES = [
        "incomplete",
        "partiallyComplete",
        "complete"
      ];
      exports.ALL_BADGE_STATUSES = [
        "success",
        "info",
        "attention",
        "critical",
        "warning",
        "new"
      ];
      exports.ALL_MEDIA_KINDS = ["Avatar", "Thumbnail"];
      exports.ALL_RESOURCE_VERTICAL_ALIGNMENT = [
        "leading",
        "trailing",
        "center"
      ];
      function select(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.unstable_Picker,
          type: Action3.SELECT
        });
      }
      exports.select = select;
      function open(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.unstable_Picker,
          type: Action3.OPEN
        });
      }
      exports.open = open;
      function cancel(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.unstable_Picker,
          type: Action3.CANCEL
        });
      }
      exports.cancel = cancel;
      function update(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.unstable_Picker,
          type: Action3.UPDATE
        });
      }
      exports.update = update;
      function search(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.unstable_Picker,
          type: Action3.SEARCH
        });
      }
      exports.search = search;
      function loadMore(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.unstable_Picker,
          type: Action3.LOAD_MORE
        });
      }
      exports.loadMore = loadMore;
      var unstable_Picker = (
        /** @class */
        function(_super) {
          __extends(unstable_Picker2, _super);
          function unstable_Picker2(app, options) {
            var _this = _super.call(this, app, types_1.Group.unstable_Picker, types_1.Group.unstable_Picker) || this;
            _this.items = [];
            _this.selectedItems = [];
            _this.set(options, false);
            return _this;
          }
          Object.defineProperty(unstable_Picker2.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { id: this.id });
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(unstable_Picker2.prototype, "options", {
            get: function() {
              return {
                items: this.items,
                maxSelectable: this.maxSelectable,
                selectedItems: this.selectedItems,
                title: this.title,
                loading: this.loading,
                searchQuery: this.searchQuery,
                searchQueryPlaceholder: this.searchQueryPlaceholder,
                primaryActionLabel: this.primaryActionLabel,
                secondaryActionLabel: this.secondaryActionLabel,
                emptySearchLabel: this.emptySearchLabel,
                canLoadMore: this.canLoadMore,
                loadingMore: this.loadingMore,
                verticalAlignment: this.verticalAlignment,
                allowEmptySelection: this.allowEmptySelection,
                resourceName: this.resourceName
              };
            },
            enumerable: false,
            configurable: true
          });
          unstable_Picker2.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var _a = mergedOptions.selectedItems, selectedItems = _a === void 0 ? [] : _a, _b = mergedOptions.maxSelectable, maxSelectable = _b === void 0 ? 0 : _b, _c = mergedOptions.items, items = _c === void 0 ? [] : _c, _d = mergedOptions.loading, loading = _d === void 0 ? false : _d, title = mergedOptions.title, searchQuery = mergedOptions.searchQuery, searchQueryPlaceholder = mergedOptions.searchQueryPlaceholder, primaryActionLabel = mergedOptions.primaryActionLabel, secondaryActionLabel = mergedOptions.secondaryActionLabel, emptySearchLabel = mergedOptions.emptySearchLabel, _e = mergedOptions.canLoadMore, canLoadMore = _e === void 0 ? false : _e, _f = mergedOptions.loadingMore, loadingMore = _f === void 0 ? false : _f, verticalAlignment = mergedOptions.verticalAlignment, allowEmptySelection = mergedOptions.allowEmptySelection, resourceName = mergedOptions.resourceName;
            this.title = title;
            this.items = items;
            this.selectedItems = selectedItems;
            this.maxSelectable = maxSelectable;
            this.loading = loading;
            this.searchQuery = searchQuery;
            this.searchQueryPlaceholder = searchQueryPlaceholder;
            this.primaryActionLabel = primaryActionLabel;
            this.secondaryActionLabel = secondaryActionLabel;
            this.emptySearchLabel = emptySearchLabel;
            this.canLoadMore = canLoadMore;
            this.loadingMore = loadingMore;
            this.verticalAlignment = verticalAlignment;
            this.allowEmptySelection = allowEmptySelection;
            this.resourceName = resourceName;
            if (shouldUpdate) {
              this.update();
            }
            return this;
          };
          unstable_Picker2.prototype.dispatch = function(action, payload) {
            if (action === Action3.OPEN) {
              this.open();
            } else if (action === Action3.UPDATE) {
              this.update();
            } else if (action === Action3.CANCEL) {
              this.cancel();
            } else if (action === Action3.SELECT) {
              this.selectedItems = (payload === null || payload === void 0 ? void 0 : payload.selectedItems) || [];
              this.app.dispatch(select({ id: this.id, selectedItems: this.selectedItems }));
            } else if (action === Action3.SEARCH) {
              this.searchQuery = (payload === null || payload === void 0 ? void 0 : payload.searchQuery) || "";
              this.app.dispatch(search({ id: this.id, searchQuery: this.searchQuery }));
            } else if (action === Action3.LOAD_MORE) {
              this.loadMore();
            }
            return this;
          };
          unstable_Picker2.prototype.update = function() {
            this.app.dispatch(update(this.payload));
          };
          unstable_Picker2.prototype.open = function() {
            this.app.dispatch(open(this.payload));
          };
          unstable_Picker2.prototype.cancel = function() {
            this.app.dispatch(cancel({ id: this.id }));
          };
          unstable_Picker2.prototype.loadMore = function() {
            this.app.dispatch(loadMore(this.payload));
          };
          return unstable_Picker2;
        }(ActionSet_1.ActionSet)
      );
      exports.unstable_Picker = unstable_Picker;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/picker.js
  var require_picker = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/picker.js"(exports) {
      "use strict";
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = exports.validateProps = void 0;
      var Picker_1 = require_Picker();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Picker_1.Action;
      } });
      var type_validate_1 = require_type_validate();
      var utils_1 = require_utils();
      var resourceBadge = type_validate_1.matchesObject({
        content: type_validate_1.matchesString(),
        id: type_validate_1.matchesString(),
        progress: type_validate_1.matchesEnum(Picker_1.ALL_BADGE_PROGRESSES),
        status: type_validate_1.matchesEnum(Picker_1.ALL_BADGE_STATUSES)
      });
      var resourceMedia = type_validate_1.matchesObject({
        accessibilityLabel: type_validate_1.makeOptional(type_validate_1.matchesString()),
        alt: type_validate_1.makeOptional(type_validate_1.matchesString()),
        initials: type_validate_1.makeOptional(type_validate_1.matchesString()),
        kind: type_validate_1.makeOptional(type_validate_1.matchesEnum(Picker_1.ALL_MEDIA_KINDS)),
        name: type_validate_1.makeOptional(type_validate_1.matchesString()),
        source: type_validate_1.matchesString()
      });
      var sharedResourceSchema = {
        accessibilityLabel: type_validate_1.makeOptional(type_validate_1.matchesString()),
        badges: type_validate_1.makeOptional(type_validate_1.matchesArray(resourceBadge)),
        disabled: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        id: type_validate_1.matchesString(),
        loading: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        media: type_validate_1.makeOptional(resourceMedia),
        name: type_validate_1.makeOptional(type_validate_1.matchesString()),
        caption: type_validate_1.makeOptional(type_validate_1.matchesString()),
        selectable: type_validate_1.makeOptional(type_validate_1.matchesBoolean())
      };
      var resourceOption = type_validate_1.matchesObject(__assign({}, sharedResourceSchema));
      var resourceSelectionSchema = type_validate_1.matchesArray(type_validate_1.matchesObject(__assign(__assign({}, sharedResourceSchema), { options: type_validate_1.makeOptional(type_validate_1.matchesArray(resourceOption)) })));
      var resourceName = type_validate_1.matchesObject({
        plural: type_validate_1.matchesString(),
        singular: type_validate_1.matchesString()
      });
      var pickerOptions = type_validate_1.matchesObject({
        canLoadMore: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        emptySearchLabel: type_validate_1.makeOptional(type_validate_1.matchesObject({
          title: type_validate_1.matchesString(),
          description: type_validate_1.matchesString(),
          withIllustration: type_validate_1.matchesBoolean()
        })),
        items: type_validate_1.makeOptional(resourceSelectionSchema),
        loading: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        loadingMore: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        maxSelectable: type_validate_1.makeOptional(type_validate_1.matchesPositiveInteger()),
        primaryActionLabel: type_validate_1.makeOptional(type_validate_1.matchesString()),
        searchQuery: type_validate_1.makeOptional(type_validate_1.matchesString()),
        searchQueryPlaceholder: type_validate_1.makeOptional(type_validate_1.matchesString()),
        secondaryActionLabel: type_validate_1.makeOptional(type_validate_1.matchesString()),
        selectedItems: type_validate_1.makeOptional(type_validate_1.matchesArray(type_validate_1.matchesObject(sharedResourceSchema))),
        title: type_validate_1.makeOptional(type_validate_1.matchesString()),
        verticalAlignment: type_validate_1.makeOptional(type_validate_1.matchesEnum(Picker_1.ALL_RESOURCE_VERTICAL_ALIGNMENT)),
        allowEmptySelection: type_validate_1.makeOptional(type_validate_1.matchesBoolean()),
        resourceName: type_validate_1.makeOptional(resourceName)
      });
      var pickerActionSchema = type_validate_1.matchesObject({
        options: type_validate_1.makeOptional(resourceSelectionSchema)
      });
      var selectionSchema = type_validate_1.matchesObject({
        selectedItems: resourceSelectionSchema
      });
      var searchSchema = type_validate_1.matchesObject({
        searchQuery: type_validate_1.makeOptional(type_validate_1.matchesString())
      });
      function validateProps(props) {
        return type_validate_1.validate(props, pickerOptions);
      }
      exports.validateProps = validateProps;
      function validateAction(action) {
        switch (action.type) {
          case Picker_1.Action.UPDATE:
          case Picker_1.Action.OPEN:
            return type_validate_1.validate(action, utils_1.createActionValidator(Picker_1.Action, pickerActionSchema, false, true));
          case Picker_1.Action.SELECT:
            return type_validate_1.validate(action, utils_1.createActionValidator(Picker_1.Action, selectionSchema, true, true));
          case Picker_1.Action.SEARCH:
            return type_validate_1.validate(action, utils_1.createActionValidator(Picker_1.Action, searchSchema, true, true));
          case Picker_1.Action.CANCEL:
          case Picker_1.Action.LOAD_MORE:
            return type_validate_1.validate(action, utils_1.createActionValidator(Picker_1.Action));
          default:
            return type_validate_1.validate(action, utils_1.createActionValidator(Picker_1.Action));
        }
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/validate/actions/index.js
  var require_actions2 = __commonJS({
    "node_modules/@shopify/app-bridge-core/validate/actions/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unstable_Picker = exports.Toast = exports.TitleBar = exports.ResourcePicker = exports.Navigation = exports.Modal = exports.Menu = exports.Link = exports.LeaveConfirmation = exports.FeedbackModal = exports.ContextualSaveBar = exports.ButtonGroup = exports.Button = void 0;
      var Button2 = __importStar(require_button());
      exports.Button = Button2;
      var ButtonGroup2 = __importStar(require_buttonGroup());
      exports.ButtonGroup = ButtonGroup2;
      var ContextualSaveBar = __importStar(require_contextualSaveBar());
      exports.ContextualSaveBar = ContextualSaveBar;
      var FeedbackModal = __importStar(require_feedbackModal());
      exports.FeedbackModal = FeedbackModal;
      var LeaveConfirmation = __importStar(require_leaveConfirmation());
      exports.LeaveConfirmation = LeaveConfirmation;
      var Link2 = __importStar(require_link());
      exports.Link = Link2;
      var Menu = __importStar(require_menu());
      exports.Menu = Menu;
      var Modal3 = __importStar(require_modal());
      exports.Modal = Modal3;
      var Navigation = __importStar(require_navigation());
      exports.Navigation = Navigation;
      var ResourcePicker = __importStar(require_resourcePicker());
      exports.ResourcePicker = ResourcePicker;
      var TitleBar = __importStar(require_titleBar());
      exports.TitleBar = TitleBar;
      var Toast = __importStar(require_toast());
      exports.Toast = Toast;
      var unstable_Picker = __importStar(require_picker());
      exports.unstable_Picker = unstable_Picker;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Cart/index.js
  var require_Cart = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Cart/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Cart = exports.setLineItemProperties = exports.removeLineItemDiscount = exports.setLineItemDiscount = exports.removeLineItem = exports.updateLineItem = exports.addLineItem = exports.removeProperties = exports.setProperties = exports.setDiscount = exports.updateCustomerAddress = exports.addCustomerAddress = exports.setCustomer = exports.update = exports.fetch = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["FETCH"] = "APP::CART::FETCH";
        Action4["UPDATE"] = "APP::CART::UPDATE";
        Action4["SET_CUSTOMER"] = "APP::CART::SET_CUSTOMER";
        Action4["REMOVE_CUSTOMER"] = "APP::CART::REMOVE_CUSTOMER";
        Action4["ADD_CUSTOMER_ADDRESS"] = "APP::CART::ADD_CUSTOMER_ADDRESS";
        Action4["UPDATE_CUSTOMER_ADDRESS"] = "APP::CART::UPDATE_CUSTOMER_ADDRESS";
        Action4["SET_DISCOUNT"] = "APP::CART::SET_DISCOUNT";
        Action4["REMOVE_DISCOUNT"] = "APP::CART::REMOVE_DISCOUNT";
        Action4["SET_PROPERTIES"] = "APP::CART::SET_PROPERTIES";
        Action4["REMOVE_PROPERTIES"] = "APP::CART::REMOVE_PROPERTIES";
        Action4["CLEAR"] = "APP::CART::CLEAR";
        Action4["ADD_LINE_ITEM"] = "APP::CART::ADD_LINE_ITEM";
        Action4["UPDATE_LINE_ITEM"] = "APP::CART::UPDATE_LINE_ITEM";
        Action4["REMOVE_LINE_ITEM"] = "APP::CART::REMOVE_LINE_ITEM";
        Action4["SET_LINE_ITEM_DISCOUNT"] = "APP::CART::SET_LINE_ITEM_DISCOUNT";
        Action4["REMOVE_LINE_ITEM_DISCOUNT"] = "APP::CART::REMOVE_LINE_ITEM_DISCOUNT";
        Action4["SET_LINE_ITEM_PROPERTIES"] = "APP::CART::SET_LINE_ITEM_PROPERTIES";
        Action4["REMOVE_LINE_ITEM_PROPERTIES"] = "APP::CART::REMOVE_LINE_ITEM_PROPERTIES";
      })(Action3 = exports.Action || (exports.Action = {}));
      function createCartAction(type, payload) {
        if (payload === void 0) {
          payload = {};
        }
        return helper_1.actionWrapper({
          group: types_1.Group.Cart,
          type,
          payload
        });
      }
      function fetch3() {
        return createCartAction(Action3.FETCH);
      }
      exports.fetch = fetch3;
      function update(payload) {
        return createCartAction(Action3.UPDATE, payload);
      }
      exports.update = update;
      function setCustomer(payload) {
        return createCartAction(Action3.SET_CUSTOMER, payload);
      }
      exports.setCustomer = setCustomer;
      function addCustomerAddress(payload) {
        return createCartAction(Action3.ADD_CUSTOMER_ADDRESS, payload);
      }
      exports.addCustomerAddress = addCustomerAddress;
      function updateCustomerAddress(payload) {
        return createCartAction(Action3.UPDATE_CUSTOMER_ADDRESS, payload);
      }
      exports.updateCustomerAddress = updateCustomerAddress;
      function setDiscount(payload) {
        return createCartAction(Action3.SET_DISCOUNT, payload);
      }
      exports.setDiscount = setDiscount;
      function setProperties(payload) {
        return createCartAction(Action3.SET_PROPERTIES, payload);
      }
      exports.setProperties = setProperties;
      function removeProperties(payload) {
        return createCartAction(Action3.REMOVE_PROPERTIES, payload);
      }
      exports.removeProperties = removeProperties;
      function addLineItem(payload) {
        return createCartAction(Action3.ADD_LINE_ITEM, payload);
      }
      exports.addLineItem = addLineItem;
      function updateLineItem(payload) {
        return createCartAction(Action3.UPDATE_LINE_ITEM, payload);
      }
      exports.updateLineItem = updateLineItem;
      function removeLineItem(payload) {
        return createCartAction(Action3.REMOVE_LINE_ITEM, payload);
      }
      exports.removeLineItem = removeLineItem;
      function setLineItemDiscount(payload) {
        return createCartAction(Action3.SET_LINE_ITEM_DISCOUNT, payload);
      }
      exports.setLineItemDiscount = setLineItemDiscount;
      function removeLineItemDiscount(payload) {
        return createCartAction(Action3.REMOVE_LINE_ITEM_DISCOUNT, payload);
      }
      exports.removeLineItemDiscount = removeLineItemDiscount;
      function setLineItemProperties(payload) {
        return createCartAction(Action3.SET_LINE_ITEM_PROPERTIES, payload);
      }
      exports.setLineItemProperties = setLineItemProperties;
      var Cart = (
        /** @class */
        function(_super) {
          __extends(Cart2, _super);
          function Cart2(app, options) {
            return _super.call(this, app, types_1.Group.Cart, types_1.Group.Cart, options ? options.id : void 0) || this;
          }
          Cart2.prototype.dispatch = function(action, payload) {
            switch (action) {
              case Action3.FETCH:
                this.dispatchCartAction(Action3.FETCH);
                break;
              case Action3.UPDATE:
                this.dispatchCartAction(Action3.UPDATE, payload);
                break;
              case Action3.SET_CUSTOMER:
                this.dispatchCartAction(Action3.SET_CUSTOMER, payload);
                break;
              case Action3.REMOVE_CUSTOMER:
                this.dispatchCartAction(Action3.REMOVE_CUSTOMER, payload);
                break;
              case Action3.ADD_CUSTOMER_ADDRESS:
                this.dispatchCartAction(Action3.ADD_CUSTOMER_ADDRESS, payload);
                break;
              case Action3.UPDATE_CUSTOMER_ADDRESS:
                this.dispatchCartAction(Action3.UPDATE_CUSTOMER_ADDRESS, payload);
                break;
              case Action3.SET_DISCOUNT:
                this.dispatchCartAction(Action3.SET_DISCOUNT, payload);
                break;
              case Action3.REMOVE_DISCOUNT:
                this.dispatchCartAction(Action3.REMOVE_DISCOUNT, payload);
                break;
              case Action3.SET_PROPERTIES:
                this.dispatchCartAction(Action3.SET_PROPERTIES, payload);
                break;
              case Action3.REMOVE_PROPERTIES:
                this.dispatchCartAction(Action3.REMOVE_PROPERTIES, payload);
                break;
              case Action3.CLEAR:
                this.dispatchCartAction(Action3.CLEAR, payload);
                break;
              case Action3.ADD_LINE_ITEM:
                this.dispatchCartAction(Action3.ADD_LINE_ITEM, payload);
                break;
              case Action3.UPDATE_LINE_ITEM:
                this.dispatchCartAction(Action3.UPDATE_LINE_ITEM, payload);
                break;
              case Action3.REMOVE_LINE_ITEM:
                this.dispatchCartAction(Action3.REMOVE_LINE_ITEM, payload);
                break;
              case Action3.SET_LINE_ITEM_DISCOUNT:
                this.dispatchCartAction(Action3.SET_LINE_ITEM_DISCOUNT, payload);
                break;
              case Action3.REMOVE_LINE_ITEM_DISCOUNT:
                this.dispatchCartAction(Action3.REMOVE_LINE_ITEM_DISCOUNT, payload);
                break;
              case Action3.SET_LINE_ITEM_PROPERTIES:
                this.dispatchCartAction(Action3.SET_LINE_ITEM_PROPERTIES, payload);
                break;
              case Action3.REMOVE_LINE_ITEM_PROPERTIES:
                this.dispatchCartAction(Action3.REMOVE_LINE_ITEM_PROPERTIES, payload);
                break;
            }
            return this;
          };
          Cart2.prototype.dispatchCartAction = function(type, payload) {
            this.app.dispatch(createCartAction(type, __assign(__assign({}, payload), { id: this.id })));
          };
          return Cart2;
        }(ActionSet_1.ActionSet)
      );
      exports.Cart = Cart;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Cart/index.js
  var require_Cart2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Cart/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.setLineItemProperties = exports.removeLineItemDiscount = exports.setLineItemDiscount = exports.removeLineItem = exports.updateLineItem = exports.addLineItem = exports.removeProperties = exports.setProperties = exports.setDiscount = exports.updateCustomerAddress = exports.addCustomerAddress = exports.setCustomer = exports.update = exports.fetch = exports.Cart = exports.Action = void 0;
      var Cart_1 = require_Cart();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Cart_1.Action;
      } });
      Object.defineProperty(exports, "Cart", { enumerable: true, get: function() {
        return Cart_1.Cart;
      } });
      Object.defineProperty(exports, "fetch", { enumerable: true, get: function() {
        return Cart_1.fetch;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return Cart_1.update;
      } });
      Object.defineProperty(exports, "setCustomer", { enumerable: true, get: function() {
        return Cart_1.setCustomer;
      } });
      Object.defineProperty(exports, "addCustomerAddress", { enumerable: true, get: function() {
        return Cart_1.addCustomerAddress;
      } });
      Object.defineProperty(exports, "updateCustomerAddress", { enumerable: true, get: function() {
        return Cart_1.updateCustomerAddress;
      } });
      Object.defineProperty(exports, "setDiscount", { enumerable: true, get: function() {
        return Cart_1.setDiscount;
      } });
      Object.defineProperty(exports, "setProperties", { enumerable: true, get: function() {
        return Cart_1.setProperties;
      } });
      Object.defineProperty(exports, "removeProperties", { enumerable: true, get: function() {
        return Cart_1.removeProperties;
      } });
      Object.defineProperty(exports, "addLineItem", { enumerable: true, get: function() {
        return Cart_1.addLineItem;
      } });
      Object.defineProperty(exports, "updateLineItem", { enumerable: true, get: function() {
        return Cart_1.updateLineItem;
      } });
      Object.defineProperty(exports, "removeLineItem", { enumerable: true, get: function() {
        return Cart_1.removeLineItem;
      } });
      Object.defineProperty(exports, "setLineItemDiscount", { enumerable: true, get: function() {
        return Cart_1.setLineItemDiscount;
      } });
      Object.defineProperty(exports, "removeLineItemDiscount", { enumerable: true, get: function() {
        return Cart_1.removeLineItemDiscount;
      } });
      Object.defineProperty(exports, "setLineItemProperties", { enumerable: true, get: function() {
        return Cart_1.setLineItemProperties;
      } });
      function create(app, options) {
        return new Cart_1.Cart(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/validate/type-validate.js
  var require_type_validate2 = __commonJS({
    "node_modules/@shopify/app-bridge/validate/type-validate.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.matchesPositiveNumber = exports.TYPE_ERROR = exports.oneOf = exports.matchesArray = exports.validate = exports.matchesPositiveInteger = exports.matchesBoolean = exports.makeOptional = exports.matchesString = exports.matchesObject = exports.matchesEnum = exports.composeSchemas = void 0;
      var type_validate_1 = require_type_validate();
      Object.defineProperty(exports, "TYPE_ERROR", { enumerable: true, get: function() {
        return type_validate_1.TYPE_ERROR;
      } });
      var type_validate_2 = require_type_validate();
      Object.defineProperty(exports, "composeSchemas", { enumerable: true, get: function() {
        return type_validate_2.composeSchemas;
      } });
      Object.defineProperty(exports, "matchesEnum", { enumerable: true, get: function() {
        return type_validate_2.matchesEnum;
      } });
      Object.defineProperty(exports, "matchesObject", { enumerable: true, get: function() {
        return type_validate_2.matchesObject;
      } });
      Object.defineProperty(exports, "matchesString", { enumerable: true, get: function() {
        return type_validate_2.matchesString;
      } });
      Object.defineProperty(exports, "makeOptional", { enumerable: true, get: function() {
        return type_validate_2.makeOptional;
      } });
      Object.defineProperty(exports, "matchesBoolean", { enumerable: true, get: function() {
        return type_validate_2.matchesBoolean;
      } });
      Object.defineProperty(exports, "matchesPositiveInteger", { enumerable: true, get: function() {
        return type_validate_2.matchesPositiveInteger;
      } });
      Object.defineProperty(exports, "validate", { enumerable: true, get: function() {
        return type_validate_2.validate;
      } });
      Object.defineProperty(exports, "matchesArray", { enumerable: true, get: function() {
        return type_validate_2.matchesArray;
      } });
      Object.defineProperty(exports, "oneOf", { enumerable: true, get: function() {
        return type_validate_2.oneOf;
      } });
      function constructErrors(value, error2, options) {
        if (options === void 0) {
          options = { message: void 0 };
        }
        return [
          {
            value,
            error: error2,
            message: typeof options.message === "function" ? options.message(error2, value) : options.message
          }
        ];
      }
      function matchesPositiveNumber(options) {
        return function(value) {
          return Number.isNaN(value) || !Number.isFinite(value) || value < 0 ? constructErrors(value, type_validate_1.TYPE_ERROR + "_number", options) : void 0;
        };
      }
      exports.matchesPositiveNumber = matchesPositiveNumber;
    }
  });

  // node_modules/@shopify/app-bridge/validate/utils.js
  var require_utils2 = __commonJS({
    "node_modules/@shopify/app-bridge/validate/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mixedAppClientCheck = exports.actionMessage = exports.relativePathSchema = exports.relativeUrlSchema = exports.isValidRelativePath = exports.createActionValidator = void 0;
      var utils_1 = require_utils();
      Object.defineProperty(exports, "createActionValidator", { enumerable: true, get: function() {
        return utils_1.createActionValidator;
      } });
      Object.defineProperty(exports, "isValidRelativePath", { enumerable: true, get: function() {
        return utils_1.isValidRelativePath;
      } });
      Object.defineProperty(exports, "relativeUrlSchema", { enumerable: true, get: function() {
        return utils_1.relativeUrlSchema;
      } });
      Object.defineProperty(exports, "relativePathSchema", { enumerable: true, get: function() {
        return utils_1.relativePathSchema;
      } });
      function actionMessage(errors) {
        return errors.map(function(err) {
          var path = err.path, error2 = err.error, message = err.message, value = err.value;
          var valueStr = typeof value === "object" ? JSON.stringify(value) : value;
          return "`" + error2 + "` thrown for" + (path ? " path: " + path + " and" : "") + " value: `" + valueStr + "`" + (message ? " with message: " + message : "");
        }).join(" | ");
      }
      exports.actionMessage = actionMessage;
      function mixedAppClientCheck(window2) {
        window2.addEventListener("DOMContentLoaded", function() {
          if (!Object.prototype.hasOwnProperty.call(window2, "ShopifyApp")) {
            return;
          }
          console.error("%cException Detected \u{1F6AB}\n\n%cAn instance of the EASDK client was detected while initializing Shopify App Bridge. Using Shopify App Bridge and the EASDK simultaneously is not supported.\n\nIf you're migrating an existing app that was built with the shopify_app gem, then the EASDK client might have been included in the home page view template. In this case, remove it from your app before initializing Shopify App Bridge again.", "font-size: large;", "font-size: normal;");
        }, { once: true });
      }
      exports.mixedAppClientCheck = mixedAppClientCheck;
    }
  });

  // node_modules/@shopify/app-bridge/validate/actions/cart.js
  var require_cart = __commonJS({
    "node_modules/@shopify/app-bridge/validate/actions/cart.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = void 0;
      var Cart_1 = require_Cart2();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Cart_1.Action;
      } });
      var type_validate_1 = require_type_validate2();
      var utils_1 = require_utils2();
      var addressSchema = type_validate_1.matchesObject({
        address1: type_validate_1.makeOptional(type_validate_1.matchesString()),
        address2: type_validate_1.makeOptional(type_validate_1.matchesString()),
        city: type_validate_1.makeOptional(type_validate_1.matchesString()),
        company: type_validate_1.makeOptional(type_validate_1.matchesString()),
        firstName: type_validate_1.makeOptional(type_validate_1.matchesString()),
        lastName: type_validate_1.makeOptional(type_validate_1.matchesString()),
        phone: type_validate_1.makeOptional(type_validate_1.matchesString()),
        province: type_validate_1.makeOptional(type_validate_1.matchesString()),
        country: type_validate_1.makeOptional(type_validate_1.matchesString()),
        zip: type_validate_1.makeOptional(type_validate_1.matchesString()),
        name: type_validate_1.makeOptional(type_validate_1.matchesString()),
        provinceCode: type_validate_1.makeOptional(type_validate_1.matchesString()),
        countryCode: type_validate_1.makeOptional(type_validate_1.matchesString())
      });
      var discountSchema = type_validate_1.matchesObject({
        amount: type_validate_1.makeOptional(type_validate_1.matchesPositiveInteger()),
        discountDescription: type_validate_1.makeOptional(type_validate_1.matchesString()),
        type: type_validate_1.makeOptional(type_validate_1.matchesString()),
        discountCode: type_validate_1.makeOptional(type_validate_1.matchesString())
      });
      var discountAmount = type_validate_1.matchesObject({
        amount: type_validate_1.matchesPositiveNumber(),
        discountDescription: type_validate_1.makeOptional(type_validate_1.matchesString()),
        type: type_validate_1.makeOptional(type_validate_1.matchesString())
      });
      var discountCode = type_validate_1.matchesObject({
        discountCode: type_validate_1.matchesString()
      });
      var lineItemSchema = type_validate_1.matchesObject({
        price: type_validate_1.makeOptional(type_validate_1.matchesPositiveNumber()),
        quantity: type_validate_1.makeOptional(type_validate_1.matchesPositiveInteger()),
        title: type_validate_1.makeOptional(type_validate_1.matchesString()),
        variantId: type_validate_1.makeOptional(type_validate_1.matchesPositiveInteger()),
        discount: type_validate_1.makeOptional(discountAmount)
      });
      var updateLineItemSchema = type_validate_1.matchesObject({
        quantity: type_validate_1.matchesPositiveInteger()
      });
      var customerSchema = type_validate_1.matchesObject({
        id: type_validate_1.makeOptional(type_validate_1.matchesPositiveInteger()),
        email: type_validate_1.makeOptional(type_validate_1.matchesString()),
        firstName: type_validate_1.makeOptional(type_validate_1.matchesString()),
        lastName: type_validate_1.makeOptional(type_validate_1.matchesString()),
        note: type_validate_1.makeOptional(type_validate_1.matchesString()),
        addresses: type_validate_1.makeOptional(type_validate_1.matchesArray(addressSchema))
      });
      var noteSchema = type_validate_1.matchesObject({
        name: type_validate_1.matchesString(),
        value: type_validate_1.matchesString()
      });
      var cartSchema = type_validate_1.matchesObject({
        cartDiscount: type_validate_1.makeOptional(discountSchema),
        customer: type_validate_1.makeOptional(customerSchema),
        grandTotal: type_validate_1.makeOptional(type_validate_1.matchesString()),
        lineItems: type_validate_1.makeOptional(type_validate_1.matchesArray(lineItemSchema)),
        noteAttributes: type_validate_1.makeOptional(type_validate_1.matchesArray(noteSchema)),
        subTotal: type_validate_1.makeOptional(type_validate_1.matchesString()),
        taxTotal: type_validate_1.makeOptional(type_validate_1.matchesString())
      });
      var propertiesSchema = type_validate_1.composeSchemas(type_validate_1.matchesObject({}), function(value) {
        var validator = type_validate_1.matchesString();
        var schema = Object.keys(value).reduce(function(acc, key) {
          acc[key] = validator;
          return acc;
        }, {});
        return type_validate_1.validate(value, type_validate_1.matchesObject(schema));
      });
      var matchesStringArray = type_validate_1.matchesArray(type_validate_1.matchesString());
      function createDataValidator(data2) {
        return utils_1.createActionValidator(Cart_1.Action, data2 ? type_validate_1.matchesObject({ data: data2 }) : void 0, true, true);
      }
      function createDataValidatorWithIndex(data2) {
        var indexSchema = type_validate_1.matchesObject({ index: type_validate_1.matchesPositiveInteger() });
        if (data2) {
          var dataSchema = type_validate_1.matchesObject({ data: data2 });
          return utils_1.createActionValidator(Cart_1.Action, type_validate_1.composeSchemas(indexSchema, dataSchema), true, true);
        }
        return utils_1.createActionValidator(Cart_1.Action, indexSchema, true, true);
      }
      function getDiscountSchema(data2) {
        if (data2.amount) {
          return discountAmount;
        }
        return discountCode;
      }
      function validateAction(action) {
        switch (action.type) {
          case Cart_1.Action.UPDATE:
            return type_validate_1.validate(action, createDataValidator(cartSchema));
          case Cart_1.Action.SET_CUSTOMER:
            return type_validate_1.validate(action, createDataValidator(customerSchema));
          case Cart_1.Action.ADD_CUSTOMER_ADDRESS:
            return type_validate_1.validate(action, createDataValidator(addressSchema));
          case Cart_1.Action.UPDATE_CUSTOMER_ADDRESS:
            return type_validate_1.validate(action, createDataValidatorWithIndex(addressSchema));
          case Cart_1.Action.SET_DISCOUNT:
            return type_validate_1.validate(action, createDataValidator(getDiscountSchema(action.payload.data)));
          case Cart_1.Action.SET_PROPERTIES:
            return type_validate_1.validate(action, createDataValidator(propertiesSchema));
          case Cart_1.Action.REMOVE_PROPERTIES:
            return type_validate_1.validate(action, createDataValidator(matchesStringArray));
          case Cart_1.Action.ADD_LINE_ITEM:
            return type_validate_1.validate(action, createDataValidator(lineItemSchema));
          case Cart_1.Action.UPDATE_LINE_ITEM:
            return type_validate_1.validate(action, createDataValidatorWithIndex(updateLineItemSchema));
          case Cart_1.Action.REMOVE_LINE_ITEM:
            return type_validate_1.validate(action, createDataValidatorWithIndex());
          case Cart_1.Action.SET_LINE_ITEM_DISCOUNT:
            return type_validate_1.validate(action, createDataValidatorWithIndex(discountAmount));
          case Cart_1.Action.REMOVE_LINE_ITEM_DISCOUNT:
            return type_validate_1.validate(action, createDataValidatorWithIndex());
          case Cart_1.Action.SET_LINE_ITEM_PROPERTIES:
            return type_validate_1.validate(action, createDataValidatorWithIndex(propertiesSchema));
          case Cart_1.Action.REMOVE_LINE_ITEM_PROPERTIES:
            return type_validate_1.validate(action, createDataValidatorWithIndex(matchesStringArray));
          case Cart_1.Action.FETCH:
          case Cart_1.Action.REMOVE_CUSTOMER:
          case Cart_1.Action.REMOVE_DISCOUNT:
          case Cart_1.Action.CLEAR:
          default:
            return type_validate_1.validate(action, utils_1.createActionValidator(Cart_1.Action, void 0, false, true));
        }
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Fullscreen/index.js
  var require_Fullscreen = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Fullscreen/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Fullscreen = exports.exit = exports.enter = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["ENTER"] = "APP::FULLSCREEN::ENTER";
        Action4["EXIT"] = "APP::FULLSCREEN::EXIT";
      })(Action3 = exports.Action || (exports.Action = {}));
      function enter() {
        return helper_1.actionWrapper({
          group: types_1.Group.Fullscreen,
          type: Action3.ENTER
        });
      }
      exports.enter = enter;
      function exit() {
        return helper_1.actionWrapper({
          group: types_1.Group.Fullscreen,
          type: Action3.EXIT
        });
      }
      exports.exit = exit;
      var Fullscreen = (
        /** @class */
        function(_super) {
          __extends(Fullscreen2, _super);
          function Fullscreen2(app) {
            return _super.call(this, app, types_1.Group.Fullscreen, types_1.Group.Fullscreen) || this;
          }
          Object.defineProperty(Fullscreen2.prototype, "payload", {
            /**
             * Returns the action set payload
             */
            get: function() {
              return { id: this.id };
            },
            enumerable: false,
            configurable: true
          });
          Fullscreen2.prototype.dispatch = function(action) {
            this.app.dispatch(helper_1.actionWrapper({
              group: this.group,
              type: action,
              payload: this.payload
            }));
            return this;
          };
          return Fullscreen2;
        }(ActionSet_1.ActionSet)
      );
      exports.Fullscreen = Fullscreen;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Fullscreen/index.js
  var require_Fullscreen2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Fullscreen/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.Action = exports.Fullscreen = exports.exit = exports.enter = void 0;
      var Fullscreen_1 = require_Fullscreen();
      Object.defineProperty(exports, "Fullscreen", { enumerable: true, get: function() {
        return Fullscreen_1.Fullscreen;
      } });
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Fullscreen_1.Action;
      } });
      var Fullscreen_2 = require_Fullscreen();
      Object.defineProperty(exports, "enter", { enumerable: true, get: function() {
        return Fullscreen_2.enter;
      } });
      Object.defineProperty(exports, "exit", { enumerable: true, get: function() {
        return Fullscreen_2.exit;
      } });
      function create(app) {
        return new Fullscreen_1.Fullscreen(app);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/validate/actions/fullscreen.js
  var require_fullscreen = __commonJS({
    "node_modules/@shopify/app-bridge/validate/actions/fullscreen.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = void 0;
      var Fullscreen_1 = require_Fullscreen2();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Fullscreen_1.Action;
      } });
      var type_validate_1 = require_type_validate2();
      var utils_1 = require_utils2();
      function validateAction(action) {
        var validator = utils_1.createActionValidator(Fullscreen_1.Action);
        return type_validate_1.validate(action, validator);
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Loading/index.js
  var require_Loading = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Loading/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Loading = exports.stop = exports.start = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["START"] = "APP::LOADING::START";
        Action4["STOP"] = "APP::LOADING::STOP";
      })(Action3 = exports.Action || (exports.Action = {}));
      function start(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Loading,
          type: Action3.START
        });
      }
      exports.start = start;
      function stop(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.Loading,
          type: Action3.STOP
        });
      }
      exports.stop = stop;
      var Loading = (
        /** @class */
        function(_super) {
          __extends(Loading2, _super);
          function Loading2(app) {
            return _super.call(this, app, types_1.Group.Loading, types_1.Group.Loading) || this;
          }
          Object.defineProperty(Loading2.prototype, "payload", {
            get: function() {
              return { id: this.id };
            },
            enumerable: false,
            configurable: true
          });
          Loading2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.START:
                this.app.dispatch(start(this.payload));
                break;
              case Action3.STOP:
                this.app.dispatch(stop(this.payload));
                break;
            }
            return this;
          };
          return Loading2;
        }(ActionSet_1.ActionSet)
      );
      exports.Loading = Loading;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Loading/index.js
  var require_Loading2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Loading/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.stop = exports.start = exports.Action = exports.Loading = void 0;
      var Loading_1 = require_Loading();
      Object.defineProperty(exports, "Loading", { enumerable: true, get: function() {
        return Loading_1.Loading;
      } });
      var Loading_2 = require_Loading();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Loading_2.Action;
      } });
      Object.defineProperty(exports, "start", { enumerable: true, get: function() {
        return Loading_2.start;
      } });
      Object.defineProperty(exports, "stop", { enumerable: true, get: function() {
        return Loading_2.stop;
      } });
      function create(app) {
        return new Loading_1.Loading(app);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/validate/actions/loading.js
  var require_loading = __commonJS({
    "node_modules/@shopify/app-bridge/validate/actions/loading.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = void 0;
      var Loading_1 = require_Loading2();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Loading_1.Action;
      } });
      var type_validate_1 = require_type_validate2();
      var utils_1 = require_utils2();
      function validateAction(action) {
        var validator = utils_1.createActionValidator(Loading_1.Action);
        return type_validate_1.validate(action, validator);
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge/validate/actions/print.js
  var require_print2 = __commonJS({
    "node_modules/@shopify/app-bridge/validate/actions/print.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = void 0;
      var Print_1 = require_Print2();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Print_1.Action;
      } });
      var type_validate_1 = require_type_validate2();
      var utils_1 = require_utils2();
      function validateAction(action) {
        return type_validate_1.validate(action, utils_1.createActionValidator(Print_1.Action));
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Scanner/index.js
  var require_Scanner = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Scanner/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.capture = exports.openCamera = exports.Scanner = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["OPEN_CAMERA"] = "APP::SCANNER::OPEN::CAMERA";
        Action4["CAPTURE"] = "APP::SCANNER::CAPTURE";
      })(Action3 = exports.Action || (exports.Action = {}));
      var Scanner = (
        /** @class */
        function(_super) {
          __extends(Scanner2, _super);
          function Scanner2(app, options) {
            return _super.call(this, app, types_1.Group.Scanner, types_1.Group.Scanner, options ? options.id : void 0) || this;
          }
          Scanner2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.OPEN_CAMERA:
                this.dispatchScannerAction(Action3.OPEN_CAMERA);
                break;
            }
            return this;
          };
          Scanner2.prototype.dispatchScannerAction = function(type) {
            this.app.dispatch(helper_1.actionWrapper({
              type,
              group: types_1.Group.Scanner,
              payload: {
                id: this.id
              }
            }));
          };
          return Scanner2;
        }(ActionSet_1.ActionSet)
      );
      exports.Scanner = Scanner;
      function openCamera() {
        return helper_1.actionWrapper({
          group: types_1.Group.Scanner,
          type: Action3.OPEN_CAMERA
        });
      }
      exports.openCamera = openCamera;
      function capture(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.Scanner,
          type: Action3.CAPTURE,
          payload
        });
      }
      exports.capture = capture;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Scanner/index.js
  var require_Scanner2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Scanner/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.capture = exports.openCamera = exports.Scanner = exports.Action = void 0;
      var Scanner_1 = require_Scanner();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Scanner_1.Action;
      } });
      Object.defineProperty(exports, "Scanner", { enumerable: true, get: function() {
        return Scanner_1.Scanner;
      } });
      Object.defineProperty(exports, "openCamera", { enumerable: true, get: function() {
        return Scanner_1.openCamera;
      } });
      Object.defineProperty(exports, "capture", { enumerable: true, get: function() {
        return Scanner_1.capture;
      } });
      function create(app, options) {
        return new Scanner_1.Scanner(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/validate/actions/scanner.js
  var require_scanner = __commonJS({
    "node_modules/@shopify/app-bridge/validate/actions/scanner.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = exports.validateAction = void 0;
      var Scanner_1 = require_Scanner2();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Scanner_1.Action;
      } });
      var type_validate_1 = require_type_validate2();
      var utils_1 = require_utils2();
      function validateAction(action) {
        return type_validate_1.validate(action, utils_1.createActionValidator(Scanner_1.Action));
      }
      exports.validateAction = validateAction;
    }
  });

  // node_modules/@shopify/app-bridge/validate/actions/index.js
  var require_actions3 = __commonJS({
    "node_modules/@shopify/app-bridge/validate/actions/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unstable_Picker = exports.Toast = exports.TitleBar = exports.Scanner = exports.ResourcePicker = exports.Print = exports.Navigation = exports.Modal = exports.Menu = exports.Loading = exports.Link = exports.LeaveConfirmation = exports.Fullscreen = exports.FeedbackModal = exports.ContextualSaveBar = exports.Cart = exports.ButtonGroup = exports.Button = void 0;
      var actions_1 = require_actions2();
      Object.defineProperty(exports, "Button", { enumerable: true, get: function() {
        return actions_1.Button;
      } });
      Object.defineProperty(exports, "ButtonGroup", { enumerable: true, get: function() {
        return actions_1.ButtonGroup;
      } });
      Object.defineProperty(exports, "ContextualSaveBar", { enumerable: true, get: function() {
        return actions_1.ContextualSaveBar;
      } });
      Object.defineProperty(exports, "FeedbackModal", { enumerable: true, get: function() {
        return actions_1.FeedbackModal;
      } });
      Object.defineProperty(exports, "LeaveConfirmation", { enumerable: true, get: function() {
        return actions_1.LeaveConfirmation;
      } });
      Object.defineProperty(exports, "Link", { enumerable: true, get: function() {
        return actions_1.Link;
      } });
      Object.defineProperty(exports, "Menu", { enumerable: true, get: function() {
        return actions_1.Menu;
      } });
      Object.defineProperty(exports, "Modal", { enumerable: true, get: function() {
        return actions_1.Modal;
      } });
      Object.defineProperty(exports, "Navigation", { enumerable: true, get: function() {
        return actions_1.Navigation;
      } });
      Object.defineProperty(exports, "ResourcePicker", { enumerable: true, get: function() {
        return actions_1.ResourcePicker;
      } });
      Object.defineProperty(exports, "TitleBar", { enumerable: true, get: function() {
        return actions_1.TitleBar;
      } });
      Object.defineProperty(exports, "Toast", { enumerable: true, get: function() {
        return actions_1.Toast;
      } });
      Object.defineProperty(exports, "unstable_Picker", { enumerable: true, get: function() {
        return actions_1.unstable_Picker;
      } });
      var Cart = __importStar(require_cart());
      exports.Cart = Cart;
      var Fullscreen = __importStar(require_fullscreen());
      exports.Fullscreen = Fullscreen;
      var Loading = __importStar(require_loading());
      exports.Loading = Loading;
      var Print = __importStar(require_print2());
      exports.Print = Print;
      var Scanner = __importStar(require_scanner());
      exports.Scanner = Scanner;
    }
  });

  // node_modules/@shopify/app-bridge/validate/validator.js
  var require_validator2 = __commonJS({
    "node_modules/@shopify/app-bridge/validate/validator.js"(exports) {
      "use strict";
      var __spreadArray = exports && exports.__spreadArray || function(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
          to[j] = from[i];
        return to;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.validatorMiddleware = exports.connectValidatorToDispatchHook = exports.connectValidatorToUpdateHook = void 0;
      var client_1 = require_client2();
      var types_1 = require_types2();
      var Error_1 = require_Error2();
      var helper_1 = require_helper2();
      var actions_1 = require_actions3();
      var type_validate_1 = require_type_validate2();
      var utils_1 = require_utils2();
      function updateValidator(localOrigin, group, options) {
        switch (group) {
          case types_1.Group.Button:
            return actions_1.Button.validateProps(options);
          case types_1.Group.ButtonGroup:
            return actions_1.ButtonGroup.validateProps(options);
          case types_1.Group.Modal:
            return actions_1.Modal.validateProps(options, localOrigin);
          case types_1.Group.Menu:
            return actions_1.Menu.validateProps(options);
          case types_1.Group.Link:
            return actions_1.Link.validateProps(options);
          case types_1.Group.TitleBar:
            return actions_1.TitleBar.validateProps(options);
          case types_1.Group.ResourcePicker:
            return actions_1.ResourcePicker.validateProps(options);
          case types_1.Group.Toast:
            return actions_1.Toast.validateProps(options);
          case types_1.Group.ContextualSaveBar:
            return actions_1.ContextualSaveBar.validateProps(options);
          case types_1.Group.unstable_Picker:
            return actions_1.unstable_Picker.validateProps(options);
        }
      }
      function dispatchPayloadValidator(action, localOrigin) {
        switch (action.group) {
          case types_1.Group.Button:
            return actions_1.Button.validateAction(action);
          case types_1.Group.ButtonGroup:
            return actions_1.ButtonGroup.validateAction(action);
          case types_1.Group.Modal:
            return actions_1.Modal.validateAction(action, localOrigin);
          case types_1.Group.Menu:
            return actions_1.Menu.validateAction(action);
          case types_1.Group.TitleBar:
            return actions_1.TitleBar.validateAction(action);
          case types_1.Group.ResourcePicker:
            return actions_1.ResourcePicker.validateAction(action);
          case types_1.Group.Loading:
            return actions_1.Loading.validateAction(action);
          case types_1.Group.Toast:
            return actions_1.Toast.validateAction(action);
          case types_1.Group.Cart:
            return actions_1.Cart.validateAction(action);
          case types_1.Group.Navigation:
            return actions_1.Navigation.validateAction(action);
          case types_1.Group.Print:
            return actions_1.Print.validateAction(action);
          case types_1.Group.Scanner:
            return actions_1.Scanner.validateAction(action);
          case types_1.Group.Fullscreen:
            return actions_1.Fullscreen.validateAction(action);
          case types_1.Group.ContextualSaveBar:
            return actions_1.ContextualSaveBar.validateAction(action);
          case types_1.Group.Link:
            return actions_1.Link.validateAction(action);
          case types_1.Group.unstable_Picker:
            return actions_1.unstable_Picker.validateAction(action);
        }
      }
      function dispatchValidator(action, origin2) {
        var errors = type_validate_1.validate(action, type_validate_1.matchesObject({
          group: type_validate_1.matchesEnum(types_1.Group, {
            message: function(_, value) {
              return "Unknown or unsupported action group `" + value + "`";
            }
          }),
          version: type_validate_1.matchesString()
        }));
        if (errors) {
          return Error_1.invalidAction(action, utils_1.actionMessage(errors));
        }
        var payloadErrors = dispatchPayloadValidator(action, origin2);
        return payloadErrors ? Error_1.invalidPayload(action, utils_1.actionMessage(payloadErrors)) : action;
      }
      var connectValidatorToUpdateHook = function(next) {
        return function(options) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          var mergedOptions = helper_1.getMergedProps(this.options, options);
          var errors = updateValidator(this.app.localOrigin, this.defaultGroup, mergedOptions);
          if (errors) {
            throw Error_1.fromAction(utils_1.actionMessage(errors), Error_1.Action.INVALID_OPTIONS);
          }
          return next.apply(void 0, __spreadArray([options], args));
        };
      };
      exports.connectValidatorToUpdateHook = connectValidatorToUpdateHook;
      var connectValidatorToDispatchHook = function(next) {
        return function(action) {
          var finalAction = dispatchValidator(action, this.localOrigin);
          return next(finalAction);
        };
      };
      exports.connectValidatorToDispatchHook = connectValidatorToDispatchHook;
      var validatorMiddleware = function(hooks) {
        hooks.set(client_1.LifecycleHook.UpdateAction, exports.connectValidatorToUpdateHook);
        hooks.set(client_1.LifecycleHook.DispatchAction, exports.connectValidatorToDispatchHook);
      };
      exports.validatorMiddleware = validatorMiddleware;
    }
  });

  // node_modules/@shopify/app-bridge/validate/index.js
  var require_validate = __commonJS({
    "node_modules/@shopify/app-bridge/validate/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var validator_1 = require_validator2();
      exports.default = validator_1.validatorMiddleware;
    }
  });

  // node_modules/@shopify/app-bridge/development.js
  var require_development = __commonJS({
    "node_modules/@shopify/app-bridge/development.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.createApp = void 0;
      var validate_1 = __importDefault(require_validate());
      var utils_1 = require_utils2();
      var redirect_1 = require_redirect();
      var client_1 = require_client2();
      var shared_1 = require_shared();
      function createApp2(config) {
        var currentWindow = redirect_1.getWindow();
        if (!currentWindow || !currentWindow.top) {
          return shared_1.serverAppBridge;
        }
        utils_1.mixedAppClientCheck(currentWindow);
        return client_1.createAppWrapper(currentWindow.top, currentWindow.location.origin, [validate_1.default])(config);
      }
      exports.createApp = createApp2;
      exports.default = createApp2;
      __exportStar(require_MessageTransport2(), exports);
      __exportStar(require_client2(), exports);
    }
  });

  // node_modules/@shopify/app-bridge/index.js
  var require_app_bridge = __commonJS({
    "node_modules/@shopify/app-bridge/index.js"(exports, module) {
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_development();
      }
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/AuthCode/index.js
  var require_AuthCode = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/AuthCode/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.respond = exports.Action = void 0;
      var helper_1 = require_helper();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["REQUEST"] = "APP::AUTH_CODE::REQUEST";
        Action4["RESPOND"] = "APP::AUTH_CODE::RESPOND";
      })(Action3 = exports.Action || (exports.Action = {}));
      function respond(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.AuthCode,
          type: Action3.RESPOND
        });
      }
      exports.respond = respond;
    }
  });

  // node_modules/@shopify/app-bridge/actions/AuthCode/index.js
  var require_AuthCode2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/AuthCode/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.request = exports.Action = exports.respond = void 0;
      var AuthCode_1 = require_AuthCode();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return AuthCode_1.Action;
      } });
      var helper_1 = require_helper2();
      var types_1 = require_types2();
      var AuthCode_2 = require_AuthCode();
      Object.defineProperty(exports, "respond", { enumerable: true, get: function() {
        return AuthCode_2.respond;
      } });
      function request(id) {
        return helper_1.actionWrapper({
          group: types_1.Group.AuthCode,
          type: AuthCode_1.Action.REQUEST,
          payload: { id }
        });
      }
      exports.request = request;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Button/index.js
  var require_Button2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Button/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.isValidButtonProps = exports.Button = exports.update = exports.Style = exports.Icon = exports.clickButton = exports.Action = void 0;
      var Button_1 = require_Button();
      Object.defineProperty(exports, "Button", { enumerable: true, get: function() {
        return Button_1.Button;
      } });
      var Button_2 = require_Button();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Button_2.Action;
      } });
      Object.defineProperty(exports, "clickButton", { enumerable: true, get: function() {
        return Button_2.clickButton;
      } });
      Object.defineProperty(exports, "Icon", { enumerable: true, get: function() {
        return Button_2.Icon;
      } });
      Object.defineProperty(exports, "Style", { enumerable: true, get: function() {
        return Button_2.Style;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return Button_2.update;
      } });
      function isValidButtonProps(button) {
        return typeof button.id === "string" && typeof button.label === "string";
      }
      exports.isValidButtonProps = isValidButtonProps;
      function create(app, options) {
        return new Button_1.Button(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/ButtonGroup/index.js
  var require_ButtonGroup2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/ButtonGroup/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.ButtonGroup = exports.isGroupedButtonPayload = exports.isGroupedButton = exports.update = exports.Action = void 0;
      var ButtonGroup_1 = require_ButtonGroup();
      Object.defineProperty(exports, "ButtonGroup", { enumerable: true, get: function() {
        return ButtonGroup_1.ButtonGroup;
      } });
      var ButtonGroup_2 = require_ButtonGroup();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return ButtonGroup_2.Action;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return ButtonGroup_2.update;
      } });
      Object.defineProperty(exports, "isGroupedButton", { enumerable: true, get: function() {
        return ButtonGroup_2.isGroupedButton;
      } });
      Object.defineProperty(exports, "isGroupedButtonPayload", { enumerable: true, get: function() {
        return ButtonGroup_2.isGroupedButtonPayload;
      } });
      function create(app, options) {
        return new ButtonGroup_1.ButtonGroup(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Flash/actions.js
  var require_actions4 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Flash/actions.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.Flash = exports.show = exports.clear = void 0;
      var Toast_1 = require_Toast();
      Object.defineProperty(exports, "clear", { enumerable: true, get: function() {
        return Toast_1.clear;
      } });
      Object.defineProperty(exports, "show", { enumerable: true, get: function() {
        return Toast_1.show;
      } });
      var Flash = (
        /** @class */
        function(_super) {
          __extends(Flash2, _super);
          function Flash2() {
            return _super !== null && _super.apply(this, arguments) || this;
          }
          return Flash2;
        }(Toast_1.Toast)
      );
      exports.Flash = Flash;
      function create(app, options) {
        return new Flash(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Flash/index.js
  var require_Flash = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Flash/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_actions4(), exports);
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Features/types.js
  var require_types5 = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Features/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = void 0;
      var Action3;
      (function(Action4) {
        Action4["UPDATE"] = "APP::FEATURES::UPDATE";
        Action4["REQUEST"] = "APP::FEATURES::REQUEST";
        Action4["REQUEST_UPDATE"] = "APP::FEATURES::REQUEST::UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Features/actions.js
  var require_actions5 = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Features/actions.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Features = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var types_2 = require_types5();
      var Features = (
        /** @class */
        function(_super) {
          __extends(Features2, _super);
          function Features2(app, options) {
            return _super.call(this, app, types_1.Group.Features, types_1.Group.Features, options ? options.id : void 0) || this;
          }
          Features2.prototype.dispatch = function(action, payload) {
            switch (action) {
              case types_2.Action.REQUEST:
                this.dispatchFeaturesAction(types_2.Action.REQUEST, payload);
                break;
            }
            return this;
          };
          Features2.prototype.dispatchFeaturesAction = function(type, payload) {
            this.app.dispatch(helper_1.actionWrapper({
              group: types_1.Group.Features,
              type,
              payload: __assign(__assign({}, payload || {}), { id: this.id })
            }));
          };
          return Features2;
        }(ActionSet_1.ActionSet)
      );
      exports.Features = Features;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Features/index.js
  var require_Features = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Features/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_actions5(), exports);
      __exportStar(require_types5(), exports);
    }
  });

  // node_modules/@shopify/app-bridge/actions/Features/actions.js
  var require_actions6 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Features/actions.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.Features = void 0;
      var Features_1 = require_Features();
      Object.defineProperty(exports, "Features", { enumerable: true, get: function() {
        return Features_1.Features;
      } });
      function create(app, options) {
        return new Features_1.Features(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Features/types.js
  var require_types6 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Features/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = void 0;
      var Features_1 = require_Features();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Features_1.Action;
      } });
    }
  });

  // node_modules/@shopify/app-bridge/actions/Features/index.js
  var require_Features2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Features/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_actions6(), exports);
      __exportStar(require_types6(), exports);
    }
  });

  // node_modules/@shopify/app-bridge/actions/FeedbackModal/index.js
  var require_FeedbackModal2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/FeedbackModal/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.FeedbackModal = exports.close = exports.open = exports.Action = void 0;
      var FeedbackModal_1 = require_FeedbackModal();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return FeedbackModal_1.Action;
      } });
      Object.defineProperty(exports, "open", { enumerable: true, get: function() {
        return FeedbackModal_1.open;
      } });
      Object.defineProperty(exports, "close", { enumerable: true, get: function() {
        return FeedbackModal_1.close;
      } });
      Object.defineProperty(exports, "FeedbackModal", { enumerable: true, get: function() {
        return FeedbackModal_1.FeedbackModal;
      } });
      Object.defineProperty(exports, "create", { enumerable: true, get: function() {
        return FeedbackModal_1.create;
      } });
    }
  });

  // node_modules/@shopify/app-bridge/actions/LeaveConfirmation/index.js
  var require_LeaveConfirmation2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/LeaveConfirmation/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.LeaveConfirmation = exports.confirm = exports.disable = exports.enable = exports.Action = void 0;
      var LeaveConfirmation_1 = require_LeaveConfirmation();
      Object.defineProperty(exports, "LeaveConfirmation", { enumerable: true, get: function() {
        return LeaveConfirmation_1.LeaveConfirmation;
      } });
      var LeaveConfirmation_2 = require_LeaveConfirmation();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return LeaveConfirmation_2.Action;
      } });
      Object.defineProperty(exports, "enable", { enumerable: true, get: function() {
        return LeaveConfirmation_2.enable;
      } });
      Object.defineProperty(exports, "disable", { enumerable: true, get: function() {
        return LeaveConfirmation_2.disable;
      } });
      Object.defineProperty(exports, "confirm", { enumerable: true, get: function() {
        return LeaveConfirmation_2.confirm;
      } });
      function create(app, options) {
        if (options === void 0) {
          options = {};
        }
        return new LeaveConfirmation_1.LeaveConfirmation(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Modal/index.js
  var require_Modal2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Modal/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.Modal = exports.isMessageModal = exports.data = exports.update = exports.clickFooterButton = exports.updateModalSize = exports.closeModal = exports.openModal = exports.Size = exports.Action = exports.isIframeModal = exports.ModalMessage = exports.ModalIframe = void 0;
      var Modal_1 = require_Modal();
      Object.defineProperty(exports, "ModalIframe", { enumerable: true, get: function() {
        return Modal_1.ModalIframe;
      } });
      Object.defineProperty(exports, "ModalMessage", { enumerable: true, get: function() {
        return Modal_1.ModalMessage;
      } });
      Object.defineProperty(exports, "isIframeModal", { enumerable: true, get: function() {
        return Modal_1.isIframeModal;
      } });
      var Modal_2 = require_Modal();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Modal_2.Action;
      } });
      Object.defineProperty(exports, "Size", { enumerable: true, get: function() {
        return Modal_2.Size;
      } });
      Object.defineProperty(exports, "openModal", { enumerable: true, get: function() {
        return Modal_2.openModal;
      } });
      Object.defineProperty(exports, "closeModal", { enumerable: true, get: function() {
        return Modal_2.closeModal;
      } });
      Object.defineProperty(exports, "updateModalSize", { enumerable: true, get: function() {
        return Modal_2.updateModalSize;
      } });
      Object.defineProperty(exports, "clickFooterButton", { enumerable: true, get: function() {
        return Modal_2.clickFooterButton;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return Modal_2.update;
      } });
      Object.defineProperty(exports, "data", { enumerable: true, get: function() {
        return Modal_2.data;
      } });
      Object.defineProperty(exports, "isMessageModal", { enumerable: true, get: function() {
        return Modal_2.isMessageModal;
      } });
      Object.defineProperty(exports, "Modal", { enumerable: true, get: function() {
        return Modal_2.Modal;
      } });
      var create = function(app, options) {
        if (Modal_1.isIframeModal(options)) {
          return new Modal_1.ModalIframe(app, options);
        }
        return new Modal_1.ModalMessage(app, options);
      };
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Modal/ModalContent/index.js
  var require_ModalContent = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Modal/ModalContent/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
          });
        }
        return new (P || (P = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      var __generator = exports && exports.__generator || function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ModalContent = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var index_1 = require_Modal();
      var Action3;
      (function(Action4) {
        Action4["LOADING"] = "LOADING";
        Action4["LOADED"] = "LOADED";
      })(Action3 = exports.Action || (exports.Action = {}));
      var ModalContent = (
        /** @class */
        function(_super) {
          __extends(ModalContent2, _super);
          function ModalContent2(app, options) {
            return _super.call(this, app, types_1.Group.Modal, types_1.Group.Modal, options ? options.id : void 0) || this;
          }
          ModalContent2.prototype.loaded = function() {
            this.dispatch(Action3.LOADED);
          };
          ModalContent2.prototype.loading = function() {
            this.dispatch(Action3.LOADING);
          };
          ModalContent2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.LOADED:
                this.dispatchModalAction(index_1.Action.UPDATE_CONTENT, { loading: false });
                break;
              case Action3.LOADING:
                this.dispatchModalAction(index_1.Action.UPDATE_CONTENT, { loading: true });
                break;
            }
            return this;
          };
          ModalContent2.prototype.dispatchModalAction = function(type, payload) {
            return __awaiter(this, void 0, void 0, function() {
              var updateAction;
              return __generator(this, function(_a) {
                updateAction = helper_1.actionWrapper({
                  type,
                  group: types_1.Group.Modal,
                  payload: __assign({}, payload)
                });
                this.app.dispatch(updateAction);
                return [
                  2
                  /*return*/
                ];
              });
            });
          };
          return ModalContent2;
        }(ActionSet_1.ActionSet)
      );
      exports.ModalContent = ModalContent;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Modal/ModalContent/index.js
  var require_ModalContent2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Modal/ModalContent/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.ModalContent = exports.Action = void 0;
      var ModalContent_1 = require_ModalContent();
      Object.defineProperty(exports, "ModalContent", { enumerable: true, get: function() {
        return ModalContent_1.ModalContent;
      } });
      var ModalContent_2 = require_ModalContent();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return ModalContent_2.Action;
      } });
      function create(app, options) {
        return new ModalContent_1.ModalContent(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Navigation/History/index.js
  var require_History2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Navigation/History/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.replace = exports.push = exports.Action = exports.History = void 0;
      var History_1 = require_History();
      Object.defineProperty(exports, "History", { enumerable: true, get: function() {
        return History_1.History;
      } });
      var History_2 = require_History();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return History_2.Action;
      } });
      Object.defineProperty(exports, "push", { enumerable: true, get: function() {
        return History_2.push;
      } });
      Object.defineProperty(exports, "replace", { enumerable: true, get: function() {
        return History_2.replace;
      } });
      function create(app) {
        return new History_1.History(app);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Navigation/Redirect/index.js
  var require_Redirect2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Navigation/Redirect/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.isProductVariantCreateResourcePayload = exports.isProductVariantResourcePayload = exports.isCreateResourcePayload = exports.isAdminSection = exports.isRemotePayload = exports.isAdminSectionPayload = exports.isAdminPathPayload = exports.isAppPayload = exports.getRelativePath = exports.normalizeUrl = exports.getPathWithSearchAndHash = exports.toDestination = exports.toApp = exports.toRemote = exports.toAdminSection = exports.toAdminPath = exports.isResourcePayload = exports.ResourceType = exports.Action = exports.Redirect = void 0;
      var Redirect_1 = require_Redirect();
      Object.defineProperty(exports, "Redirect", { enumerable: true, get: function() {
        return Redirect_1.Redirect;
      } });
      Object.defineProperty(exports, "isCreateResourcePayload", { enumerable: true, get: function() {
        return Redirect_1.isCreateResourcePayload;
      } });
      Object.defineProperty(exports, "isProductVariantResourcePayload", { enumerable: true, get: function() {
        return Redirect_1.isProductVariantResourcePayload;
      } });
      var Redirect_2 = require_Redirect();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Redirect_2.Action;
      } });
      Object.defineProperty(exports, "ResourceType", { enumerable: true, get: function() {
        return Redirect_2.ResourceType;
      } });
      Object.defineProperty(exports, "isResourcePayload", { enumerable: true, get: function() {
        return Redirect_2.isResourcePayload;
      } });
      Object.defineProperty(exports, "toAdminPath", { enumerable: true, get: function() {
        return Redirect_2.toAdminPath;
      } });
      Object.defineProperty(exports, "toAdminSection", { enumerable: true, get: function() {
        return Redirect_2.toAdminSection;
      } });
      Object.defineProperty(exports, "toRemote", { enumerable: true, get: function() {
        return Redirect_2.toRemote;
      } });
      Object.defineProperty(exports, "toApp", { enumerable: true, get: function() {
        return Redirect_2.toApp;
      } });
      Object.defineProperty(exports, "toDestination", { enumerable: true, get: function() {
        return Redirect_2.toDestination;
      } });
      Object.defineProperty(exports, "getPathWithSearchAndHash", { enumerable: true, get: function() {
        return Redirect_2.getPathWithSearchAndHash;
      } });
      Object.defineProperty(exports, "normalizeUrl", { enumerable: true, get: function() {
        return Redirect_2.normalizeUrl;
      } });
      Object.defineProperty(exports, "getRelativePath", { enumerable: true, get: function() {
        return Redirect_2.getRelativePath;
      } });
      Object.defineProperty(exports, "isAppPayload", { enumerable: true, get: function() {
        return Redirect_2.isAppPayload;
      } });
      Object.defineProperty(exports, "isAdminPathPayload", { enumerable: true, get: function() {
        return Redirect_2.isAdminPathPayload;
      } });
      Object.defineProperty(exports, "isAdminSectionPayload", { enumerable: true, get: function() {
        return Redirect_2.isAdminSectionPayload;
      } });
      Object.defineProperty(exports, "isRemotePayload", { enumerable: true, get: function() {
        return Redirect_2.isRemotePayload;
      } });
      Object.defineProperty(exports, "isAdminSection", { enumerable: true, get: function() {
        return Redirect_2.isAdminSection;
      } });
      function isProductVariantCreateResourcePayload(resource) {
        if (!Redirect_1.isProductVariantResourcePayload(resource)) {
          return false;
        }
        return Redirect_1.isCreateResourcePayload(resource.variant);
      }
      exports.isProductVariantCreateResourcePayload = isProductVariantCreateResourcePayload;
      function create(app) {
        return new Redirect_1.Redirect(app);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/ResourcePicker/index.js
  var require_ResourcePicker2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/ResourcePicker/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.ResourcePicker = exports.WeightUnit = exports.update = exports.select = exports.ResourceType = exports.ProductVariantInventoryPolicy = exports.ProductVariantInventoryManagement = exports.ProductStatus = exports.open = exports.FulfillmentServiceType = exports.CollectionSortOrder = exports.close = exports.cancel = exports.ActionVerb = exports.Action = void 0;
      var ResourcePicker_1 = require_ResourcePicker();
      Object.defineProperty(exports, "ResourcePicker", { enumerable: true, get: function() {
        return ResourcePicker_1.ResourcePicker;
      } });
      var ResourcePicker_2 = require_ResourcePicker();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return ResourcePicker_2.Action;
      } });
      Object.defineProperty(exports, "ActionVerb", { enumerable: true, get: function() {
        return ResourcePicker_2.ActionVerb;
      } });
      Object.defineProperty(exports, "cancel", { enumerable: true, get: function() {
        return ResourcePicker_2.cancel;
      } });
      Object.defineProperty(exports, "close", { enumerable: true, get: function() {
        return ResourcePicker_2.close;
      } });
      Object.defineProperty(exports, "CollectionSortOrder", { enumerable: true, get: function() {
        return ResourcePicker_2.CollectionSortOrder;
      } });
      Object.defineProperty(exports, "FulfillmentServiceType", { enumerable: true, get: function() {
        return ResourcePicker_2.FulfillmentServiceType;
      } });
      Object.defineProperty(exports, "open", { enumerable: true, get: function() {
        return ResourcePicker_2.open;
      } });
      Object.defineProperty(exports, "ProductStatus", { enumerable: true, get: function() {
        return ResourcePicker_2.ProductStatus;
      } });
      Object.defineProperty(exports, "ProductVariantInventoryManagement", { enumerable: true, get: function() {
        return ResourcePicker_2.ProductVariantInventoryManagement;
      } });
      Object.defineProperty(exports, "ProductVariantInventoryPolicy", { enumerable: true, get: function() {
        return ResourcePicker_2.ProductVariantInventoryPolicy;
      } });
      Object.defineProperty(exports, "ResourceType", { enumerable: true, get: function() {
        return ResourcePicker_2.ResourceType;
      } });
      Object.defineProperty(exports, "select", { enumerable: true, get: function() {
        return ResourcePicker_2.select;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return ResourcePicker_2.update;
      } });
      Object.defineProperty(exports, "WeightUnit", { enumerable: true, get: function() {
        return ResourcePicker_2.WeightUnit;
      } });
      var create = function(app, baseOptions) {
        var resourceType = baseOptions.resourceType, _a = baseOptions.options, options = _a === void 0 ? {} : _a;
        return new ResourcePicker_1.ResourcePicker(app, options, resourceType);
      };
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/SessionToken/index.js
  var require_SessionToken = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/SessionToken/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.respond = exports.request = exports.Action = void 0;
      var helper_1 = require_helper();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["REQUEST"] = "APP::SESSION_TOKEN::REQUEST";
        Action4["RESPOND"] = "APP::SESSION_TOKEN::RESPOND";
      })(Action3 = exports.Action || (exports.Action = {}));
      function request() {
        return helper_1.actionWrapper({
          group: types_1.Group.SessionToken,
          type: Action3.REQUEST
        });
      }
      exports.request = request;
      function respond(sessionToken) {
        return helper_1.actionWrapper({
          payload: sessionToken,
          group: types_1.Group.SessionToken,
          type: Action3.RESPOND
        });
      }
      exports.respond = respond;
    }
  });

  // node_modules/@shopify/app-bridge/actions/SessionToken/index.js
  var require_SessionToken2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/SessionToken/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.respond = exports.request = exports.Action = void 0;
      var SessionToken_1 = require_SessionToken();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return SessionToken_1.Action;
      } });
      Object.defineProperty(exports, "request", { enumerable: true, get: function() {
        return SessionToken_1.request;
      } });
      Object.defineProperty(exports, "respond", { enumerable: true, get: function() {
        return SessionToken_1.respond;
      } });
    }
  });

  // node_modules/@shopify/app-bridge/actions/TitleBar/index.js
  var require_TitleBar2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/TitleBar/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.TitleBar = exports.update = exports.clickBreadcrumb = exports.clickActionButton = exports.Action = void 0;
      var TitleBar_1 = require_TitleBar();
      Object.defineProperty(exports, "TitleBar", { enumerable: true, get: function() {
        return TitleBar_1.TitleBar;
      } });
      var TitleBar_2 = require_TitleBar();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return TitleBar_2.Action;
      } });
      Object.defineProperty(exports, "clickActionButton", { enumerable: true, get: function() {
        return TitleBar_2.clickActionButton;
      } });
      Object.defineProperty(exports, "clickBreadcrumb", { enumerable: true, get: function() {
        return TitleBar_2.clickBreadcrumb;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return TitleBar_2.update;
      } });
      function create(app, options) {
        return new TitleBar_1.TitleBar(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Toast/index.js
  var require_Toast2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Toast/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.Toast = exports.primaryAction = exports.clear = exports.show = exports.Action = void 0;
      var Toast_1 = require_Toast();
      Object.defineProperty(exports, "Toast", { enumerable: true, get: function() {
        return Toast_1.Toast;
      } });
      var Toast_2 = require_Toast();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Toast_2.Action;
      } });
      Object.defineProperty(exports, "show", { enumerable: true, get: function() {
        return Toast_2.show;
      } });
      Object.defineProperty(exports, "clear", { enumerable: true, get: function() {
        return Toast_2.clear;
      } });
      Object.defineProperty(exports, "primaryAction", { enumerable: true, get: function() {
        return Toast_2.primaryAction;
      } });
      function create(app, options) {
        return new Toast_1.Toast(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/ContextualSaveBar/index.js
  var require_ContextualSaveBar2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/ContextualSaveBar/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.ContextualSaveBar = exports.update = exports.discard = exports.save = exports.hide = exports.show = exports.Action = void 0;
      var ContextualSaveBar_1 = require_ContextualSaveBar();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return ContextualSaveBar_1.Action;
      } });
      Object.defineProperty(exports, "show", { enumerable: true, get: function() {
        return ContextualSaveBar_1.show;
      } });
      Object.defineProperty(exports, "hide", { enumerable: true, get: function() {
        return ContextualSaveBar_1.hide;
      } });
      Object.defineProperty(exports, "save", { enumerable: true, get: function() {
        return ContextualSaveBar_1.save;
      } });
      Object.defineProperty(exports, "discard", { enumerable: true, get: function() {
        return ContextualSaveBar_1.discard;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return ContextualSaveBar_1.update;
      } });
      Object.defineProperty(exports, "ContextualSaveBar", { enumerable: true, get: function() {
        return ContextualSaveBar_1.ContextualSaveBar;
      } });
      function create(app, options) {
        return new ContextualSaveBar_1.ContextualSaveBar(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Share/index.js
  var require_Share = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Share/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.close = exports.show = exports.Share = exports.Action = void 0;
      var types_1 = require_types();
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var Action3;
      (function(Action4) {
        Action4["SHOW"] = "APP::SHARE::SHOW";
        Action4["CLOSE"] = "APP::SHARE::CLOSE";
      })(Action3 = exports.Action || (exports.Action = {}));
      var Share = (
        /** @class */
        function(_super) {
          __extends(Share2, _super);
          function Share2(app) {
            return _super.call(this, app, types_1.Group.Share, types_1.Group.Share) || this;
          }
          Share2.prototype.dispatch = function(action, payload) {
            switch (action) {
              case Action3.SHOW:
                this.dispatchShareAction(Action3.SHOW, payload);
                break;
              case Action3.CLOSE:
                this.dispatchShareAction(Action3.CLOSE, payload);
                break;
              default:
                throw new Error("Action: " + action + " not supported");
            }
            return this;
          };
          Share2.prototype.dispatchShareAction = function(actionType, payload) {
            this.app.dispatch(helper_1.actionWrapper({
              type: actionType,
              group: types_1.Group.Share,
              payload: __assign({ id: this.id }, payload)
            }));
          };
          return Share2;
        }(ActionSet_1.ActionSet)
      );
      exports.Share = Share;
      function show() {
        return helper_1.actionWrapper({
          group: types_1.Group.Share,
          type: Action3.SHOW
        });
      }
      exports.show = show;
      function close(payload) {
        return helper_1.actionWrapper({
          group: types_1.Group.Share,
          type: Action3.CLOSE,
          payload
        });
      }
      exports.close = close;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Share/index.js
  var require_Share2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Share/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.Share = exports.close = exports.show = exports.Action = void 0;
      var Share_1 = require_Share();
      Object.defineProperty(exports, "Share", { enumerable: true, get: function() {
        return Share_1.Share;
      } });
      var Share_2 = require_Share();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Share_2.Action;
      } });
      Object.defineProperty(exports, "show", { enumerable: true, get: function() {
        return Share_2.show;
      } });
      Object.defineProperty(exports, "close", { enumerable: true, get: function() {
        return Share_2.close;
      } });
      function create(app) {
        return new Share_1.Share(app);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Menu/NavigationMenu/index.js
  var require_NavigationMenu2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Menu/NavigationMenu/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.NavigationMenu = exports.update = exports.Action = void 0;
      var NavigationMenu_1 = require_NavigationMenu();
      Object.defineProperty(exports, "NavigationMenu", { enumerable: true, get: function() {
        return NavigationMenu_1.NavigationMenu;
      } });
      var NavigationMenu_2 = require_NavigationMenu();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return NavigationMenu_2.Action;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return NavigationMenu_2.update;
      } });
      function create(app, options) {
        return new NavigationMenu_1.NavigationMenu(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Menu/ChannelMenu/index.js
  var require_ChannelMenu2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Menu/ChannelMenu/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.ChannelMenu = exports.update = exports.Action = void 0;
      var ChannelMenu_1 = require_ChannelMenu();
      Object.defineProperty(exports, "ChannelMenu", { enumerable: true, get: function() {
        return ChannelMenu_1.ChannelMenu;
      } });
      var ChannelMenu_2 = require_ChannelMenu();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return ChannelMenu_2.Action;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return ChannelMenu_2.update;
      } });
      function create(app, options) {
        return new ChannelMenu_1.ChannelMenu(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Link/AppLink/index.js
  var require_AppLink2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Link/AppLink/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.AppLink = exports.update = exports.Action = void 0;
      var AppLink_1 = require_AppLink();
      Object.defineProperty(exports, "AppLink", { enumerable: true, get: function() {
        return AppLink_1.AppLink;
      } });
      var AppLink_2 = require_AppLink();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return AppLink_2.Action;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return AppLink_2.update;
      } });
      function create(app, options) {
        return new AppLink_1.AppLink(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Pos/index.js
  var require_Pos = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Pos/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Pos = exports.close = exports.Action = void 0;
      var helper_1 = require_helper();
      var ActionSet_1 = require_ActionSet();
      var types_1 = require_types();
      var Action3;
      (function(Action4) {
        Action4["CLOSE"] = "APP::POS::CLOSE";
        Action4["LOCATION_UPDATE"] = "APP::POS::LOCATION::UPDATE";
        Action4["USER_UPDATE"] = "APP::POS::USER::UPDATE";
        Action4["DEVICE_UPDATE"] = "APP::POS::DEVICE::UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
      function close() {
        return helper_1.actionWrapper({
          group: types_1.Group.Pos,
          type: Action3.CLOSE
        });
      }
      exports.close = close;
      var Pos = (
        /** @class */
        function(_super) {
          __extends(Pos2, _super);
          function Pos2(app) {
            return _super.call(this, app, types_1.Group.Pos, types_1.Group.Pos) || this;
          }
          Pos2.prototype.dispatch = function(action) {
            switch (action) {
              case Action3.CLOSE:
                this.app.dispatch(close());
                break;
            }
            return this;
          };
          return Pos2;
        }(ActionSet_1.ActionSet)
      );
      exports.Pos = Pos;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Pos/index.js
  var require_Pos2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Pos/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.Pos = exports.close = exports.Action = void 0;
      var Pos_1 = require_Pos();
      Object.defineProperty(exports, "Pos", { enumerable: true, get: function() {
        return Pos_1.Pos;
      } });
      var Pos_2 = require_Pos();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Pos_2.Action;
      } });
      Object.defineProperty(exports, "close", { enumerable: true, get: function() {
        return Pos_2.close;
      } });
      function create(app) {
        return new Pos_1.Pos(app);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/MarketingExternalActivityTopBar/index.js
  var require_MarketingExternalActivityTopBar = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/MarketingExternalActivityTopBar/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Action = void 0;
      var Action3;
      (function(Action4) {
        Action4["UPDATE"] = "APP::MARKETING_EXTERNAL_ACTIVITY_TOP_BAR::UPDATE";
        Action4["BUTTON_CLICK"] = "APP::MARKETING_EXTERNAL_ACTIVITY_TOP_BAR::BUTTONS::BUTTON::CLICK";
        Action4["BUTTON_UPDATE"] = "APP::MARKETING_EXTERNAL_ACTIVITY_TOP_BAR::BUTTONS::BUTTON::UPDATE";
      })(Action3 = exports.Action || (exports.Action = {}));
    }
  });

  // node_modules/@shopify/app-bridge/actions/buttonHelper.js
  var require_buttonHelper2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/buttonHelper.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getSingleButton = void 0;
      var buttonHelper_1 = require_buttonHelper();
      Object.defineProperty(exports, "getSingleButton", { enumerable: true, get: function() {
        return buttonHelper_1.getSingleButton;
      } });
    }
  });

  // node_modules/@shopify/app-bridge/actions/ActionSet.js
  var require_ActionSet2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/ActionSet.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.unsubscribeActions = exports.ActionSetWithChildren = exports.ActionSet = void 0;
      var ActionSet_1 = require_ActionSet();
      Object.defineProperty(exports, "ActionSet", { enumerable: true, get: function() {
        return ActionSet_1.ActionSet;
      } });
      Object.defineProperty(exports, "ActionSetWithChildren", { enumerable: true, get: function() {
        return ActionSet_1.ActionSetWithChildren;
      } });
      Object.defineProperty(exports, "unsubscribeActions", { enumerable: true, get: function() {
        return ActionSet_1.unsubscribeActions;
      } });
    }
  });

  // node_modules/@shopify/app-bridge/actions/MarketingExternalActivityTopBar/index.js
  var require_MarketingExternalActivityTopBar2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/MarketingExternalActivityTopBar/index.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
        var extendStatics = function(d, b) {
          extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
            d2.__proto__ = b2;
          } || function(d2, b2) {
            for (var p in b2)
              if (Object.prototype.hasOwnProperty.call(b2, p))
                d2[p] = b2[p];
          };
          return extendStatics(d, b);
        };
        return function(d, b) {
          if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
          extendStatics(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
      }();
      var __assign = exports && exports.__assign || function() {
        __assign = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        return __assign.apply(this, arguments);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.MarketingExternalActivityTopBar = exports.update = exports.clickActionButton = exports.MarketingActivityStatusBadgeType = exports.Action = void 0;
      var MarketingExternalActivityTopBar_1 = require_MarketingExternalActivityTopBar();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return MarketingExternalActivityTopBar_1.Action;
      } });
      var Button_1 = require_Button2();
      var buttonHelper_1 = require_buttonHelper2();
      var helper_1 = require_helper2();
      var ActionSet_1 = require_ActionSet2();
      var types_1 = require_types2();
      var MarketingActivityStatusBadgeType;
      (function(MarketingActivityStatusBadgeType2) {
        MarketingActivityStatusBadgeType2["Default"] = "DEFAULT";
        MarketingActivityStatusBadgeType2["Success"] = "SUCCESS";
        MarketingActivityStatusBadgeType2["Attention"] = "ATTENTION";
        MarketingActivityStatusBadgeType2["Warning"] = "WARNING";
        MarketingActivityStatusBadgeType2["Info"] = "INFO";
      })(MarketingActivityStatusBadgeType = exports.MarketingActivityStatusBadgeType || (exports.MarketingActivityStatusBadgeType = {}));
      var MARKETING_ACTIVITY_TOPBAR_BUTTON_PROPS = {
        group: types_1.Group.MarketingExternalActivityTopBar,
        subgroups: ["Buttons"]
      };
      function clickActionButton(id, payload) {
        var type = types_1.ComponentType.Button;
        var component = __assign({ id, type }, MARKETING_ACTIVITY_TOPBAR_BUTTON_PROPS);
        return Button_1.clickButton(types_1.Group.MarketingExternalActivityTopBar, component, payload);
      }
      exports.clickActionButton = clickActionButton;
      function update(payload) {
        return helper_1.actionWrapper({
          payload,
          group: types_1.Group.MarketingExternalActivityTopBar,
          type: MarketingExternalActivityTopBar_1.Action.UPDATE
        });
      }
      exports.update = update;
      var MarketingExternalActivityTopBar = (
        /** @class */
        function(_super) {
          __extends(MarketingExternalActivityTopBar2, _super);
          function MarketingExternalActivityTopBar2(app, options) {
            var _this = _super.call(this, app, types_1.Group.MarketingExternalActivityTopBar, types_1.Group.MarketingExternalActivityTopBar) || this;
            _this.set(options);
            return _this;
          }
          Object.defineProperty(MarketingExternalActivityTopBar2.prototype, "buttons", {
            get: function() {
              if (!this.primary && !this.secondary) {
                return void 0;
              }
              return {
                primary: this.primary,
                secondary: this.secondary
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(MarketingExternalActivityTopBar2.prototype, "buttonsOptions", {
            get: function() {
              if (!this.primaryOptions && !this.secondaryOptions) {
                return void 0;
              }
              return {
                primary: this.primaryOptions,
                secondary: this.secondaryOptions
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(MarketingExternalActivityTopBar2.prototype, "options", {
            get: function() {
              return {
                title: this.title,
                status: this.status,
                saving: this.saving,
                saved: this.saved,
                buttons: this.buttonsOptions
              };
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(MarketingExternalActivityTopBar2.prototype, "payload", {
            get: function() {
              return __assign(__assign({}, this.options), { buttons: this.buttons, id: this.id });
            },
            enumerable: false,
            configurable: true
          });
          MarketingExternalActivityTopBar2.prototype.set = function(options, shouldUpdate) {
            if (shouldUpdate === void 0) {
              shouldUpdate = true;
            }
            var mergedOptions = helper_1.getMergedProps(this.options, options);
            var title = mergedOptions.title, buttons = mergedOptions.buttons, saved = mergedOptions.saved, saving = mergedOptions.saving, status = mergedOptions.status;
            this.title = title;
            this.saving = saving;
            this.saved = saved;
            this.status = status;
            this.setPrimaryButton(buttons ? buttons.primary : void 0);
            this.setSecondaryButtons(buttons ? buttons.secondary : void 0);
            if (shouldUpdate) {
              this.dispatch(MarketingExternalActivityTopBar_1.Action.UPDATE);
            }
            return this;
          };
          MarketingExternalActivityTopBar2.prototype.dispatch = function(action) {
            switch (action) {
              case MarketingExternalActivityTopBar_1.Action.UPDATE:
                this.app.dispatch(update(this.payload));
                break;
            }
            return this;
          };
          MarketingExternalActivityTopBar2.prototype.getButton = function(button, subgroups, updateCb) {
            return buttonHelper_1.getSingleButton(this, button, subgroups, updateCb);
          };
          MarketingExternalActivityTopBar2.prototype.updatePrimaryButton = function(newPayload) {
            if (!this.primary) {
              return;
            }
            if (helper_1.updateActionFromPayload(this.primary, newPayload)) {
              this.dispatch(MarketingExternalActivityTopBar_1.Action.UPDATE);
            }
          };
          MarketingExternalActivityTopBar2.prototype.updateSecondaryButtons = function(newPayload) {
            if (!this.secondary) {
              return;
            }
            var buttonToUpdate = this.secondary.find(function(action) {
              return action.id === newPayload.id;
            });
            if (!buttonToUpdate) {
              return;
            }
            var updated = helper_1.updateActionFromPayload(buttonToUpdate, newPayload);
            if (updated) {
              this.dispatch(MarketingExternalActivityTopBar_1.Action.UPDATE);
            }
          };
          MarketingExternalActivityTopBar2.prototype.setPrimaryButton = function(newOptions) {
            this.primaryOptions = this.getChildButton(newOptions, this.primaryOptions);
            this.primary = this.primaryOptions ? this.getButton(this.primaryOptions, MARKETING_ACTIVITY_TOPBAR_BUTTON_PROPS.subgroups, this.updatePrimaryButton) : void 0;
          };
          MarketingExternalActivityTopBar2.prototype.setSecondaryButtons = function(newOptions) {
            var _this = this;
            var newButtons = newOptions || [];
            var currentButtons = this.secondaryOptions || [];
            this.secondaryOptions = this.getUpdatedChildActions(newButtons, currentButtons);
            this.secondary = this.secondaryOptions ? this.secondaryOptions.map(function(action) {
              return _this.getButton(action, MARKETING_ACTIVITY_TOPBAR_BUTTON_PROPS.subgroups, _this.updateSecondaryButtons);
            }) : void 0;
          };
          MarketingExternalActivityTopBar2.prototype.updateSaving = function(saving) {
            this.saving = saving;
            this.dispatch(MarketingExternalActivityTopBar_1.Action.UPDATE);
          };
          MarketingExternalActivityTopBar2.prototype.updateSaved = function(saved) {
            this.saved = saved;
            this.dispatch(MarketingExternalActivityTopBar_1.Action.UPDATE);
          };
          MarketingExternalActivityTopBar2.prototype.updateStatus = function(newPayload) {
            this.status = newPayload;
            this.dispatch(MarketingExternalActivityTopBar_1.Action.UPDATE);
          };
          MarketingExternalActivityTopBar2.prototype.getChildButton = function(newAction, currentAction) {
            var newButtons = newAction ? [newAction] : [];
            var currentButtons = currentAction ? [currentAction] : [];
            var updatedButton = this.getUpdatedChildActions(newButtons, currentButtons);
            return updatedButton ? updatedButton[0] : void 0;
          };
          return MarketingExternalActivityTopBar2;
        }(ActionSet_1.ActionSetWithChildren)
      );
      exports.MarketingExternalActivityTopBar = MarketingExternalActivityTopBar;
      function create(app, options) {
        return new MarketingExternalActivityTopBar(app, options);
      }
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge-core/actions/Performance/index.js
  var require_Performance = __commonJS({
    "node_modules/@shopify/app-bridge-core/actions/Performance/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.fullPageLoad = exports.skeletonPageLoad = exports.Action = void 0;
      var types_1 = require_types();
      var helper_1 = require_helper();
      var Action3;
      (function(Action4) {
        Action4["SKELETON_PAGE_LOAD"] = "APP::PERFORMANCE::SKELETON_PAGE_LOAD";
        Action4["FULL_PAGE_LOAD"] = "APP::PERFORMANCE::FULL_PAGE_LOAD";
      })(Action3 = exports.Action || (exports.Action = {}));
      function skeletonPageLoad() {
        return helper_1.actionWrapper({
          group: types_1.Group.Performance,
          type: Action3.SKELETON_PAGE_LOAD
        });
      }
      exports.skeletonPageLoad = skeletonPageLoad;
      function fullPageLoad() {
        return helper_1.actionWrapper({
          group: types_1.Group.Performance,
          type: Action3.FULL_PAGE_LOAD
        });
      }
      exports.fullPageLoad = fullPageLoad;
    }
  });

  // node_modules/@shopify/app-bridge/actions/Performance/index.js
  var require_Performance2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Performance/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.fullPageLoad = exports.skeletonPageLoad = exports.Action = void 0;
      var Performance_1 = require_Performance();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Performance_1.Action;
      } });
      Object.defineProperty(exports, "skeletonPageLoad", { enumerable: true, get: function() {
        return Performance_1.skeletonPageLoad;
      } });
      Object.defineProperty(exports, "fullPageLoad", { enumerable: true, get: function() {
        return Performance_1.fullPageLoad;
      } });
    }
  });

  // node_modules/@shopify/app-bridge/actions/Picker/index.js
  var require_Picker2 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/Picker/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.create = exports.unstable_Picker = exports.update = exports.select = exports.search = exports.open = exports.loadMore = exports.cancel = exports.ALL_RESOURCE_VERTICAL_ALIGNMENT = exports.ALL_MEDIA_KINDS = exports.ALL_BADGE_STATUSES = exports.ALL_BADGE_PROGRESSES = exports.Action = void 0;
      var Picker_1 = require_Picker();
      Object.defineProperty(exports, "unstable_Picker", { enumerable: true, get: function() {
        return Picker_1.unstable_Picker;
      } });
      var Picker_2 = require_Picker();
      Object.defineProperty(exports, "Action", { enumerable: true, get: function() {
        return Picker_2.Action;
      } });
      Object.defineProperty(exports, "ALL_BADGE_PROGRESSES", { enumerable: true, get: function() {
        return Picker_2.ALL_BADGE_PROGRESSES;
      } });
      Object.defineProperty(exports, "ALL_BADGE_STATUSES", { enumerable: true, get: function() {
        return Picker_2.ALL_BADGE_STATUSES;
      } });
      Object.defineProperty(exports, "ALL_MEDIA_KINDS", { enumerable: true, get: function() {
        return Picker_2.ALL_MEDIA_KINDS;
      } });
      Object.defineProperty(exports, "ALL_RESOURCE_VERTICAL_ALIGNMENT", { enumerable: true, get: function() {
        return Picker_2.ALL_RESOURCE_VERTICAL_ALIGNMENT;
      } });
      Object.defineProperty(exports, "cancel", { enumerable: true, get: function() {
        return Picker_2.cancel;
      } });
      Object.defineProperty(exports, "loadMore", { enumerable: true, get: function() {
        return Picker_2.loadMore;
      } });
      Object.defineProperty(exports, "open", { enumerable: true, get: function() {
        return Picker_2.open;
      } });
      Object.defineProperty(exports, "search", { enumerable: true, get: function() {
        return Picker_2.search;
      } });
      Object.defineProperty(exports, "select", { enumerable: true, get: function() {
        return Picker_2.select;
      } });
      Object.defineProperty(exports, "update", { enumerable: true, get: function() {
        return Picker_2.update;
      } });
      var create = function(app, options) {
        return new Picker_1.unstable_Picker(app, options);
      };
      exports.create = create;
    }
  });

  // node_modules/@shopify/app-bridge/actions/validator.js
  var require_validator3 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/validator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.isFromApp = exports.isPerformanceOrWebVitalsAction = exports.getPermissionKey = exports.isPermitted = exports.isAppMessage = exports.isAppBridgeAction = void 0;
      var validator_1 = require_validator();
      Object.defineProperty(exports, "isAppBridgeAction", { enumerable: true, get: function() {
        return validator_1.isAppBridgeAction;
      } });
      Object.defineProperty(exports, "isAppMessage", { enumerable: true, get: function() {
        return validator_1.isAppMessage;
      } });
      Object.defineProperty(exports, "isPermitted", { enumerable: true, get: function() {
        return validator_1.isPermitted;
      } });
      Object.defineProperty(exports, "getPermissionKey", { enumerable: true, get: function() {
        return validator_1.getPermissionKey;
      } });
      Object.defineProperty(exports, "isPerformanceOrWebVitalsAction", { enumerable: true, get: function() {
        return validator_1.isPerformanceOrWebVitalsAction;
      } });
      function isFromApp(action) {
        if (typeof action !== "object" || typeof action.source !== "object") {
          return false;
        }
        return typeof action.source.apiKey === "string";
      }
      exports.isFromApp = isFromApp;
    }
  });

  // node_modules/@shopify/app-bridge/actions/index.js
  var require_actions7 = __commonJS({
    "node_modules/@shopify/app-bridge/actions/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.WebVitals = exports.unstable_Picker = exports.Performance = exports.Pos = exports.AppLink = exports.ChannelMenu = exports.NavigationMenu = exports.Share = exports.ContextualSaveBar = exports.MarketingExternalActivityTopBar = exports.TitleBar = exports.SessionToken = exports.ResourcePicker = exports.Redirect = exports.Print = exports.ModalContent = exports.Modal = exports.Loading = exports.LeaveConfirmation = exports.History = exports.Toast = exports.Fullscreen = exports.FeedbackModal = exports.Features = exports.Flash = exports.Error = exports.Client = exports.Cart = exports.Scanner = exports.ButtonGroup = exports.Button = exports.AuthCode = exports.isAppBridgeAction = void 0;
      var AuthCode = __importStar(require_AuthCode2());
      exports.AuthCode = AuthCode;
      var Button2 = __importStar(require_Button2());
      exports.Button = Button2;
      var ButtonGroup2 = __importStar(require_ButtonGroup2());
      exports.ButtonGroup = ButtonGroup2;
      var Cart = __importStar(require_Cart2());
      exports.Cart = Cart;
      var Client = __importStar(require_Client2());
      exports.Client = Client;
      var Error2 = __importStar(require_Error2());
      exports.Error = Error2;
      var Flash = __importStar(require_Flash());
      exports.Flash = Flash;
      var Features = __importStar(require_Features2());
      exports.Features = Features;
      var FeedbackModal = __importStar(require_FeedbackModal2());
      exports.FeedbackModal = FeedbackModal;
      var Fullscreen = __importStar(require_Fullscreen2());
      exports.Fullscreen = Fullscreen;
      var LeaveConfirmation = __importStar(require_LeaveConfirmation2());
      exports.LeaveConfirmation = LeaveConfirmation;
      var Loading = __importStar(require_Loading2());
      exports.Loading = Loading;
      var Modal3 = __importStar(require_Modal2());
      exports.Modal = Modal3;
      var ModalContent = __importStar(require_ModalContent2());
      exports.ModalContent = ModalContent;
      var History = __importStar(require_History2());
      exports.History = History;
      var Redirect = __importStar(require_Redirect2());
      exports.Redirect = Redirect;
      var Print = __importStar(require_Print2());
      exports.Print = Print;
      var ResourcePicker = __importStar(require_ResourcePicker2());
      exports.ResourcePicker = ResourcePicker;
      var Scanner = __importStar(require_Scanner2());
      exports.Scanner = Scanner;
      var SessionToken = __importStar(require_SessionToken2());
      exports.SessionToken = SessionToken;
      var TitleBar = __importStar(require_TitleBar2());
      exports.TitleBar = TitleBar;
      var Toast = __importStar(require_Toast2());
      exports.Toast = Toast;
      var ContextualSaveBar = __importStar(require_ContextualSaveBar2());
      exports.ContextualSaveBar = ContextualSaveBar;
      var Share = __importStar(require_Share2());
      exports.Share = Share;
      var NavigationMenu2 = __importStar(require_NavigationMenu2());
      exports.NavigationMenu = NavigationMenu2;
      var ChannelMenu = __importStar(require_ChannelMenu2());
      exports.ChannelMenu = ChannelMenu;
      var AppLink2 = __importStar(require_AppLink2());
      exports.AppLink = AppLink2;
      var Pos = __importStar(require_Pos2());
      exports.Pos = Pos;
      var MarketingExternalActivityTopBar = __importStar(require_MarketingExternalActivityTopBar2());
      exports.MarketingExternalActivityTopBar = MarketingExternalActivityTopBar;
      var Performance = __importStar(require_Performance2());
      exports.Performance = Performance;
      var unstable_Picker = __importStar(require_Picker2());
      exports.unstable_Picker = unstable_Picker;
      var WebVitals = __importStar(require_WebVitals2());
      exports.WebVitals = WebVitals;
      var validator_1 = require_validator3();
      Object.defineProperty(exports, "isAppBridgeAction", { enumerable: true, get: function() {
        return validator_1.isAppBridgeAction;
      } });
      __exportStar(require_types2(), exports);
    }
  });

  // node_modules/@hotwired/stimulus/dist/stimulus.js
  var EventListener = class {
    constructor(eventTarget, eventName, eventOptions) {
      this.eventTarget = eventTarget;
      this.eventName = eventName;
      this.eventOptions = eventOptions;
      this.unorderedBindings = /* @__PURE__ */ new Set();
    }
    connect() {
      this.eventTarget.addEventListener(this.eventName, this, this.eventOptions);
    }
    disconnect() {
      this.eventTarget.removeEventListener(this.eventName, this, this.eventOptions);
    }
    bindingConnected(binding) {
      this.unorderedBindings.add(binding);
    }
    bindingDisconnected(binding) {
      this.unorderedBindings.delete(binding);
    }
    handleEvent(event) {
      const extendedEvent = extendEvent(event);
      for (const binding of this.bindings) {
        if (extendedEvent.immediatePropagationStopped) {
          break;
        } else {
          binding.handleEvent(extendedEvent);
        }
      }
    }
    hasBindings() {
      return this.unorderedBindings.size > 0;
    }
    get bindings() {
      return Array.from(this.unorderedBindings).sort((left, right) => {
        const leftIndex = left.index, rightIndex = right.index;
        return leftIndex < rightIndex ? -1 : leftIndex > rightIndex ? 1 : 0;
      });
    }
  };
  function extendEvent(event) {
    if ("immediatePropagationStopped" in event) {
      return event;
    } else {
      const { stopImmediatePropagation } = event;
      return Object.assign(event, {
        immediatePropagationStopped: false,
        stopImmediatePropagation() {
          this.immediatePropagationStopped = true;
          stopImmediatePropagation.call(this);
        }
      });
    }
  }
  var Dispatcher = class {
    constructor(application2) {
      this.application = application2;
      this.eventListenerMaps = /* @__PURE__ */ new Map();
      this.started = false;
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.eventListeners.forEach((eventListener) => eventListener.connect());
      }
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.eventListeners.forEach((eventListener) => eventListener.disconnect());
      }
    }
    get eventListeners() {
      return Array.from(this.eventListenerMaps.values()).reduce((listeners, map) => listeners.concat(Array.from(map.values())), []);
    }
    bindingConnected(binding) {
      this.fetchEventListenerForBinding(binding).bindingConnected(binding);
    }
    bindingDisconnected(binding, clearEventListeners = false) {
      this.fetchEventListenerForBinding(binding).bindingDisconnected(binding);
      if (clearEventListeners)
        this.clearEventListenersForBinding(binding);
    }
    handleError(error2, message, detail = {}) {
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    clearEventListenersForBinding(binding) {
      const eventListener = this.fetchEventListenerForBinding(binding);
      if (!eventListener.hasBindings()) {
        eventListener.disconnect();
        this.removeMappedEventListenerFor(binding);
      }
    }
    removeMappedEventListenerFor(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      eventListenerMap.delete(cacheKey);
      if (eventListenerMap.size == 0)
        this.eventListenerMaps.delete(eventTarget);
    }
    fetchEventListenerForBinding(binding) {
      const { eventTarget, eventName, eventOptions } = binding;
      return this.fetchEventListener(eventTarget, eventName, eventOptions);
    }
    fetchEventListener(eventTarget, eventName, eventOptions) {
      const eventListenerMap = this.fetchEventListenerMapForEventTarget(eventTarget);
      const cacheKey = this.cacheKey(eventName, eventOptions);
      let eventListener = eventListenerMap.get(cacheKey);
      if (!eventListener) {
        eventListener = this.createEventListener(eventTarget, eventName, eventOptions);
        eventListenerMap.set(cacheKey, eventListener);
      }
      return eventListener;
    }
    createEventListener(eventTarget, eventName, eventOptions) {
      const eventListener = new EventListener(eventTarget, eventName, eventOptions);
      if (this.started) {
        eventListener.connect();
      }
      return eventListener;
    }
    fetchEventListenerMapForEventTarget(eventTarget) {
      let eventListenerMap = this.eventListenerMaps.get(eventTarget);
      if (!eventListenerMap) {
        eventListenerMap = /* @__PURE__ */ new Map();
        this.eventListenerMaps.set(eventTarget, eventListenerMap);
      }
      return eventListenerMap;
    }
    cacheKey(eventName, eventOptions) {
      const parts = [eventName];
      Object.keys(eventOptions).sort().forEach((key) => {
        parts.push(`${eventOptions[key] ? "" : "!"}${key}`);
      });
      return parts.join(":");
    }
  };
  var defaultActionDescriptorFilters = {
    stop({ event, value }) {
      if (value)
        event.stopPropagation();
      return true;
    },
    prevent({ event, value }) {
      if (value)
        event.preventDefault();
      return true;
    },
    self({ event, value, element }) {
      if (value) {
        return element === event.target;
      } else {
        return true;
      }
    }
  };
  var descriptorPattern = /^(?:(?:([^.]+?)\+)?(.+?)(?:\.(.+?))?(?:@(window|document))?->)?(.+?)(?:#([^:]+?))(?::(.+))?$/;
  function parseActionDescriptorString(descriptorString) {
    const source = descriptorString.trim();
    const matches2 = source.match(descriptorPattern) || [];
    let eventName = matches2[2];
    let keyFilter = matches2[3];
    if (keyFilter && !["keydown", "keyup", "keypress"].includes(eventName)) {
      eventName += `.${keyFilter}`;
      keyFilter = "";
    }
    return {
      eventTarget: parseEventTarget(matches2[4]),
      eventName,
      eventOptions: matches2[7] ? parseEventOptions(matches2[7]) : {},
      identifier: matches2[5],
      methodName: matches2[6],
      keyFilter: matches2[1] || keyFilter
    };
  }
  function parseEventTarget(eventTargetName) {
    if (eventTargetName == "window") {
      return window;
    } else if (eventTargetName == "document") {
      return document;
    }
  }
  function parseEventOptions(eventOptions) {
    return eventOptions.split(":").reduce((options, token) => Object.assign(options, { [token.replace(/^!/, "")]: !/^!/.test(token) }), {});
  }
  function stringifyEventTarget(eventTarget) {
    if (eventTarget == window) {
      return "window";
    } else if (eventTarget == document) {
      return "document";
    }
  }
  function camelize(value) {
    return value.replace(/(?:[_-])([a-z0-9])/g, (_, char) => char.toUpperCase());
  }
  function namespaceCamelize(value) {
    return camelize(value.replace(/--/g, "-").replace(/__/g, "_"));
  }
  function capitalize(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
  function dasherize(value) {
    return value.replace(/([A-Z])/g, (_, char) => `-${char.toLowerCase()}`);
  }
  function tokenize(value) {
    return value.match(/[^\s]+/g) || [];
  }
  function isSomething(object) {
    return object !== null && object !== void 0;
  }
  function hasProperty(object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  }
  var allModifiers = ["meta", "ctrl", "alt", "shift"];
  var Action = class {
    constructor(element, index, descriptor, schema) {
      this.element = element;
      this.index = index;
      this.eventTarget = descriptor.eventTarget || element;
      this.eventName = descriptor.eventName || getDefaultEventNameForElement(element) || error("missing event name");
      this.eventOptions = descriptor.eventOptions || {};
      this.identifier = descriptor.identifier || error("missing identifier");
      this.methodName = descriptor.methodName || error("missing method name");
      this.keyFilter = descriptor.keyFilter || "";
      this.schema = schema;
    }
    static forToken(token, schema) {
      return new this(token.element, token.index, parseActionDescriptorString(token.content), schema);
    }
    toString() {
      const eventFilter = this.keyFilter ? `.${this.keyFilter}` : "";
      const eventTarget = this.eventTargetName ? `@${this.eventTargetName}` : "";
      return `${this.eventName}${eventFilter}${eventTarget}->${this.identifier}#${this.methodName}`;
    }
    shouldIgnoreKeyboardEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = this.keyFilter.split("+");
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      const standardFilter = filters.filter((key) => !allModifiers.includes(key))[0];
      if (!standardFilter) {
        return false;
      }
      if (!hasProperty(this.keyMappings, standardFilter)) {
        error(`contains unknown key filter: ${this.keyFilter}`);
      }
      return this.keyMappings[standardFilter].toLowerCase() !== event.key.toLowerCase();
    }
    shouldIgnoreMouseEvent(event) {
      if (!this.keyFilter) {
        return false;
      }
      const filters = [this.keyFilter];
      if (this.keyFilterDissatisfied(event, filters)) {
        return true;
      }
      return false;
    }
    get params() {
      const params = {};
      const pattern = new RegExp(`^data-${this.identifier}-(.+)-param$`, "i");
      for (const { name, value } of Array.from(this.element.attributes)) {
        const match = name.match(pattern);
        const key = match && match[1];
        if (key) {
          params[camelize(key)] = typecast(value);
        }
      }
      return params;
    }
    get eventTargetName() {
      return stringifyEventTarget(this.eventTarget);
    }
    get keyMappings() {
      return this.schema.keyMappings;
    }
    keyFilterDissatisfied(event, filters) {
      const [meta, ctrl, alt, shift] = allModifiers.map((modifier) => filters.includes(modifier));
      return event.metaKey !== meta || event.ctrlKey !== ctrl || event.altKey !== alt || event.shiftKey !== shift;
    }
  };
  var defaultEventNames = {
    a: () => "click",
    button: () => "click",
    form: () => "submit",
    details: () => "toggle",
    input: (e) => e.getAttribute("type") == "submit" ? "click" : "input",
    select: () => "change",
    textarea: () => "input"
  };
  function getDefaultEventNameForElement(element) {
    const tagName = element.tagName.toLowerCase();
    if (tagName in defaultEventNames) {
      return defaultEventNames[tagName](element);
    }
  }
  function error(message) {
    throw new Error(message);
  }
  function typecast(value) {
    try {
      return JSON.parse(value);
    } catch (o_O) {
      return value;
    }
  }
  var Binding = class {
    constructor(context, action) {
      this.context = context;
      this.action = action;
    }
    get index() {
      return this.action.index;
    }
    get eventTarget() {
      return this.action.eventTarget;
    }
    get eventOptions() {
      return this.action.eventOptions;
    }
    get identifier() {
      return this.context.identifier;
    }
    handleEvent(event) {
      const actionEvent = this.prepareActionEvent(event);
      if (this.willBeInvokedByEvent(event) && this.applyEventModifiers(actionEvent)) {
        this.invokeWithEvent(actionEvent);
      }
    }
    get eventName() {
      return this.action.eventName;
    }
    get method() {
      const method = this.controller[this.methodName];
      if (typeof method == "function") {
        return method;
      }
      throw new Error(`Action "${this.action}" references undefined method "${this.methodName}"`);
    }
    applyEventModifiers(event) {
      const { element } = this.action;
      const { actionDescriptorFilters } = this.context.application;
      const { controller } = this.context;
      let passes = true;
      for (const [name, value] of Object.entries(this.eventOptions)) {
        if (name in actionDescriptorFilters) {
          const filter2 = actionDescriptorFilters[name];
          passes = passes && filter2({ name, value, event, element, controller });
        } else {
          continue;
        }
      }
      return passes;
    }
    prepareActionEvent(event) {
      return Object.assign(event, { params: this.action.params });
    }
    invokeWithEvent(event) {
      const { target, currentTarget } = event;
      try {
        this.method.call(this.controller, event);
        this.context.logDebugActivity(this.methodName, { event, target, currentTarget, action: this.methodName });
      } catch (error2) {
        const { identifier, controller, element, index } = this;
        const detail = { identifier, controller, element, index, event };
        this.context.handleError(error2, `invoking action "${this.action}"`, detail);
      }
    }
    willBeInvokedByEvent(event) {
      const eventTarget = event.target;
      if (event instanceof KeyboardEvent && this.action.shouldIgnoreKeyboardEvent(event)) {
        return false;
      }
      if (event instanceof MouseEvent && this.action.shouldIgnoreMouseEvent(event)) {
        return false;
      }
      if (this.element === eventTarget) {
        return true;
      } else if (eventTarget instanceof Element && this.element.contains(eventTarget)) {
        return this.scope.containsElement(eventTarget);
      } else {
        return this.scope.containsElement(this.action.element);
      }
    }
    get controller() {
      return this.context.controller;
    }
    get methodName() {
      return this.action.methodName;
    }
    get element() {
      return this.scope.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  var ElementObserver = class {
    constructor(element, delegate) {
      this.mutationObserverInit = { attributes: true, childList: true, subtree: true };
      this.element = element;
      this.started = false;
      this.delegate = delegate;
      this.elements = /* @__PURE__ */ new Set();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.refresh();
      }
    }
    pause(callback) {
      if (this.started) {
        this.mutationObserver.disconnect();
        this.started = false;
      }
      callback();
      if (!this.started) {
        this.mutationObserver.observe(this.element, this.mutationObserverInit);
        this.started = true;
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        const matches2 = new Set(this.matchElementsInTree());
        for (const element of Array.from(this.elements)) {
          if (!matches2.has(element)) {
            this.removeElement(element);
          }
        }
        for (const element of Array.from(matches2)) {
          this.addElement(element);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      if (mutation.type == "attributes") {
        this.processAttributeChange(mutation.target, mutation.attributeName);
      } else if (mutation.type == "childList") {
        this.processRemovedNodes(mutation.removedNodes);
        this.processAddedNodes(mutation.addedNodes);
      }
    }
    processAttributeChange(element, attributeName) {
      if (this.elements.has(element)) {
        if (this.delegate.elementAttributeChanged && this.matchElement(element)) {
          this.delegate.elementAttributeChanged(element, attributeName);
        } else {
          this.removeElement(element);
        }
      } else if (this.matchElement(element)) {
        this.addElement(element);
      }
    }
    processRemovedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element) {
          this.processTree(element, this.removeElement);
        }
      }
    }
    processAddedNodes(nodes) {
      for (const node of Array.from(nodes)) {
        const element = this.elementFromNode(node);
        if (element && this.elementIsActive(element)) {
          this.processTree(element, this.addElement);
        }
      }
    }
    matchElement(element) {
      return this.delegate.matchElement(element);
    }
    matchElementsInTree(tree = this.element) {
      return this.delegate.matchElementsInTree(tree);
    }
    processTree(tree, processor) {
      for (const element of this.matchElementsInTree(tree)) {
        processor.call(this, element);
      }
    }
    elementFromNode(node) {
      if (node.nodeType == Node.ELEMENT_NODE) {
        return node;
      }
    }
    elementIsActive(element) {
      if (element.isConnected != this.element.isConnected) {
        return false;
      } else {
        return this.element.contains(element);
      }
    }
    addElement(element) {
      if (!this.elements.has(element)) {
        if (this.elementIsActive(element)) {
          this.elements.add(element);
          if (this.delegate.elementMatched) {
            this.delegate.elementMatched(element);
          }
        }
      }
    }
    removeElement(element) {
      if (this.elements.has(element)) {
        this.elements.delete(element);
        if (this.delegate.elementUnmatched) {
          this.delegate.elementUnmatched(element);
        }
      }
    }
  };
  var AttributeObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeName = attributeName;
      this.delegate = delegate;
      this.elementObserver = new ElementObserver(element, this);
    }
    get element() {
      return this.elementObserver.element;
    }
    get selector() {
      return `[${this.attributeName}]`;
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get started() {
      return this.elementObserver.started;
    }
    matchElement(element) {
      return element.hasAttribute(this.attributeName);
    }
    matchElementsInTree(tree) {
      const match = this.matchElement(tree) ? [tree] : [];
      const matches2 = Array.from(tree.querySelectorAll(this.selector));
      return match.concat(matches2);
    }
    elementMatched(element) {
      if (this.delegate.elementMatchedAttribute) {
        this.delegate.elementMatchedAttribute(element, this.attributeName);
      }
    }
    elementUnmatched(element) {
      if (this.delegate.elementUnmatchedAttribute) {
        this.delegate.elementUnmatchedAttribute(element, this.attributeName);
      }
    }
    elementAttributeChanged(element, attributeName) {
      if (this.delegate.elementAttributeValueChanged && this.attributeName == attributeName) {
        this.delegate.elementAttributeValueChanged(element, attributeName);
      }
    }
  };
  function add(map, key, value) {
    fetch2(map, key).add(value);
  }
  function del(map, key, value) {
    fetch2(map, key).delete(value);
    prune(map, key);
  }
  function fetch2(map, key) {
    let values2 = map.get(key);
    if (!values2) {
      values2 = /* @__PURE__ */ new Set();
      map.set(key, values2);
    }
    return values2;
  }
  function prune(map, key) {
    const values2 = map.get(key);
    if (values2 != null && values2.size == 0) {
      map.delete(key);
    }
  }
  var Multimap = class {
    constructor() {
      this.valuesByKey = /* @__PURE__ */ new Map();
    }
    get keys() {
      return Array.from(this.valuesByKey.keys());
    }
    get values() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((values2, set) => values2.concat(Array.from(set)), []);
    }
    get size() {
      const sets = Array.from(this.valuesByKey.values());
      return sets.reduce((size, set) => size + set.size, 0);
    }
    add(key, value) {
      add(this.valuesByKey, key, value);
    }
    delete(key, value) {
      del(this.valuesByKey, key, value);
    }
    has(key, value) {
      const values2 = this.valuesByKey.get(key);
      return values2 != null && values2.has(value);
    }
    hasKey(key) {
      return this.valuesByKey.has(key);
    }
    hasValue(value) {
      const sets = Array.from(this.valuesByKey.values());
      return sets.some((set) => set.has(value));
    }
    getValuesForKey(key) {
      const values2 = this.valuesByKey.get(key);
      return values2 ? Array.from(values2) : [];
    }
    getKeysForValue(value) {
      return Array.from(this.valuesByKey).filter(([_key, values2]) => values2.has(value)).map(([key, _values]) => key);
    }
  };
  var SelectorObserver = class {
    constructor(element, selector, delegate, details) {
      this._selector = selector;
      this.details = details;
      this.elementObserver = new ElementObserver(element, this);
      this.delegate = delegate;
      this.matchesByElement = new Multimap();
    }
    get started() {
      return this.elementObserver.started;
    }
    get selector() {
      return this._selector;
    }
    set selector(selector) {
      this._selector = selector;
      this.refresh();
    }
    start() {
      this.elementObserver.start();
    }
    pause(callback) {
      this.elementObserver.pause(callback);
    }
    stop() {
      this.elementObserver.stop();
    }
    refresh() {
      this.elementObserver.refresh();
    }
    get element() {
      return this.elementObserver.element;
    }
    matchElement(element) {
      const { selector } = this;
      if (selector) {
        const matches2 = element.matches(selector);
        if (this.delegate.selectorMatchElement) {
          return matches2 && this.delegate.selectorMatchElement(element, this.details);
        }
        return matches2;
      } else {
        return false;
      }
    }
    matchElementsInTree(tree) {
      const { selector } = this;
      if (selector) {
        const match = this.matchElement(tree) ? [tree] : [];
        const matches2 = Array.from(tree.querySelectorAll(selector)).filter((match2) => this.matchElement(match2));
        return match.concat(matches2);
      } else {
        return [];
      }
    }
    elementMatched(element) {
      const { selector } = this;
      if (selector) {
        this.selectorMatched(element, selector);
      }
    }
    elementUnmatched(element) {
      const selectors = this.matchesByElement.getKeysForValue(element);
      for (const selector of selectors) {
        this.selectorUnmatched(element, selector);
      }
    }
    elementAttributeChanged(element, _attributeName) {
      const { selector } = this;
      if (selector) {
        const matches2 = this.matchElement(element);
        const matchedBefore = this.matchesByElement.has(selector, element);
        if (matches2 && !matchedBefore) {
          this.selectorMatched(element, selector);
        } else if (!matches2 && matchedBefore) {
          this.selectorUnmatched(element, selector);
        }
      }
    }
    selectorMatched(element, selector) {
      this.delegate.selectorMatched(element, selector, this.details);
      this.matchesByElement.add(selector, element);
    }
    selectorUnmatched(element, selector) {
      this.delegate.selectorUnmatched(element, selector, this.details);
      this.matchesByElement.delete(selector, element);
    }
  };
  var StringMapObserver = class {
    constructor(element, delegate) {
      this.element = element;
      this.delegate = delegate;
      this.started = false;
      this.stringMap = /* @__PURE__ */ new Map();
      this.mutationObserver = new MutationObserver((mutations) => this.processMutations(mutations));
    }
    start() {
      if (!this.started) {
        this.started = true;
        this.mutationObserver.observe(this.element, { attributes: true, attributeOldValue: true });
        this.refresh();
      }
    }
    stop() {
      if (this.started) {
        this.mutationObserver.takeRecords();
        this.mutationObserver.disconnect();
        this.started = false;
      }
    }
    refresh() {
      if (this.started) {
        for (const attributeName of this.knownAttributeNames) {
          this.refreshAttribute(attributeName, null);
        }
      }
    }
    processMutations(mutations) {
      if (this.started) {
        for (const mutation of mutations) {
          this.processMutation(mutation);
        }
      }
    }
    processMutation(mutation) {
      const attributeName = mutation.attributeName;
      if (attributeName) {
        this.refreshAttribute(attributeName, mutation.oldValue);
      }
    }
    refreshAttribute(attributeName, oldValue) {
      const key = this.delegate.getStringMapKeyForAttribute(attributeName);
      if (key != null) {
        if (!this.stringMap.has(attributeName)) {
          this.stringMapKeyAdded(key, attributeName);
        }
        const value = this.element.getAttribute(attributeName);
        if (this.stringMap.get(attributeName) != value) {
          this.stringMapValueChanged(value, key, oldValue);
        }
        if (value == null) {
          const oldValue2 = this.stringMap.get(attributeName);
          this.stringMap.delete(attributeName);
          if (oldValue2)
            this.stringMapKeyRemoved(key, attributeName, oldValue2);
        } else {
          this.stringMap.set(attributeName, value);
        }
      }
    }
    stringMapKeyAdded(key, attributeName) {
      if (this.delegate.stringMapKeyAdded) {
        this.delegate.stringMapKeyAdded(key, attributeName);
      }
    }
    stringMapValueChanged(value, key, oldValue) {
      if (this.delegate.stringMapValueChanged) {
        this.delegate.stringMapValueChanged(value, key, oldValue);
      }
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      if (this.delegate.stringMapKeyRemoved) {
        this.delegate.stringMapKeyRemoved(key, attributeName, oldValue);
      }
    }
    get knownAttributeNames() {
      return Array.from(new Set(this.currentAttributeNames.concat(this.recordedAttributeNames)));
    }
    get currentAttributeNames() {
      return Array.from(this.element.attributes).map((attribute) => attribute.name);
    }
    get recordedAttributeNames() {
      return Array.from(this.stringMap.keys());
    }
  };
  var TokenListObserver = class {
    constructor(element, attributeName, delegate) {
      this.attributeObserver = new AttributeObserver(element, attributeName, this);
      this.delegate = delegate;
      this.tokensByElement = new Multimap();
    }
    get started() {
      return this.attributeObserver.started;
    }
    start() {
      this.attributeObserver.start();
    }
    pause(callback) {
      this.attributeObserver.pause(callback);
    }
    stop() {
      this.attributeObserver.stop();
    }
    refresh() {
      this.attributeObserver.refresh();
    }
    get element() {
      return this.attributeObserver.element;
    }
    get attributeName() {
      return this.attributeObserver.attributeName;
    }
    elementMatchedAttribute(element) {
      this.tokensMatched(this.readTokensForElement(element));
    }
    elementAttributeValueChanged(element) {
      const [unmatchedTokens, matchedTokens] = this.refreshTokensForElement(element);
      this.tokensUnmatched(unmatchedTokens);
      this.tokensMatched(matchedTokens);
    }
    elementUnmatchedAttribute(element) {
      this.tokensUnmatched(this.tokensByElement.getValuesForKey(element));
    }
    tokensMatched(tokens) {
      tokens.forEach((token) => this.tokenMatched(token));
    }
    tokensUnmatched(tokens) {
      tokens.forEach((token) => this.tokenUnmatched(token));
    }
    tokenMatched(token) {
      this.delegate.tokenMatched(token);
      this.tokensByElement.add(token.element, token);
    }
    tokenUnmatched(token) {
      this.delegate.tokenUnmatched(token);
      this.tokensByElement.delete(token.element, token);
    }
    refreshTokensForElement(element) {
      const previousTokens = this.tokensByElement.getValuesForKey(element);
      const currentTokens = this.readTokensForElement(element);
      const firstDifferingIndex = zip(previousTokens, currentTokens).findIndex(([previousToken, currentToken]) => !tokensAreEqual(previousToken, currentToken));
      if (firstDifferingIndex == -1) {
        return [[], []];
      } else {
        return [previousTokens.slice(firstDifferingIndex), currentTokens.slice(firstDifferingIndex)];
      }
    }
    readTokensForElement(element) {
      const attributeName = this.attributeName;
      const tokenString = element.getAttribute(attributeName) || "";
      return parseTokenString(tokenString, element, attributeName);
    }
  };
  function parseTokenString(tokenString, element, attributeName) {
    return tokenString.trim().split(/\s+/).filter((content) => content.length).map((content, index) => ({ element, attributeName, content, index }));
  }
  function zip(left, right) {
    const length = Math.max(left.length, right.length);
    return Array.from({ length }, (_, index) => [left[index], right[index]]);
  }
  function tokensAreEqual(left, right) {
    return left && right && left.index == right.index && left.content == right.content;
  }
  var ValueListObserver = class {
    constructor(element, attributeName, delegate) {
      this.tokenListObserver = new TokenListObserver(element, attributeName, this);
      this.delegate = delegate;
      this.parseResultsByToken = /* @__PURE__ */ new WeakMap();
      this.valuesByTokenByElement = /* @__PURE__ */ new WeakMap();
    }
    get started() {
      return this.tokenListObserver.started;
    }
    start() {
      this.tokenListObserver.start();
    }
    stop() {
      this.tokenListObserver.stop();
    }
    refresh() {
      this.tokenListObserver.refresh();
    }
    get element() {
      return this.tokenListObserver.element;
    }
    get attributeName() {
      return this.tokenListObserver.attributeName;
    }
    tokenMatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).set(token, value);
        this.delegate.elementMatchedValue(element, value);
      }
    }
    tokenUnmatched(token) {
      const { element } = token;
      const { value } = this.fetchParseResultForToken(token);
      if (value) {
        this.fetchValuesByTokenForElement(element).delete(token);
        this.delegate.elementUnmatchedValue(element, value);
      }
    }
    fetchParseResultForToken(token) {
      let parseResult = this.parseResultsByToken.get(token);
      if (!parseResult) {
        parseResult = this.parseToken(token);
        this.parseResultsByToken.set(token, parseResult);
      }
      return parseResult;
    }
    fetchValuesByTokenForElement(element) {
      let valuesByToken = this.valuesByTokenByElement.get(element);
      if (!valuesByToken) {
        valuesByToken = /* @__PURE__ */ new Map();
        this.valuesByTokenByElement.set(element, valuesByToken);
      }
      return valuesByToken;
    }
    parseToken(token) {
      try {
        const value = this.delegate.parseValueForToken(token);
        return { value };
      } catch (error2) {
        return { error: error2 };
      }
    }
  };
  var BindingObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.bindingsByAction = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.valueListObserver) {
        this.valueListObserver = new ValueListObserver(this.element, this.actionAttribute, this);
        this.valueListObserver.start();
      }
    }
    stop() {
      if (this.valueListObserver) {
        this.valueListObserver.stop();
        delete this.valueListObserver;
        this.disconnectAllActions();
      }
    }
    get element() {
      return this.context.element;
    }
    get identifier() {
      return this.context.identifier;
    }
    get actionAttribute() {
      return this.schema.actionAttribute;
    }
    get schema() {
      return this.context.schema;
    }
    get bindings() {
      return Array.from(this.bindingsByAction.values());
    }
    connectAction(action) {
      const binding = new Binding(this.context, action);
      this.bindingsByAction.set(action, binding);
      this.delegate.bindingConnected(binding);
    }
    disconnectAction(action) {
      const binding = this.bindingsByAction.get(action);
      if (binding) {
        this.bindingsByAction.delete(action);
        this.delegate.bindingDisconnected(binding);
      }
    }
    disconnectAllActions() {
      this.bindings.forEach((binding) => this.delegate.bindingDisconnected(binding, true));
      this.bindingsByAction.clear();
    }
    parseValueForToken(token) {
      const action = Action.forToken(token, this.schema);
      if (action.identifier == this.identifier) {
        return action;
      }
    }
    elementMatchedValue(element, action) {
      this.connectAction(action);
    }
    elementUnmatchedValue(element, action) {
      this.disconnectAction(action);
    }
  };
  var ValueObserver = class {
    constructor(context, receiver) {
      this.context = context;
      this.receiver = receiver;
      this.stringMapObserver = new StringMapObserver(this.element, this);
      this.valueDescriptorMap = this.controller.valueDescriptorMap;
    }
    start() {
      this.stringMapObserver.start();
      this.invokeChangedCallbacksForDefaultValues();
    }
    stop() {
      this.stringMapObserver.stop();
    }
    get element() {
      return this.context.element;
    }
    get controller() {
      return this.context.controller;
    }
    getStringMapKeyForAttribute(attributeName) {
      if (attributeName in this.valueDescriptorMap) {
        return this.valueDescriptorMap[attributeName].name;
      }
    }
    stringMapKeyAdded(key, attributeName) {
      const descriptor = this.valueDescriptorMap[attributeName];
      if (!this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), descriptor.writer(descriptor.defaultValue));
      }
    }
    stringMapValueChanged(value, name, oldValue) {
      const descriptor = this.valueDescriptorNameMap[name];
      if (value === null)
        return;
      if (oldValue === null) {
        oldValue = descriptor.writer(descriptor.defaultValue);
      }
      this.invokeChangedCallback(name, value, oldValue);
    }
    stringMapKeyRemoved(key, attributeName, oldValue) {
      const descriptor = this.valueDescriptorNameMap[key];
      if (this.hasValue(key)) {
        this.invokeChangedCallback(key, descriptor.writer(this.receiver[key]), oldValue);
      } else {
        this.invokeChangedCallback(key, descriptor.writer(descriptor.defaultValue), oldValue);
      }
    }
    invokeChangedCallbacksForDefaultValues() {
      for (const { key, name, defaultValue, writer } of this.valueDescriptors) {
        if (defaultValue != void 0 && !this.controller.data.has(key)) {
          this.invokeChangedCallback(name, writer(defaultValue), void 0);
        }
      }
    }
    invokeChangedCallback(name, rawValue, rawOldValue) {
      const changedMethodName = `${name}Changed`;
      const changedMethod = this.receiver[changedMethodName];
      if (typeof changedMethod == "function") {
        const descriptor = this.valueDescriptorNameMap[name];
        try {
          const value = descriptor.reader(rawValue);
          let oldValue = rawOldValue;
          if (rawOldValue) {
            oldValue = descriptor.reader(rawOldValue);
          }
          changedMethod.call(this.receiver, value, oldValue);
        } catch (error2) {
          if (error2 instanceof TypeError) {
            error2.message = `Stimulus Value "${this.context.identifier}.${descriptor.name}" - ${error2.message}`;
          }
          throw error2;
        }
      }
    }
    get valueDescriptors() {
      const { valueDescriptorMap } = this;
      return Object.keys(valueDescriptorMap).map((key) => valueDescriptorMap[key]);
    }
    get valueDescriptorNameMap() {
      const descriptors2 = {};
      Object.keys(this.valueDescriptorMap).forEach((key) => {
        const descriptor = this.valueDescriptorMap[key];
        descriptors2[descriptor.name] = descriptor;
      });
      return descriptors2;
    }
    hasValue(attributeName) {
      const descriptor = this.valueDescriptorNameMap[attributeName];
      const hasMethodName = `has${capitalize(descriptor.name)}`;
      return this.receiver[hasMethodName];
    }
  };
  var TargetObserver = class {
    constructor(context, delegate) {
      this.context = context;
      this.delegate = delegate;
      this.targetsByName = new Multimap();
    }
    start() {
      if (!this.tokenListObserver) {
        this.tokenListObserver = new TokenListObserver(this.element, this.attributeName, this);
        this.tokenListObserver.start();
      }
    }
    stop() {
      if (this.tokenListObserver) {
        this.disconnectAllTargets();
        this.tokenListObserver.stop();
        delete this.tokenListObserver;
      }
    }
    tokenMatched({ element, content: name }) {
      if (this.scope.containsElement(element)) {
        this.connectTarget(element, name);
      }
    }
    tokenUnmatched({ element, content: name }) {
      this.disconnectTarget(element, name);
    }
    connectTarget(element, name) {
      var _a;
      if (!this.targetsByName.has(name, element)) {
        this.targetsByName.add(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetConnected(element, name));
      }
    }
    disconnectTarget(element, name) {
      var _a;
      if (this.targetsByName.has(name, element)) {
        this.targetsByName.delete(name, element);
        (_a = this.tokenListObserver) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.targetDisconnected(element, name));
      }
    }
    disconnectAllTargets() {
      for (const name of this.targetsByName.keys) {
        for (const element of this.targetsByName.getValuesForKey(name)) {
          this.disconnectTarget(element, name);
        }
      }
    }
    get attributeName() {
      return `data-${this.context.identifier}-target`;
    }
    get element() {
      return this.context.element;
    }
    get scope() {
      return this.context.scope;
    }
  };
  function readInheritableStaticArrayValues(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return Array.from(ancestors.reduce((values2, constructor2) => {
      getOwnStaticArrayValues(constructor2, propertyName).forEach((name) => values2.add(name));
      return values2;
    }, /* @__PURE__ */ new Set()));
  }
  function readInheritableStaticObjectPairs(constructor, propertyName) {
    const ancestors = getAncestorsForConstructor(constructor);
    return ancestors.reduce((pairs, constructor2) => {
      pairs.push(...getOwnStaticObjectPairs(constructor2, propertyName));
      return pairs;
    }, []);
  }
  function getAncestorsForConstructor(constructor) {
    const ancestors = [];
    while (constructor) {
      ancestors.push(constructor);
      constructor = Object.getPrototypeOf(constructor);
    }
    return ancestors.reverse();
  }
  function getOwnStaticArrayValues(constructor, propertyName) {
    const definition = constructor[propertyName];
    return Array.isArray(definition) ? definition : [];
  }
  function getOwnStaticObjectPairs(constructor, propertyName) {
    const definition = constructor[propertyName];
    return definition ? Object.keys(definition).map((key) => [key, definition[key]]) : [];
  }
  var OutletObserver = class {
    constructor(context, delegate) {
      this.started = false;
      this.context = context;
      this.delegate = delegate;
      this.outletsByName = new Multimap();
      this.outletElementsByName = new Multimap();
      this.selectorObserverMap = /* @__PURE__ */ new Map();
      this.attributeObserverMap = /* @__PURE__ */ new Map();
    }
    start() {
      if (!this.started) {
        this.outletDefinitions.forEach((outletName) => {
          this.setupSelectorObserverForOutlet(outletName);
          this.setupAttributeObserverForOutlet(outletName);
        });
        this.started = true;
        this.dependentContexts.forEach((context) => context.refresh());
      }
    }
    refresh() {
      this.selectorObserverMap.forEach((observer) => observer.refresh());
      this.attributeObserverMap.forEach((observer) => observer.refresh());
    }
    stop() {
      if (this.started) {
        this.started = false;
        this.disconnectAllOutlets();
        this.stopSelectorObservers();
        this.stopAttributeObservers();
      }
    }
    stopSelectorObservers() {
      if (this.selectorObserverMap.size > 0) {
        this.selectorObserverMap.forEach((observer) => observer.stop());
        this.selectorObserverMap.clear();
      }
    }
    stopAttributeObservers() {
      if (this.attributeObserverMap.size > 0) {
        this.attributeObserverMap.forEach((observer) => observer.stop());
        this.attributeObserverMap.clear();
      }
    }
    selectorMatched(element, _selector, { outletName }) {
      const outlet = this.getOutlet(element, outletName);
      if (outlet) {
        this.connectOutlet(outlet, element, outletName);
      }
    }
    selectorUnmatched(element, _selector, { outletName }) {
      const outlet = this.getOutletFromMap(element, outletName);
      if (outlet) {
        this.disconnectOutlet(outlet, element, outletName);
      }
    }
    selectorMatchElement(element, { outletName }) {
      const selector = this.selector(outletName);
      const hasOutlet = this.hasOutlet(element, outletName);
      const hasOutletController = element.matches(`[${this.schema.controllerAttribute}~=${outletName}]`);
      if (selector) {
        return hasOutlet && hasOutletController && element.matches(selector);
      } else {
        return false;
      }
    }
    elementMatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementAttributeValueChanged(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    elementUnmatchedAttribute(_element, attributeName) {
      const outletName = this.getOutletNameFromOutletAttributeName(attributeName);
      if (outletName) {
        this.updateSelectorObserverForOutlet(outletName);
      }
    }
    connectOutlet(outlet, element, outletName) {
      var _a;
      if (!this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.add(outletName, outlet);
        this.outletElementsByName.add(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletConnected(outlet, element, outletName));
      }
    }
    disconnectOutlet(outlet, element, outletName) {
      var _a;
      if (this.outletElementsByName.has(outletName, element)) {
        this.outletsByName.delete(outletName, outlet);
        this.outletElementsByName.delete(outletName, element);
        (_a = this.selectorObserverMap.get(outletName)) === null || _a === void 0 ? void 0 : _a.pause(() => this.delegate.outletDisconnected(outlet, element, outletName));
      }
    }
    disconnectAllOutlets() {
      for (const outletName of this.outletElementsByName.keys) {
        for (const element of this.outletElementsByName.getValuesForKey(outletName)) {
          for (const outlet of this.outletsByName.getValuesForKey(outletName)) {
            this.disconnectOutlet(outlet, element, outletName);
          }
        }
      }
    }
    updateSelectorObserverForOutlet(outletName) {
      const observer = this.selectorObserverMap.get(outletName);
      if (observer) {
        observer.selector = this.selector(outletName);
      }
    }
    setupSelectorObserverForOutlet(outletName) {
      const selector = this.selector(outletName);
      const selectorObserver = new SelectorObserver(document.body, selector, this, { outletName });
      this.selectorObserverMap.set(outletName, selectorObserver);
      selectorObserver.start();
    }
    setupAttributeObserverForOutlet(outletName) {
      const attributeName = this.attributeNameForOutletName(outletName);
      const attributeObserver = new AttributeObserver(this.scope.element, attributeName, this);
      this.attributeObserverMap.set(outletName, attributeObserver);
      attributeObserver.start();
    }
    selector(outletName) {
      return this.scope.outlets.getSelectorForOutletName(outletName);
    }
    attributeNameForOutletName(outletName) {
      return this.scope.schema.outletAttributeForScope(this.identifier, outletName);
    }
    getOutletNameFromOutletAttributeName(attributeName) {
      return this.outletDefinitions.find((outletName) => this.attributeNameForOutletName(outletName) === attributeName);
    }
    get outletDependencies() {
      const dependencies = new Multimap();
      this.router.modules.forEach((module) => {
        const constructor = module.definition.controllerConstructor;
        const outlets = readInheritableStaticArrayValues(constructor, "outlets");
        outlets.forEach((outlet) => dependencies.add(outlet, module.identifier));
      });
      return dependencies;
    }
    get outletDefinitions() {
      return this.outletDependencies.getKeysForValue(this.identifier);
    }
    get dependentControllerIdentifiers() {
      return this.outletDependencies.getValuesForKey(this.identifier);
    }
    get dependentContexts() {
      const identifiers = this.dependentControllerIdentifiers;
      return this.router.contexts.filter((context) => identifiers.includes(context.identifier));
    }
    hasOutlet(element, outletName) {
      return !!this.getOutlet(element, outletName) || !!this.getOutletFromMap(element, outletName);
    }
    getOutlet(element, outletName) {
      return this.application.getControllerForElementAndIdentifier(element, outletName);
    }
    getOutletFromMap(element, outletName) {
      return this.outletsByName.getValuesForKey(outletName).find((outlet) => outlet.element === element);
    }
    get scope() {
      return this.context.scope;
    }
    get schema() {
      return this.context.schema;
    }
    get identifier() {
      return this.context.identifier;
    }
    get application() {
      return this.context.application;
    }
    get router() {
      return this.application.router;
    }
  };
  var Context = class {
    constructor(module, scope) {
      this.logDebugActivity = (functionName, detail = {}) => {
        const { identifier, controller, element } = this;
        detail = Object.assign({ identifier, controller, element }, detail);
        this.application.logDebugActivity(this.identifier, functionName, detail);
      };
      this.module = module;
      this.scope = scope;
      this.controller = new module.controllerConstructor(this);
      this.bindingObserver = new BindingObserver(this, this.dispatcher);
      this.valueObserver = new ValueObserver(this, this.controller);
      this.targetObserver = new TargetObserver(this, this);
      this.outletObserver = new OutletObserver(this, this);
      try {
        this.controller.initialize();
        this.logDebugActivity("initialize");
      } catch (error2) {
        this.handleError(error2, "initializing controller");
      }
    }
    connect() {
      this.bindingObserver.start();
      this.valueObserver.start();
      this.targetObserver.start();
      this.outletObserver.start();
      try {
        this.controller.connect();
        this.logDebugActivity("connect");
      } catch (error2) {
        this.handleError(error2, "connecting controller");
      }
    }
    refresh() {
      this.outletObserver.refresh();
    }
    disconnect() {
      try {
        this.controller.disconnect();
        this.logDebugActivity("disconnect");
      } catch (error2) {
        this.handleError(error2, "disconnecting controller");
      }
      this.outletObserver.stop();
      this.targetObserver.stop();
      this.valueObserver.stop();
      this.bindingObserver.stop();
    }
    get application() {
      return this.module.application;
    }
    get identifier() {
      return this.module.identifier;
    }
    get schema() {
      return this.application.schema;
    }
    get dispatcher() {
      return this.application.dispatcher;
    }
    get element() {
      return this.scope.element;
    }
    get parentElement() {
      return this.element.parentElement;
    }
    handleError(error2, message, detail = {}) {
      const { identifier, controller, element } = this;
      detail = Object.assign({ identifier, controller, element }, detail);
      this.application.handleError(error2, `Error ${message}`, detail);
    }
    targetConnected(element, name) {
      this.invokeControllerMethod(`${name}TargetConnected`, element);
    }
    targetDisconnected(element, name) {
      this.invokeControllerMethod(`${name}TargetDisconnected`, element);
    }
    outletConnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletConnected`, outlet, element);
    }
    outletDisconnected(outlet, element, name) {
      this.invokeControllerMethod(`${namespaceCamelize(name)}OutletDisconnected`, outlet, element);
    }
    invokeControllerMethod(methodName, ...args) {
      const controller = this.controller;
      if (typeof controller[methodName] == "function") {
        controller[methodName](...args);
      }
    }
  };
  function bless(constructor) {
    return shadow(constructor, getBlessedProperties(constructor));
  }
  function shadow(constructor, properties) {
    const shadowConstructor = extend(constructor);
    const shadowProperties = getShadowProperties(constructor.prototype, properties);
    Object.defineProperties(shadowConstructor.prototype, shadowProperties);
    return shadowConstructor;
  }
  function getBlessedProperties(constructor) {
    const blessings = readInheritableStaticArrayValues(constructor, "blessings");
    return blessings.reduce((blessedProperties, blessing) => {
      const properties = blessing(constructor);
      for (const key in properties) {
        const descriptor = blessedProperties[key] || {};
        blessedProperties[key] = Object.assign(descriptor, properties[key]);
      }
      return blessedProperties;
    }, {});
  }
  function getShadowProperties(prototype3, properties) {
    return getOwnKeys(properties).reduce((shadowProperties, key) => {
      const descriptor = getShadowedDescriptor(prototype3, properties, key);
      if (descriptor) {
        Object.assign(shadowProperties, { [key]: descriptor });
      }
      return shadowProperties;
    }, {});
  }
  function getShadowedDescriptor(prototype3, properties, key) {
    const shadowingDescriptor = Object.getOwnPropertyDescriptor(prototype3, key);
    const shadowedByValue = shadowingDescriptor && "value" in shadowingDescriptor;
    if (!shadowedByValue) {
      const descriptor = Object.getOwnPropertyDescriptor(properties, key).value;
      if (shadowingDescriptor) {
        descriptor.get = shadowingDescriptor.get || descriptor.get;
        descriptor.set = shadowingDescriptor.set || descriptor.set;
      }
      return descriptor;
    }
  }
  var getOwnKeys = (() => {
    if (typeof Object.getOwnPropertySymbols == "function") {
      return (object) => [...Object.getOwnPropertyNames(object), ...Object.getOwnPropertySymbols(object)];
    } else {
      return Object.getOwnPropertyNames;
    }
  })();
  var extend = (() => {
    function extendWithReflect(constructor) {
      function extended() {
        return Reflect.construct(constructor, arguments, new.target);
      }
      extended.prototype = Object.create(constructor.prototype, {
        constructor: { value: extended }
      });
      Reflect.setPrototypeOf(extended, constructor);
      return extended;
    }
    function testReflectExtension() {
      const a = function() {
        this.a.call(this);
      };
      const b = extendWithReflect(a);
      b.prototype.a = function() {
      };
      return new b();
    }
    try {
      testReflectExtension();
      return extendWithReflect;
    } catch (error2) {
      return (constructor) => class extended extends constructor {
      };
    }
  })();
  function blessDefinition(definition) {
    return {
      identifier: definition.identifier,
      controllerConstructor: bless(definition.controllerConstructor)
    };
  }
  var Module = class {
    constructor(application2, definition) {
      this.application = application2;
      this.definition = blessDefinition(definition);
      this.contextsByScope = /* @__PURE__ */ new WeakMap();
      this.connectedContexts = /* @__PURE__ */ new Set();
    }
    get identifier() {
      return this.definition.identifier;
    }
    get controllerConstructor() {
      return this.definition.controllerConstructor;
    }
    get contexts() {
      return Array.from(this.connectedContexts);
    }
    connectContextForScope(scope) {
      const context = this.fetchContextForScope(scope);
      this.connectedContexts.add(context);
      context.connect();
    }
    disconnectContextForScope(scope) {
      const context = this.contextsByScope.get(scope);
      if (context) {
        this.connectedContexts.delete(context);
        context.disconnect();
      }
    }
    fetchContextForScope(scope) {
      let context = this.contextsByScope.get(scope);
      if (!context) {
        context = new Context(this, scope);
        this.contextsByScope.set(scope, context);
      }
      return context;
    }
  };
  var ClassMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    has(name) {
      return this.data.has(this.getDataKey(name));
    }
    get(name) {
      return this.getAll(name)[0];
    }
    getAll(name) {
      const tokenString = this.data.get(this.getDataKey(name)) || "";
      return tokenize(tokenString);
    }
    getAttributeName(name) {
      return this.data.getAttributeNameForKey(this.getDataKey(name));
    }
    getDataKey(name) {
      return `${name}-class`;
    }
    get data() {
      return this.scope.data;
    }
  };
  var DataMap = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.getAttribute(name);
    }
    set(key, value) {
      const name = this.getAttributeNameForKey(key);
      this.element.setAttribute(name, value);
      return this.get(key);
    }
    has(key) {
      const name = this.getAttributeNameForKey(key);
      return this.element.hasAttribute(name);
    }
    delete(key) {
      if (this.has(key)) {
        const name = this.getAttributeNameForKey(key);
        this.element.removeAttribute(name);
        return true;
      } else {
        return false;
      }
    }
    getAttributeNameForKey(key) {
      return `data-${this.identifier}-${dasherize(key)}`;
    }
  };
  var Guide = class {
    constructor(logger) {
      this.warnedKeysByObject = /* @__PURE__ */ new WeakMap();
      this.logger = logger;
    }
    warn(object, key, message) {
      let warnedKeys = this.warnedKeysByObject.get(object);
      if (!warnedKeys) {
        warnedKeys = /* @__PURE__ */ new Set();
        this.warnedKeysByObject.set(object, warnedKeys);
      }
      if (!warnedKeys.has(key)) {
        warnedKeys.add(key);
        this.logger.warn(message, object);
      }
    }
  };
  function attributeValueContainsToken(attributeName, token) {
    return `[${attributeName}~="${token}"]`;
  }
  var TargetSet = class {
    constructor(scope) {
      this.scope = scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(targetName) {
      return this.find(targetName) != null;
    }
    find(...targetNames) {
      return targetNames.reduce((target, targetName) => target || this.findTarget(targetName) || this.findLegacyTarget(targetName), void 0);
    }
    findAll(...targetNames) {
      return targetNames.reduce((targets, targetName) => [
        ...targets,
        ...this.findAllTargets(targetName),
        ...this.findAllLegacyTargets(targetName)
      ], []);
    }
    findTarget(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findElement(selector);
    }
    findAllTargets(targetName) {
      const selector = this.getSelectorForTargetName(targetName);
      return this.scope.findAllElements(selector);
    }
    getSelectorForTargetName(targetName) {
      const attributeName = this.schema.targetAttributeForScope(this.identifier);
      return attributeValueContainsToken(attributeName, targetName);
    }
    findLegacyTarget(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.deprecate(this.scope.findElement(selector), targetName);
    }
    findAllLegacyTargets(targetName) {
      const selector = this.getLegacySelectorForTargetName(targetName);
      return this.scope.findAllElements(selector).map((element) => this.deprecate(element, targetName));
    }
    getLegacySelectorForTargetName(targetName) {
      const targetDescriptor = `${this.identifier}.${targetName}`;
      return attributeValueContainsToken(this.schema.targetAttribute, targetDescriptor);
    }
    deprecate(element, targetName) {
      if (element) {
        const { identifier } = this;
        const attributeName = this.schema.targetAttribute;
        const revisedAttributeName = this.schema.targetAttributeForScope(identifier);
        this.guide.warn(element, `target:${targetName}`, `Please replace ${attributeName}="${identifier}.${targetName}" with ${revisedAttributeName}="${targetName}". The ${attributeName} attribute is deprecated and will be removed in a future version of Stimulus.`);
      }
      return element;
    }
    get guide() {
      return this.scope.guide;
    }
  };
  var OutletSet = class {
    constructor(scope, controllerElement) {
      this.scope = scope;
      this.controllerElement = controllerElement;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get schema() {
      return this.scope.schema;
    }
    has(outletName) {
      return this.find(outletName) != null;
    }
    find(...outletNames) {
      return outletNames.reduce((outlet, outletName) => outlet || this.findOutlet(outletName), void 0);
    }
    findAll(...outletNames) {
      return outletNames.reduce((outlets, outletName) => [...outlets, ...this.findAllOutlets(outletName)], []);
    }
    getSelectorForOutletName(outletName) {
      const attributeName = this.schema.outletAttributeForScope(this.identifier, outletName);
      return this.controllerElement.getAttribute(attributeName);
    }
    findOutlet(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      if (selector)
        return this.findElement(selector, outletName);
    }
    findAllOutlets(outletName) {
      const selector = this.getSelectorForOutletName(outletName);
      return selector ? this.findAllElements(selector, outletName) : [];
    }
    findElement(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName))[0];
    }
    findAllElements(selector, outletName) {
      const elements = this.scope.queryElements(selector);
      return elements.filter((element) => this.matchesElement(element, selector, outletName));
    }
    matchesElement(element, selector, outletName) {
      const controllerAttribute = element.getAttribute(this.scope.schema.controllerAttribute) || "";
      return element.matches(selector) && controllerAttribute.split(" ").includes(outletName);
    }
  };
  var Scope = class _Scope {
    constructor(schema, element, identifier, logger) {
      this.targets = new TargetSet(this);
      this.classes = new ClassMap(this);
      this.data = new DataMap(this);
      this.containsElement = (element2) => {
        return element2.closest(this.controllerSelector) === this.element;
      };
      this.schema = schema;
      this.element = element;
      this.identifier = identifier;
      this.guide = new Guide(logger);
      this.outlets = new OutletSet(this.documentScope, element);
    }
    findElement(selector) {
      return this.element.matches(selector) ? this.element : this.queryElements(selector).find(this.containsElement);
    }
    findAllElements(selector) {
      return [
        ...this.element.matches(selector) ? [this.element] : [],
        ...this.queryElements(selector).filter(this.containsElement)
      ];
    }
    queryElements(selector) {
      return Array.from(this.element.querySelectorAll(selector));
    }
    get controllerSelector() {
      return attributeValueContainsToken(this.schema.controllerAttribute, this.identifier);
    }
    get isDocumentScope() {
      return this.element === document.documentElement;
    }
    get documentScope() {
      return this.isDocumentScope ? this : new _Scope(this.schema, document.documentElement, this.identifier, this.guide.logger);
    }
  };
  var ScopeObserver = class {
    constructor(element, schema, delegate) {
      this.element = element;
      this.schema = schema;
      this.delegate = delegate;
      this.valueListObserver = new ValueListObserver(this.element, this.controllerAttribute, this);
      this.scopesByIdentifierByElement = /* @__PURE__ */ new WeakMap();
      this.scopeReferenceCounts = /* @__PURE__ */ new WeakMap();
    }
    start() {
      this.valueListObserver.start();
    }
    stop() {
      this.valueListObserver.stop();
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    parseValueForToken(token) {
      const { element, content: identifier } = token;
      return this.parseValueForElementAndIdentifier(element, identifier);
    }
    parseValueForElementAndIdentifier(element, identifier) {
      const scopesByIdentifier = this.fetchScopesByIdentifierForElement(element);
      let scope = scopesByIdentifier.get(identifier);
      if (!scope) {
        scope = this.delegate.createScopeForElementAndIdentifier(element, identifier);
        scopesByIdentifier.set(identifier, scope);
      }
      return scope;
    }
    elementMatchedValue(element, value) {
      const referenceCount = (this.scopeReferenceCounts.get(value) || 0) + 1;
      this.scopeReferenceCounts.set(value, referenceCount);
      if (referenceCount == 1) {
        this.delegate.scopeConnected(value);
      }
    }
    elementUnmatchedValue(element, value) {
      const referenceCount = this.scopeReferenceCounts.get(value);
      if (referenceCount) {
        this.scopeReferenceCounts.set(value, referenceCount - 1);
        if (referenceCount == 1) {
          this.delegate.scopeDisconnected(value);
        }
      }
    }
    fetchScopesByIdentifierForElement(element) {
      let scopesByIdentifier = this.scopesByIdentifierByElement.get(element);
      if (!scopesByIdentifier) {
        scopesByIdentifier = /* @__PURE__ */ new Map();
        this.scopesByIdentifierByElement.set(element, scopesByIdentifier);
      }
      return scopesByIdentifier;
    }
  };
  var Router = class {
    constructor(application2) {
      this.application = application2;
      this.scopeObserver = new ScopeObserver(this.element, this.schema, this);
      this.scopesByIdentifier = new Multimap();
      this.modulesByIdentifier = /* @__PURE__ */ new Map();
    }
    get element() {
      return this.application.element;
    }
    get schema() {
      return this.application.schema;
    }
    get logger() {
      return this.application.logger;
    }
    get controllerAttribute() {
      return this.schema.controllerAttribute;
    }
    get modules() {
      return Array.from(this.modulesByIdentifier.values());
    }
    get contexts() {
      return this.modules.reduce((contexts, module) => contexts.concat(module.contexts), []);
    }
    start() {
      this.scopeObserver.start();
    }
    stop() {
      this.scopeObserver.stop();
    }
    loadDefinition(definition) {
      this.unloadIdentifier(definition.identifier);
      const module = new Module(this.application, definition);
      this.connectModule(module);
      const afterLoad = definition.controllerConstructor.afterLoad;
      if (afterLoad) {
        afterLoad.call(definition.controllerConstructor, definition.identifier, this.application);
      }
    }
    unloadIdentifier(identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        this.disconnectModule(module);
      }
    }
    getContextForElementAndIdentifier(element, identifier) {
      const module = this.modulesByIdentifier.get(identifier);
      if (module) {
        return module.contexts.find((context) => context.element == element);
      }
    }
    proposeToConnectScopeForElementAndIdentifier(element, identifier) {
      const scope = this.scopeObserver.parseValueForElementAndIdentifier(element, identifier);
      if (scope) {
        this.scopeObserver.elementMatchedValue(scope.element, scope);
      } else {
        console.error(`Couldn't find or create scope for identifier: "${identifier}" and element:`, element);
      }
    }
    handleError(error2, message, detail) {
      this.application.handleError(error2, message, detail);
    }
    createScopeForElementAndIdentifier(element, identifier) {
      return new Scope(this.schema, element, identifier, this.logger);
    }
    scopeConnected(scope) {
      this.scopesByIdentifier.add(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.connectContextForScope(scope);
      }
    }
    scopeDisconnected(scope) {
      this.scopesByIdentifier.delete(scope.identifier, scope);
      const module = this.modulesByIdentifier.get(scope.identifier);
      if (module) {
        module.disconnectContextForScope(scope);
      }
    }
    connectModule(module) {
      this.modulesByIdentifier.set(module.identifier, module);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.connectContextForScope(scope));
    }
    disconnectModule(module) {
      this.modulesByIdentifier.delete(module.identifier);
      const scopes = this.scopesByIdentifier.getValuesForKey(module.identifier);
      scopes.forEach((scope) => module.disconnectContextForScope(scope));
    }
  };
  var defaultSchema = {
    controllerAttribute: "data-controller",
    actionAttribute: "data-action",
    targetAttribute: "data-target",
    targetAttributeForScope: (identifier) => `data-${identifier}-target`,
    outletAttributeForScope: (identifier, outlet) => `data-${identifier}-${outlet}-outlet`,
    keyMappings: Object.assign(Object.assign({ enter: "Enter", tab: "Tab", esc: "Escape", space: " ", up: "ArrowUp", down: "ArrowDown", left: "ArrowLeft", right: "ArrowRight", home: "Home", end: "End", page_up: "PageUp", page_down: "PageDown" }, objectFromEntries("abcdefghijklmnopqrstuvwxyz".split("").map((c) => [c, c]))), objectFromEntries("0123456789".split("").map((n) => [n, n])))
  };
  function objectFromEntries(array) {
    return array.reduce((memo11, [k, v]) => Object.assign(Object.assign({}, memo11), { [k]: v }), {});
  }
  var Application = class {
    constructor(element = document.documentElement, schema = defaultSchema) {
      this.logger = console;
      this.debug = false;
      this.logDebugActivity = (identifier, functionName, detail = {}) => {
        if (this.debug) {
          this.logFormattedMessage(identifier, functionName, detail);
        }
      };
      this.element = element;
      this.schema = schema;
      this.dispatcher = new Dispatcher(this);
      this.router = new Router(this);
      this.actionDescriptorFilters = Object.assign({}, defaultActionDescriptorFilters);
    }
    static start(element, schema) {
      const application2 = new this(element, schema);
      application2.start();
      return application2;
    }
    async start() {
      await domReady();
      this.logDebugActivity("application", "starting");
      this.dispatcher.start();
      this.router.start();
      this.logDebugActivity("application", "start");
    }
    stop() {
      this.logDebugActivity("application", "stopping");
      this.dispatcher.stop();
      this.router.stop();
      this.logDebugActivity("application", "stop");
    }
    register(identifier, controllerConstructor) {
      this.load({ identifier, controllerConstructor });
    }
    registerActionOption(name, filter2) {
      this.actionDescriptorFilters[name] = filter2;
    }
    load(head, ...rest) {
      const definitions = Array.isArray(head) ? head : [head, ...rest];
      definitions.forEach((definition) => {
        if (definition.controllerConstructor.shouldLoad) {
          this.router.loadDefinition(definition);
        }
      });
    }
    unload(head, ...rest) {
      const identifiers = Array.isArray(head) ? head : [head, ...rest];
      identifiers.forEach((identifier) => this.router.unloadIdentifier(identifier));
    }
    get controllers() {
      return this.router.contexts.map((context) => context.controller);
    }
    getControllerForElementAndIdentifier(element, identifier) {
      const context = this.router.getContextForElementAndIdentifier(element, identifier);
      return context ? context.controller : null;
    }
    handleError(error2, message, detail) {
      var _a;
      this.logger.error(`%s

%o

%o`, message, error2, detail);
      (_a = window.onerror) === null || _a === void 0 ? void 0 : _a.call(window, message, "", 0, 0, error2);
    }
    logFormattedMessage(identifier, functionName, detail = {}) {
      detail = Object.assign({ application: this }, detail);
      this.logger.groupCollapsed(`${identifier} #${functionName}`);
      this.logger.log("details:", Object.assign({}, detail));
      this.logger.groupEnd();
    }
  };
  function domReady() {
    return new Promise((resolve) => {
      if (document.readyState == "loading") {
        document.addEventListener("DOMContentLoaded", () => resolve());
      } else {
        resolve();
      }
    });
  }
  function ClassPropertiesBlessing(constructor) {
    const classes = readInheritableStaticArrayValues(constructor, "classes");
    return classes.reduce((properties, classDefinition) => {
      return Object.assign(properties, propertiesForClassDefinition(classDefinition));
    }, {});
  }
  function propertiesForClassDefinition(key) {
    return {
      [`${key}Class`]: {
        get() {
          const { classes } = this;
          if (classes.has(key)) {
            return classes.get(key);
          } else {
            const attribute = classes.getAttributeName(key);
            throw new Error(`Missing attribute "${attribute}"`);
          }
        }
      },
      [`${key}Classes`]: {
        get() {
          return this.classes.getAll(key);
        }
      },
      [`has${capitalize(key)}Class`]: {
        get() {
          return this.classes.has(key);
        }
      }
    };
  }
  function OutletPropertiesBlessing(constructor) {
    const outlets = readInheritableStaticArrayValues(constructor, "outlets");
    return outlets.reduce((properties, outletDefinition) => {
      return Object.assign(properties, propertiesForOutletDefinition(outletDefinition));
    }, {});
  }
  function getOutletController(controller, element, identifier) {
    return controller.application.getControllerForElementAndIdentifier(element, identifier);
  }
  function getControllerAndEnsureConnectedScope(controller, element, outletName) {
    let outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
    controller.application.router.proposeToConnectScopeForElementAndIdentifier(element, outletName);
    outletController = getOutletController(controller, element, outletName);
    if (outletController)
      return outletController;
  }
  function propertiesForOutletDefinition(name) {
    const camelizedName = namespaceCamelize(name);
    return {
      [`${camelizedName}Outlet`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
            if (outletController)
              return outletController;
            throw new Error(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`);
          }
          throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
        }
      },
      [`${camelizedName}Outlets`]: {
        get() {
          const outlets = this.outlets.findAll(name);
          if (outlets.length > 0) {
            return outlets.map((outletElement) => {
              const outletController = getControllerAndEnsureConnectedScope(this, outletElement, name);
              if (outletController)
                return outletController;
              console.warn(`The provided outlet element is missing an outlet controller "${name}" instance for host controller "${this.identifier}"`, outletElement);
            }).filter((controller) => controller);
          }
          return [];
        }
      },
      [`${camelizedName}OutletElement`]: {
        get() {
          const outletElement = this.outlets.find(name);
          const selector = this.outlets.getSelectorForOutletName(name);
          if (outletElement) {
            return outletElement;
          } else {
            throw new Error(`Missing outlet element "${name}" for host controller "${this.identifier}". Stimulus couldn't find a matching outlet element using selector "${selector}".`);
          }
        }
      },
      [`${camelizedName}OutletElements`]: {
        get() {
          return this.outlets.findAll(name);
        }
      },
      [`has${capitalize(camelizedName)}Outlet`]: {
        get() {
          return this.outlets.has(name);
        }
      }
    };
  }
  function TargetPropertiesBlessing(constructor) {
    const targets = readInheritableStaticArrayValues(constructor, "targets");
    return targets.reduce((properties, targetDefinition) => {
      return Object.assign(properties, propertiesForTargetDefinition(targetDefinition));
    }, {});
  }
  function propertiesForTargetDefinition(name) {
    return {
      [`${name}Target`]: {
        get() {
          const target = this.targets.find(name);
          if (target) {
            return target;
          } else {
            throw new Error(`Missing target element "${name}" for "${this.identifier}" controller`);
          }
        }
      },
      [`${name}Targets`]: {
        get() {
          return this.targets.findAll(name);
        }
      },
      [`has${capitalize(name)}Target`]: {
        get() {
          return this.targets.has(name);
        }
      }
    };
  }
  function ValuePropertiesBlessing(constructor) {
    const valueDefinitionPairs = readInheritableStaticObjectPairs(constructor, "values");
    const propertyDescriptorMap = {
      valueDescriptorMap: {
        get() {
          return valueDefinitionPairs.reduce((result, valueDefinitionPair) => {
            const valueDescriptor = parseValueDefinitionPair(valueDefinitionPair, this.identifier);
            const attributeName = this.data.getAttributeNameForKey(valueDescriptor.key);
            return Object.assign(result, { [attributeName]: valueDescriptor });
          }, {});
        }
      }
    };
    return valueDefinitionPairs.reduce((properties, valueDefinitionPair) => {
      return Object.assign(properties, propertiesForValueDefinitionPair(valueDefinitionPair));
    }, propertyDescriptorMap);
  }
  function propertiesForValueDefinitionPair(valueDefinitionPair, controller) {
    const definition = parseValueDefinitionPair(valueDefinitionPair, controller);
    const { key, name, reader: read, writer: write } = definition;
    return {
      [name]: {
        get() {
          const value = this.data.get(key);
          if (value !== null) {
            return read(value);
          } else {
            return definition.defaultValue;
          }
        },
        set(value) {
          if (value === void 0) {
            this.data.delete(key);
          } else {
            this.data.set(key, write(value));
          }
        }
      },
      [`has${capitalize(name)}`]: {
        get() {
          return this.data.has(key) || definition.hasCustomDefaultValue;
        }
      }
    };
  }
  function parseValueDefinitionPair([token, typeDefinition], controller) {
    return valueDescriptorForTokenAndTypeDefinition({
      controller,
      token,
      typeDefinition
    });
  }
  function parseValueTypeConstant(constant) {
    switch (constant) {
      case Array:
        return "array";
      case Boolean:
        return "boolean";
      case Number:
        return "number";
      case Object:
        return "object";
      case String:
        return "string";
    }
  }
  function parseValueTypeDefault(defaultValue) {
    switch (typeof defaultValue) {
      case "boolean":
        return "boolean";
      case "number":
        return "number";
      case "string":
        return "string";
    }
    if (Array.isArray(defaultValue))
      return "array";
    if (Object.prototype.toString.call(defaultValue) === "[object Object]")
      return "object";
  }
  function parseValueTypeObject(payload) {
    const { controller, token, typeObject } = payload;
    const hasType = isSomething(typeObject.type);
    const hasDefault = isSomething(typeObject.default);
    const fullObject = hasType && hasDefault;
    const onlyType = hasType && !hasDefault;
    const onlyDefault = !hasType && hasDefault;
    const typeFromObject = parseValueTypeConstant(typeObject.type);
    const typeFromDefaultValue = parseValueTypeDefault(payload.typeObject.default);
    if (onlyType)
      return typeFromObject;
    if (onlyDefault)
      return typeFromDefaultValue;
    if (typeFromObject !== typeFromDefaultValue) {
      const propertyPath = controller ? `${controller}.${token}` : token;
      throw new Error(`The specified default value for the Stimulus Value "${propertyPath}" must match the defined type "${typeFromObject}". The provided default value of "${typeObject.default}" is of type "${typeFromDefaultValue}".`);
    }
    if (fullObject)
      return typeFromObject;
  }
  function parseValueTypeDefinition(payload) {
    const { controller, token, typeDefinition } = payload;
    const typeObject = { controller, token, typeObject: typeDefinition };
    const typeFromObject = parseValueTypeObject(typeObject);
    const typeFromDefaultValue = parseValueTypeDefault(typeDefinition);
    const typeFromConstant = parseValueTypeConstant(typeDefinition);
    const type = typeFromObject || typeFromDefaultValue || typeFromConstant;
    if (type)
      return type;
    const propertyPath = controller ? `${controller}.${typeDefinition}` : token;
    throw new Error(`Unknown value type "${propertyPath}" for "${token}" value`);
  }
  function defaultValueForDefinition(typeDefinition) {
    const constant = parseValueTypeConstant(typeDefinition);
    if (constant)
      return defaultValuesByType[constant];
    const hasDefault = hasProperty(typeDefinition, "default");
    const hasType = hasProperty(typeDefinition, "type");
    const typeObject = typeDefinition;
    if (hasDefault)
      return typeObject.default;
    if (hasType) {
      const { type } = typeObject;
      const constantFromType = parseValueTypeConstant(type);
      if (constantFromType)
        return defaultValuesByType[constantFromType];
    }
    return typeDefinition;
  }
  function valueDescriptorForTokenAndTypeDefinition(payload) {
    const { token, typeDefinition } = payload;
    const key = `${dasherize(token)}-value`;
    const type = parseValueTypeDefinition(payload);
    return {
      type,
      key,
      name: camelize(key),
      get defaultValue() {
        return defaultValueForDefinition(typeDefinition);
      },
      get hasCustomDefaultValue() {
        return parseValueTypeDefault(typeDefinition) !== void 0;
      },
      reader: readers[type],
      writer: writers[type] || writers.default
    };
  }
  var defaultValuesByType = {
    get array() {
      return [];
    },
    boolean: false,
    number: 0,
    get object() {
      return {};
    },
    string: ""
  };
  var readers = {
    array(value) {
      const array = JSON.parse(value);
      if (!Array.isArray(array)) {
        throw new TypeError(`expected value of type "array" but instead got value "${value}" of type "${parseValueTypeDefault(array)}"`);
      }
      return array;
    },
    boolean(value) {
      return !(value == "0" || String(value).toLowerCase() == "false");
    },
    number(value) {
      return Number(value.replace(/_/g, ""));
    },
    object(value) {
      const object = JSON.parse(value);
      if (object === null || typeof object != "object" || Array.isArray(object)) {
        throw new TypeError(`expected value of type "object" but instead got value "${value}" of type "${parseValueTypeDefault(object)}"`);
      }
      return object;
    },
    string(value) {
      return value;
    }
  };
  var writers = {
    default: writeString,
    array: writeJSON,
    object: writeJSON
  };
  function writeJSON(value) {
    return JSON.stringify(value);
  }
  function writeString(value) {
    return `${value}`;
  }
  var Controller = class {
    constructor(context) {
      this.context = context;
    }
    static get shouldLoad() {
      return true;
    }
    static afterLoad(_identifier, _application) {
      return;
    }
    get application() {
      return this.context.application;
    }
    get scope() {
      return this.context.scope;
    }
    get element() {
      return this.scope.element;
    }
    get identifier() {
      return this.scope.identifier;
    }
    get targets() {
      return this.scope.targets;
    }
    get outlets() {
      return this.scope.outlets;
    }
    get classes() {
      return this.scope.classes;
    }
    get data() {
      return this.scope.data;
    }
    initialize() {
    }
    connect() {
    }
    disconnect() {
    }
    dispatch(eventName, { target = this.element, detail = {}, prefix = this.identifier, bubbles = true, cancelable = true } = {}) {
      const type = prefix ? `${prefix}:${eventName}` : eventName;
      const event = new CustomEvent(type, { detail, bubbles, cancelable });
      target.dispatchEvent(event);
      return event;
    }
  };
  Controller.blessings = [
    ClassPropertiesBlessing,
    TargetPropertiesBlessing,
    ValuePropertiesBlessing,
    OutletPropertiesBlessing
  ];
  Controller.targets = [];
  Controller.outlets = [];
  Controller.values = {};

  // app/javascript/application.jsx
  var import_react189 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // node_modules/react-router/dist/production/chunk-L6MGG5FJ.mjs
  var React3 = __toESM(require_react(), 1);
  var React = __toESM(require_react(), 1);
  var React2 = __toESM(require_react(), 1);
  var React10 = __toESM(require_react(), 1);
  var React9 = __toESM(require_react(), 1);
  var React4 = __toESM(require_react(), 1);
  var React8 = __toESM(require_react(), 1);
  var React7 = __toESM(require_react(), 1);
  var React5 = __toESM(require_react(), 1);
  var React6 = __toESM(require_react(), 1);
  var React11 = __toESM(require_react(), 1);
  var React12 = __toESM(require_react(), 1);
  var React13 = __toESM(require_react(), 1);
  var import_cookie = __toESM(require_dist(), 1);
  var import_meta = {};
  var PopStateEventType = "popstate";
  function createBrowserHistory(options = {}) {
    function createBrowserLocation(window2, globalHistory) {
      let { pathname, search, hash } = window2.location;
      return createLocation(
        "",
        { pathname, search, hash },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(
      createBrowserLocation,
      createBrowserHref,
      null,
      options
    );
  }
  function invariant(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  function warning(cond, message) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message);
      try {
        throw new Error(message);
      } catch (e) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substring(2, 10);
  }
  function getHistoryState(location2, index) {
    return {
      usr: location2.state,
      key: location2.key,
      idx: index
    };
  }
  function createLocation(current, to, state = null, key) {
    let location2 = {
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: "",
      ...typeof to === "string" ? parsePath(to) : to,
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    };
    return location2;
  }
  function createPath({
    pathname = "/",
    search = "",
    hash = ""
  }) {
    if (search && search !== "?")
      pathname += search.charAt(0) === "?" ? search : "?" + search;
    if (hash && hash !== "#")
      pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
    return pathname;
  }
  function parsePath(path) {
    let parsedPath = {};
    if (path) {
      let hashIndex = path.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path.substring(hashIndex);
        path = path.substring(0, hashIndex);
      }
      let searchIndex = path.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path.substring(searchIndex);
        path = path.substring(0, searchIndex);
      }
      if (path) {
        parsedPath.pathname = path;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref2, validateLocation, options = {}) {
    let { window: window2 = document.defaultView, v5Compat = false } = options;
    let globalHistory = window2.history;
    let action = "POP";
    let listener = null;
    let index = getIndex();
    if (index == null) {
      index = 0;
      globalHistory.replaceState({ ...globalHistory.state, idx: index }, "");
    }
    function getIndex() {
      let state = globalHistory.state || { idx: null };
      return state.idx;
    }
    function handlePop() {
      action = "POP";
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index;
      index = nextIndex;
      if (listener) {
        listener({ action, location: history.location, delta });
      }
    }
    function push(to, state) {
      action = "PUSH";
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index = getIndex() + 1;
      let historyState = getHistoryState(location2, index);
      let url = history.createHref(location2);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error2) {
        if (error2 instanceof DOMException && error2.name === "DataCloneError") {
          throw error2;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({ action, location: history.location, delta: 1 });
      }
    }
    function replace2(to, state) {
      action = "REPLACE";
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index = getIndex();
      let historyState = getHistoryState(location2, index);
      let url = history.createHref(location2);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({ action, location: history.location, delta: 0 });
      }
    }
    function createURL(to) {
      let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href = typeof to === "string" ? to : createPath(to);
      href = href.replace(/ $/, "%20");
      invariant(
        base,
        `No window.location.(origin|href) available to create URL for href: ${href}`
      );
      return new URL(href, base);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref2(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push,
      replace: replace2,
      go(n) {
        return globalHistory.go(n);
      }
    };
    return history;
  }
  function matchRoutes(routes, locationArg, basename = "/") {
    return matchRoutesImpl(routes, locationArg, basename, false);
  }
  function matchRoutesImpl(routes, locationArg, basename, allowPartial) {
    let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location2.pathname || "/", basename);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches2 = null;
    for (let i = 0; matches2 == null && i < branches.length; ++i) {
      let decoded = decodePath(pathname);
      matches2 = matchRouteBranch(
        branches[i],
        decoded,
        allowPartial
      );
    }
    return matches2;
  }
  function convertRouteMatchToUiMatch(match, loaderData) {
    let { route, pathname, params } = match;
    return {
      id: route.id,
      pathname,
      params,
      data: loaderData[route.id],
      handle: route.handle
    };
  }
  function flattenRoutes(routes, branches = [], parentsMeta = [], parentPath = "") {
    let flattenRoute = (route, index, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(
          meta.relativePath.startsWith(parentPath),
          `Absolute route path "${meta.relativePath}" nested under path "${parentPath}" is not valid. An absolute child route path must start with the combined path of all its parent routes.`
        );
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          `Index routes must not have child routes. Please remove all child routes from route path "${path}".`
        );
        flattenRoutes(route.children, branches, routesMeta, path);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path,
        score: computeScore(path, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index) => {
      if (route.path === "" || !route.path?.includes("?")) {
        flattenRoute(route, index);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path) {
    let segments = path.split("/");
    if (segments.length === 0)
      return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(
      ...restExploded.map(
        (subpath) => subpath === "" ? required : [required, subpath].join("/")
      )
    );
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map(
      (exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded
    );
  }
  function rankRouteBranches(branches) {
    branches.sort(
      (a, b) => a.score !== b.score ? b.score - a.score : compareIndexes(
        a.routesMeta.map((meta) => meta.childrenIndex),
        b.routesMeta.map((meta) => meta.childrenIndex)
      )
    );
  }
  var paramRe = /^:[\w-]+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s) => s === "*";
  function computeScore(path, index) {
    let segments = path.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s) => !isSplat(s)).reduce(
      (score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue),
      initialScore
    );
  }
  function compareIndexes(a, b) {
    let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a[a.length - 1] - b[b.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname, allowPartial = false) {
    let { routesMeta } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches2 = [];
    for (let i = 0; i < routesMeta.length; ++i) {
      let meta = routesMeta[i];
      let end = i === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match = matchPath(
        { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },
        remainingPathname
      );
      let route = meta.route;
      if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {
        match = matchPath(
          {
            path: meta.relativePath,
            caseSensitive: meta.caseSensitive,
            end: false
          },
          remainingPathname
        );
      }
      if (!match) {
        return null;
      }
      Object.assign(matchedParams, match.params);
      matches2.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match.pathname]),
        pathnameBase: normalizePathname(
          joinPaths([matchedPathname, match.pathnameBase])
        ),
        route
      });
      if (match.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);
      }
    }
    return matches2;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = { path: pattern, caseSensitive: false, end: true };
    }
    let [matcher, compiledParams] = compilePath(
      pattern.path,
      pattern.caseSensitive,
      pattern.end
    );
    let match = pathname.match(matcher);
    if (!match)
      return null;
    let matchedPathname = match[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match.slice(1);
    let params = compiledParams.reduce(
      (memo22, { paramName, isOptional }, index) => {
        if (paramName === "*") {
          let splatValue = captureGroups[index] || "";
          pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
        }
        const value = captureGroups[index];
        if (isOptional && !value) {
          memo22[paramName] = void 0;
        } else {
          memo22[paramName] = (value || "").replace(/%2F/g, "/");
        }
        return memo22;
      },
      {}
    );
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path, caseSensitive = false, end = true) {
    warning(
      path === "*" || !path.endsWith("*") || path.endsWith("/*"),
      `Route path "${path}" will be treated as if it were "${path.replace(/\*$/, "/*")}" because the \`*\` character must always follow a \`/\` in the pattern. To get rid of this warning, please change the route path to "${path.replace(/\*$/, "/*")}".`
    );
    let params = [];
    let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(
      /\/:([\w-]+)(\?)?/g,
      (_, paramName, isOptional) => {
        params.push({ paramName, isOptional: isOptional != null });
        return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
      }
    );
    if (path.endsWith("*")) {
      params.push({ paramName: "*" });
      regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end) {
      regexpSource += "\\/*$";
    } else if (path !== "" && path !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else {
    }
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, params];
  }
  function decodePath(value) {
    try {
      return value.split("/").map((v) => decodeURIComponent(v).replace(/\//g, "%2F")).join("/");
    } catch (error2) {
      warning(
        false,
        `The URL path "${value}" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding (${error2}).`
      );
      return value;
    }
  }
  function stripBasename(pathname, basename) {
    if (basename === "/")
      return pathname;
    if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
      return null;
    }
    let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname = "/") {
    let {
      pathname: toPathname,
      search = "",
      hash = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search),
      hash: normalizeHash(hash)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1)
          segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char, field, dest, path) {
    return `Cannot include a '${char}' character in a manually specified \`to.${field}\` field [${JSON.stringify(
      path
    )}].  Please separate it out to the \`to.${dest}\` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.`;
  }
  function getPathContributingMatches(matches2) {
    return matches2.filter(
      (match, index) => index === 0 || match.route.path && match.route.path.length > 0
    );
  }
  function getResolveToMatches(matches2) {
    let pathMatches = getPathContributingMatches(matches2);
    return pathMatches.map(
      (match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase
    );
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative = false) {
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = { ...toArg };
      invariant(
        !to.pathname || !to.pathname.includes("?"),
        getInvalidPathError("?", "pathname", "search", to)
      );
      invariant(
        !to.pathname || !to.pathname.includes("#"),
        getInvalidPathError("#", "pathname", "hash", to)
      );
      invariant(
        !to.search || !to.search.includes("#"),
        getInvalidPathError("#", "search", "hash", to)
      );
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from;
    if (toPathname == null) {
      from = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (!isPathRelative && toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path = resolvePath(to, from);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path.pathname += "/";
    }
    return path;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
  var normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
  function isRouteErrorResponse(error2) {
    return error2 != null && typeof error2.status === "number" && typeof error2.statusText === "string" && typeof error2.internal === "boolean" && "data" in error2;
  }
  var validMutationMethodsArr = [
    "POST",
    "PUT",
    "PATCH",
    "DELETE"
  ];
  var validMutationMethods = new Set(
    validMutationMethodsArr
  );
  var validRequestMethodsArr = [
    "GET",
    ...validMutationMethodsArr
  ];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var ResetLoaderDataSymbol = Symbol("ResetLoaderData");
  var DataRouterContext = React.createContext(null);
  DataRouterContext.displayName = "DataRouter";
  var DataRouterStateContext = React.createContext(null);
  DataRouterStateContext.displayName = "DataRouterState";
  var ViewTransitionContext = React.createContext({
    isTransitioning: false
  });
  ViewTransitionContext.displayName = "ViewTransition";
  var FetchersContext = React.createContext(
    /* @__PURE__ */ new Map()
  );
  FetchersContext.displayName = "Fetchers";
  var AwaitContext = React.createContext(null);
  AwaitContext.displayName = "Await";
  var NavigationContext = React.createContext(
    null
  );
  NavigationContext.displayName = "Navigation";
  var LocationContext = React.createContext(
    null
  );
  LocationContext.displayName = "Location";
  var RouteContext = React.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  RouteContext.displayName = "Route";
  var RouteErrorContext = React.createContext(null);
  RouteErrorContext.displayName = "RouteError";
  var ENABLE_DEV_WARNINGS = false;
  function useHref(to, { relative } = {}) {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useHref() may be used only in the context of a <Router> component.`
    );
    let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
    let { hash, pathname, search } = useResolvedPath(to, { relative });
    let joinedPathname = pathname;
    if (basename !== "/") {
      joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
    }
    return navigator2.createHref({ pathname: joinedPathname, search, hash });
  }
  function useInRouterContext() {
    return React2.useContext(LocationContext) != null;
  }
  function useLocation() {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useLocation() may be used only in the context of a <Router> component.`
    );
    return React2.useContext(LocationContext).location;
  }
  var navigateEffectWarning = `You should call navigate() in a React.useEffect(), not when your component is first rendered.`;
  function useIsomorphicLayoutEffect(cb) {
    let isStatic = React2.useContext(NavigationContext).static;
    if (!isStatic) {
      React2.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let { isDataRoute } = React2.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useNavigate() may be used only in the context of a <Router> component.`
    );
    let dataRouterContext = React2.useContext(DataRouterContext);
    let { basename, navigator: navigator2 } = React2.useContext(NavigationContext);
    let { matches: matches2 } = React2.useContext(RouteContext);
    let { pathname: locationPathname } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches2));
    let activeRef = React2.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React2.useCallback(
      (to, options = {}) => {
        warning(activeRef.current, navigateEffectWarning);
        if (!activeRef.current)
          return;
        if (typeof to === "number") {
          navigator2.go(to);
          return;
        }
        let path = resolveTo(
          to,
          JSON.parse(routePathnamesJson),
          locationPathname,
          options.relative === "path"
        );
        if (dataRouterContext == null && basename !== "/") {
          path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
        }
        (!!options.replace ? navigator2.replace : navigator2.push)(
          path,
          options.state,
          options
        );
      },
      [
        basename,
        navigator2,
        routePathnamesJson,
        locationPathname,
        dataRouterContext
      ]
    );
    return navigate;
  }
  var OutletContext = React2.createContext(null);
  function useResolvedPath(to, { relative } = {}) {
    let { matches: matches2 } = React2.useContext(RouteContext);
    let { pathname: locationPathname } = useLocation();
    let routePathnamesJson = JSON.stringify(getResolveToMatches(matches2));
    return React2.useMemo(
      () => resolveTo(
        to,
        JSON.parse(routePathnamesJson),
        locationPathname,
        relative === "path"
      ),
      [to, routePathnamesJson, locationPathname, relative]
    );
  }
  function useRoutesImpl(routes, locationArg, dataRouterState, future) {
    invariant(
      useInRouterContext(),
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      `useRoutes() may be used only in the context of a <Router> component.`
    );
    let { navigator: navigator2 } = React2.useContext(NavigationContext);
    let { matches: parentMatches } = React2.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (ENABLE_DEV_WARNINGS) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(
        parentPathname,
        !parentRoute || parentPath.endsWith("*"),
        `You rendered descendant <Routes> (or called \`useRoutes()\`) at "${parentPathname}" (under <Route path="${parentPath}">) but the parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

Please change the parent <Route path="${parentPath}"> to <Route path="${parentPath === "/" ? "*" : `${parentPath}/*`}">.`
      );
    }
    let locationFromContext = useLocation();
    let location2;
    if (locationArg) {
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      invariant(
        parentPathnameBase === "/" || parsedLocationArg.pathname?.startsWith(parentPathnameBase),
        `When overriding the location using \`<Routes location>\` or \`useRoutes(routes, location)\`, the location pathname must begin with the portion of the URL pathname that was matched by all parent routes. The current pathname base is "${parentPathnameBase}" but pathname "${parsedLocationArg.pathname}" was given in the \`location\` prop.`
      );
      location2 = parsedLocationArg;
    } else {
      location2 = locationFromContext;
    }
    let pathname = location2.pathname || "/";
    let remainingPathname = pathname;
    if (parentPathnameBase !== "/") {
      let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
      let segments = pathname.replace(/^\//, "").split("/");
      remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
    }
    let matches2 = matchRoutes(routes, { pathname: remainingPathname });
    if (ENABLE_DEV_WARNINGS) {
      warning(
        parentRoute || matches2 != null,
        `No routes matched location "${location2.pathname}${location2.search}${location2.hash}" `
      );
      warning(
        matches2 == null || matches2[matches2.length - 1].route.element !== void 0 || matches2[matches2.length - 1].route.Component !== void 0 || matches2[matches2.length - 1].route.lazy !== void 0,
        `Matched leaf route at location "${location2.pathname}${location2.search}${location2.hash}" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.`
      );
    }
    let renderedMatches = _renderMatches(
      matches2 && matches2.map(
        (match) => Object.assign({}, match, {
          params: Object.assign({}, parentParams, match.params),
          pathname: joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathname).pathname : match.pathname
          ]),
          pathnameBase: match.pathnameBase === "/" ? parentPathnameBase : joinPaths([
            parentPathnameBase,
            // Re-encode pathnames that were decoded inside matchRoutes
            navigator2.encodeLocation ? navigator2.encodeLocation(match.pathnameBase).pathname : match.pathnameBase
          ])
        })
      ),
      parentMatches,
      dataRouterState,
      future
    );
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React2.createElement(
        LocationContext.Provider,
        {
          value: {
            location: {
              pathname: "/",
              search: "",
              hash: "",
              state: null,
              key: "default",
              ...location2
            },
            navigationType: "POP"
            /* Pop */
          }
        },
        renderedMatches
      );
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error2 = useRouteError();
    let message = isRouteErrorResponse(error2) ? `${error2.status} ${error2.statusText}` : error2 instanceof Error ? error2.message : JSON.stringify(error2);
    let stack = error2 instanceof Error ? error2.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = { padding: "0.5rem", backgroundColor: lightgrey };
    let codeStyles = { padding: "2px 4px", backgroundColor: lightgrey };
    let devInfo = null;
    if (ENABLE_DEV_WARNINGS) {
      console.error(
        "Error handled by React Router default ErrorBoundary:",
        error2
      );
      devInfo = /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React2.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React2.createElement("code", { style: codeStyles }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React2.createElement("h3", { style: { fontStyle: "italic" } }, message), stack ? /* @__PURE__ */ React2.createElement("pre", { style: preStyles }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React2.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React2.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error2) {
      return { error: error2 };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error !== void 0 ? props.error : state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error2, errorInfo) {
      console.error(
        "React Router caught the following error during render",
        error2,
        errorInfo
      );
    }
    render() {
      return this.state.error !== void 0 ? /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: this.props.routeContext }, /* @__PURE__ */ React2.createElement(
        RouteErrorContext.Provider,
        {
          value: this.state.error,
          children: this.props.component
        }
      )) : this.props.children;
    }
  };
  function RenderedRoute({ routeContext, match, children }) {
    let dataRouterContext = React2.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match.route.errorElement || match.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;
    }
    return /* @__PURE__ */ React2.createElement(RouteContext.Provider, { value: routeContext }, children);
  }
  function _renderMatches(matches2, parentMatches = [], dataRouterState = null, future = null) {
    if (matches2 == null) {
      if (!dataRouterState) {
        return null;
      }
      if (dataRouterState.errors) {
        matches2 = dataRouterState.matches;
      } else if (parentMatches.length === 0 && !dataRouterState.initialized && dataRouterState.matches.length > 0) {
        matches2 = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches2;
    let errors = dataRouterState?.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex(
        (m) => m.route.id && errors?.[m.route.id] !== void 0
      );
      invariant(
        errorIndex >= 0,
        `Could not find a matching route for errors on route IDs: ${Object.keys(
          errors
        ).join(",")}`
      );
      renderedMatches = renderedMatches.slice(
        0,
        Math.min(renderedMatches.length, errorIndex + 1)
      );
    }
    let renderFallback = false;
    let fallbackIndex = -1;
    if (dataRouterState) {
      for (let i = 0; i < renderedMatches.length; i++) {
        let match = renderedMatches[i];
        if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {
          fallbackIndex = i;
        }
        if (match.route.id) {
          let { loaderData, errors: errors2 } = dataRouterState;
          let needsToRunLoader = match.route.loader && !loaderData.hasOwnProperty(match.route.id) && (!errors2 || errors2[match.route.id] === void 0);
          if (match.route.lazy || needsToRunLoader) {
            renderFallback = true;
            if (fallbackIndex >= 0) {
              renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
            } else {
              renderedMatches = [renderedMatches[0]];
            }
            break;
          }
        }
      }
    }
    return renderedMatches.reduceRight((outlet, match, index) => {
      let error2;
      let shouldRenderHydrateFallback = false;
      let errorElement = null;
      let hydrateFallbackElement = null;
      if (dataRouterState) {
        error2 = errors && match.route.id ? errors[match.route.id] : void 0;
        errorElement = match.route.errorElement || defaultErrorElement;
        if (renderFallback) {
          if (fallbackIndex < 0 && index === 0) {
            warningOnce(
              "route-fallback",
              false,
              "No `HydrateFallback` element provided to render during initial hydration"
            );
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = null;
          } else if (fallbackIndex === index) {
            shouldRenderHydrateFallback = true;
            hydrateFallbackElement = match.route.hydrateFallbackElement || null;
          }
        }
      }
      let matches22 = parentMatches.concat(renderedMatches.slice(0, index + 1));
      let getChildren = () => {
        let children;
        if (error2) {
          children = errorElement;
        } else if (shouldRenderHydrateFallback) {
          children = hydrateFallbackElement;
        } else if (match.route.Component) {
          children = /* @__PURE__ */ React2.createElement(match.route.Component, null);
        } else if (match.route.element) {
          children = match.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React2.createElement(
          RenderedRoute,
          {
            match,
            routeContext: {
              outlet,
              matches: matches22,
              isDataRoute: dataRouterState != null
            },
            children
          }
        );
      };
      return dataRouterState && (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? /* @__PURE__ */ React2.createElement(
        RenderErrorBoundary,
        {
          location: dataRouterState.location,
          revalidation: dataRouterState.revalidation,
          component: errorElement,
          error: error2,
          children: getChildren(),
          routeContext: { outlet: null, matches: matches22, isDataRoute: true }
        }
      ) : getChildren();
    }, null);
  }
  function getDataRouterConsoleError(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
  }
  function useDataRouterContext(hookName) {
    let ctx = React2.useContext(DataRouterContext);
    invariant(ctx, getDataRouterConsoleError(hookName));
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React2.useContext(DataRouterStateContext);
    invariant(state, getDataRouterConsoleError(hookName));
    return state;
  }
  function useRouteContext(hookName) {
    let route = React2.useContext(RouteContext);
    invariant(route, getDataRouterConsoleError(hookName));
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    invariant(
      thisRoute.route.id,
      `${hookName} can only be used on routes that contain a unique "id"`
    );
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(
      "useRouteId"
      /* UseRouteId */
    );
  }
  function useNavigation() {
    let state = useDataRouterState(
      "useNavigation"
      /* UseNavigation */
    );
    return state.navigation;
  }
  function useMatches() {
    let { matches: matches2, loaderData } = useDataRouterState(
      "useMatches"
      /* UseMatches */
    );
    return React2.useMemo(
      () => matches2.map((m) => convertRouteMatchToUiMatch(m, loaderData)),
      [matches2, loaderData]
    );
  }
  function useRouteError() {
    let error2 = React2.useContext(RouteErrorContext);
    let state = useDataRouterState(
      "useRouteError"
      /* UseRouteError */
    );
    let routeId = useCurrentRouteId(
      "useRouteError"
      /* UseRouteError */
    );
    if (error2 !== void 0) {
      return error2;
    }
    return state.errors?.[routeId];
  }
  function useNavigateStable() {
    let { router } = useDataRouterContext(
      "useNavigate"
      /* UseNavigateStable */
    );
    let id = useCurrentRouteId(
      "useNavigate"
      /* UseNavigateStable */
    );
    let activeRef = React2.useRef(false);
    useIsomorphicLayoutEffect(() => {
      activeRef.current = true;
    });
    let navigate = React2.useCallback(
      async (to, options = {}) => {
        warning(activeRef.current, navigateEffectWarning);
        if (!activeRef.current)
          return;
        if (typeof to === "number") {
          router.navigate(to);
        } else {
          await router.navigate(to, { fromRouteId: id, ...options });
        }
      },
      [router, id]
    );
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce(key, cond, message) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      warning(false, message);
    }
  }
  var MemoizedDataRoutes = React3.memo(DataRoutes);
  function DataRoutes({
    routes,
    future,
    state
  }) {
    return useRoutesImpl(routes, void 0, state, future);
  }
  function Router2({
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = "POP",
    navigator: navigator2,
    static: staticProp = false
  }) {
    invariant(
      !useInRouterContext(),
      `You cannot render a <Router> inside another <Router>. You should never have more than one in your app.`
    );
    let basename = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React3.useMemo(
      () => ({
        basename,
        navigator: navigator2,
        static: staticProp,
        future: {}
      }),
      [basename, navigator2, staticProp]
    );
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search = "",
      hash = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React3.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search,
          hash,
          state,
          key
        },
        navigationType
      };
    }, [basename, pathname, search, hash, state, key, navigationType]);
    warning(
      locationContext != null,
      `<Router basename="${basename}"> is not able to match the URL "${pathname}${search}${hash}" because it does not start with the basename, so the <Router> won't render anything.`
    );
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React3.createElement(NavigationContext.Provider, { value: navigationContext }, /* @__PURE__ */ React3.createElement(LocationContext.Provider, { children, value: locationContext }));
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object) {
    return object != null && typeof object.tagName === "string";
  }
  function isButtonElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "button";
  }
  function isFormElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "form";
  }
  function isInputElement(object) {
    return isHtmlElement(object) && object.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set([
    "application/x-www-form-urlencoded",
    "multipart/form-data",
    "text/plain"
  ]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      warning(
        false,
        `"${encType}" is not a valid \`encType\` for \`<Form>\`/\`<fetcher.Form>\` and will default to "${defaultEncType}"`
      );
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename) {
    let method;
    let action;
    let encType;
    let formData;
    let body;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error(
          `Cannot submit a <button> or <input type="submit"> without a <form>`
        );
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename) : null;
      method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let { name, type, value } = target;
        if (type === "image") {
          let prefix = name ? `${name}.` : "";
          formData.append(`${prefix}x`, "0");
          formData.append(`${prefix}y`, "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error(
        `Cannot submit element that is not <form>, <button>, or <input type="submit|image">`
      );
    } else {
      method = defaultMethod;
      action = null;
      encType = defaultEncType;
      body = target;
    }
    if (formData && encType === "text/plain") {
      body = formData;
      formData = void 0;
    }
    return { action, method: method.toLowerCase(), encType, formData, body };
  }
  function invariant2(value, message) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message);
    }
  }
  async function loadRouteModule(route, routeModulesCache) {
    if (route.id in routeModulesCache) {
      return routeModulesCache[route.id];
    }
    try {
      let routeModule = await import(
        /* @vite-ignore */
        /* webpackIgnore: true */
        route.module
      );
      routeModulesCache[route.id] = routeModule;
      return routeModule;
    } catch (error2) {
      console.error(
        `Error loading route module \`${route.module}\`, reloading page...`
      );
      console.error(error2);
      if (window.__reactRouterContext && window.__reactRouterContext.isSpaMode && // @ts-expect-error
      import_meta.hot) {
        throw error2;
      }
      window.location.reload();
      return new Promise(() => {
      });
    }
  }
  function isPageLinkDescriptor(object) {
    return object != null && typeof object.page === "string";
  }
  function isHtmlLinkDescriptor(object) {
    if (object == null) {
      return false;
    }
    if (object.href == null) {
      return object.rel === "preload" && typeof object.imageSrcSet === "string" && typeof object.imageSizes === "string";
    }
    return typeof object.rel === "string" && typeof object.href === "string";
  }
  async function getKeyedPrefetchLinks(matches2, manifest, routeModules) {
    let links = await Promise.all(
      matches2.map(async (match) => {
        let route = manifest.routes[match.route.id];
        if (route) {
          let mod = await loadRouteModule(route, routeModules);
          return mod.links ? mod.links() : [];
        }
        return [];
      })
    );
    return dedupeLinkDescriptors(
      links.flat(1).filter(isHtmlLinkDescriptor).filter((link) => link.rel === "stylesheet" || link.rel === "preload").map(
        (link) => link.rel === "stylesheet" ? { ...link, rel: "prefetch", as: "style" } : { ...link, rel: "prefetch" }
      )
    );
  }
  function getNewMatchesForLinks(page, nextMatches, currentMatches, manifest, location2, mode) {
    let isNew = (match, index) => {
      if (!currentMatches[index])
        return true;
      return match.route.id !== currentMatches[index].route.id;
    };
    let matchPathChanged = (match, index) => {
      return (
        // param change, /users/123 -> /users/456
        currentMatches[index].pathname !== match.pathname || // splat param changed, which is not present in match.path
        // e.g. /files/images/avatar.jpg -> files/finances.xls
        currentMatches[index].route.path?.endsWith("*") && currentMatches[index].params["*"] !== match.params["*"]
      );
    };
    if (mode === "assets") {
      return nextMatches.filter(
        (match, index) => isNew(match, index) || matchPathChanged(match, index)
      );
    }
    if (mode === "data") {
      return nextMatches.filter((match, index) => {
        let manifestRoute = manifest.routes[match.route.id];
        if (!manifestRoute || !manifestRoute.hasLoader) {
          return false;
        }
        if (isNew(match, index) || matchPathChanged(match, index)) {
          return true;
        }
        if (match.route.shouldRevalidate) {
          let routeChoice = match.route.shouldRevalidate({
            currentUrl: new URL(
              location2.pathname + location2.search + location2.hash,
              window.origin
            ),
            currentParams: currentMatches[0]?.params || {},
            nextUrl: new URL(page, window.origin),
            nextParams: match.params,
            defaultShouldRevalidate: true
          });
          if (typeof routeChoice === "boolean") {
            return routeChoice;
          }
        }
        return true;
      });
    }
    return [];
  }
  function getModuleLinkHrefs(matches2, manifestPatch) {
    return dedupeHrefs(
      matches2.map((match) => {
        let route = manifestPatch.routes[match.route.id];
        if (!route)
          return [];
        let hrefs = [route.module];
        if (route.imports) {
          hrefs = hrefs.concat(route.imports);
        }
        return hrefs;
      }).flat(1)
    );
  }
  function dedupeHrefs(hrefs) {
    return [...new Set(hrefs)];
  }
  function sortKeys(obj) {
    let sorted = {};
    let keys = Object.keys(obj).sort();
    for (let key of keys) {
      sorted[key] = obj[key];
    }
    return sorted;
  }
  function dedupeLinkDescriptors(descriptors2, preloads) {
    let set = /* @__PURE__ */ new Set();
    let preloadsSet = new Set(preloads);
    return descriptors2.reduce((deduped, descriptor) => {
      let alreadyModulePreload = preloads && !isPageLinkDescriptor(descriptor) && descriptor.as === "script" && descriptor.href && preloadsSet.has(descriptor.href);
      if (alreadyModulePreload) {
        return deduped;
      }
      let key = JSON.stringify(sortKeys(descriptor));
      if (!set.has(key)) {
        set.add(key);
        deduped.push({ key, link: descriptor });
      }
      return deduped;
    }, []);
  }
  var SingleFetchRedirectSymbol = Symbol("SingleFetchRedirect");
  function singleFetchUrl(reqUrl) {
    let url = typeof reqUrl === "string" ? new URL(
      reqUrl,
      // This can be called during the SSR flow via PrefetchPageLinksImpl so
      // don't assume window is available
      typeof window === "undefined" ? "server://singlefetch/" : window.location.origin
    ) : reqUrl;
    if (url.pathname === "/") {
      url.pathname = "_root.data";
    } else {
      url.pathname = `${url.pathname.replace(/\/$/, "")}.data`;
    }
    return url;
  }
  function useDataRouterContext2() {
    let context = React9.useContext(DataRouterContext);
    invariant2(
      context,
      "You must render this element inside a <DataRouterContext.Provider> element"
    );
    return context;
  }
  function useDataRouterStateContext() {
    let context = React9.useContext(DataRouterStateContext);
    invariant2(
      context,
      "You must render this element inside a <DataRouterStateContext.Provider> element"
    );
    return context;
  }
  var FrameworkContext = React9.createContext(void 0);
  FrameworkContext.displayName = "FrameworkContext";
  function useFrameworkContext() {
    let context = React9.useContext(FrameworkContext);
    invariant2(
      context,
      "You must render this element inside a <HydratedRouter> element"
    );
    return context;
  }
  function usePrefetchBehavior(prefetch, theirElementProps) {
    let frameworkContext = React9.useContext(FrameworkContext);
    let [maybePrefetch, setMaybePrefetch] = React9.useState(false);
    let [shouldPrefetch, setShouldPrefetch] = React9.useState(false);
    let { onFocus, onBlur, onMouseEnter, onMouseLeave, onTouchStart } = theirElementProps;
    let ref = React9.useRef(null);
    React9.useEffect(() => {
      if (prefetch === "render") {
        setShouldPrefetch(true);
      }
      if (prefetch === "viewport") {
        let callback = (entries) => {
          entries.forEach((entry) => {
            setShouldPrefetch(entry.isIntersecting);
          });
        };
        let observer = new IntersectionObserver(callback, { threshold: 0.5 });
        if (ref.current)
          observer.observe(ref.current);
        return () => {
          observer.disconnect();
        };
      }
    }, [prefetch]);
    React9.useEffect(() => {
      if (maybePrefetch) {
        let id = setTimeout(() => {
          setShouldPrefetch(true);
        }, 100);
        return () => {
          clearTimeout(id);
        };
      }
    }, [maybePrefetch]);
    let setIntent = () => {
      setMaybePrefetch(true);
    };
    let cancelIntent = () => {
      setMaybePrefetch(false);
      setShouldPrefetch(false);
    };
    if (!frameworkContext) {
      return [false, ref, {}];
    }
    if (prefetch !== "intent") {
      return [shouldPrefetch, ref, {}];
    }
    return [
      shouldPrefetch,
      ref,
      {
        onFocus: composeEventHandlers(onFocus, setIntent),
        onBlur: composeEventHandlers(onBlur, cancelIntent),
        onMouseEnter: composeEventHandlers(onMouseEnter, setIntent),
        onMouseLeave: composeEventHandlers(onMouseLeave, cancelIntent),
        onTouchStart: composeEventHandlers(onTouchStart, setIntent)
      }
    ];
  }
  function composeEventHandlers(theirHandler, ourHandler) {
    return (event) => {
      theirHandler && theirHandler(event);
      if (!event.defaultPrevented) {
        ourHandler(event);
      }
    };
  }
  function PrefetchPageLinks({
    page,
    ...dataLinkProps
  }) {
    let { router } = useDataRouterContext2();
    let matches2 = React9.useMemo(
      () => matchRoutes(router.routes, page, router.basename),
      [router.routes, page, router.basename]
    );
    if (!matches2) {
      console.warn(`Tried to prefetch ${page} but no routes matched.`);
      return null;
    }
    return /* @__PURE__ */ React9.createElement(PrefetchPageLinksImpl, { page, matches: matches2, ...dataLinkProps });
  }
  function useKeyedPrefetchLinks(matches2) {
    let { manifest, routeModules } = useFrameworkContext();
    let [keyedPrefetchLinks, setKeyedPrefetchLinks] = React9.useState([]);
    React9.useEffect(() => {
      let interrupted = false;
      void getKeyedPrefetchLinks(matches2, manifest, routeModules).then(
        (links) => {
          if (!interrupted) {
            setKeyedPrefetchLinks(links);
          }
        }
      );
      return () => {
        interrupted = true;
      };
    }, [matches2, manifest, routeModules]);
    return keyedPrefetchLinks;
  }
  function PrefetchPageLinksImpl({
    page,
    matches: nextMatches,
    ...linkProps
  }) {
    let location2 = useLocation();
    let { manifest, routeModules } = useFrameworkContext();
    let { loaderData, matches: matches2 } = useDataRouterStateContext();
    let newMatchesForData = React9.useMemo(
      () => getNewMatchesForLinks(
        page,
        nextMatches,
        matches2,
        manifest,
        location2,
        "data"
      ),
      [page, nextMatches, matches2, manifest, location2]
    );
    let newMatchesForAssets = React9.useMemo(
      () => getNewMatchesForLinks(
        page,
        nextMatches,
        matches2,
        manifest,
        location2,
        "assets"
      ),
      [page, nextMatches, matches2, manifest, location2]
    );
    let dataHrefs = React9.useMemo(() => {
      if (page === location2.pathname + location2.search + location2.hash) {
        return [];
      }
      let routesParams = /* @__PURE__ */ new Set();
      let foundOptOutRoute = false;
      nextMatches.forEach((m) => {
        let manifestRoute = manifest.routes[m.route.id];
        if (!manifestRoute || !manifestRoute.hasLoader) {
          return;
        }
        if (!newMatchesForData.some((m2) => m2.route.id === m.route.id) && m.route.id in loaderData && routeModules[m.route.id]?.shouldRevalidate) {
          foundOptOutRoute = true;
        } else if (manifestRoute.hasClientLoader) {
          foundOptOutRoute = true;
        } else {
          routesParams.add(m.route.id);
        }
      });
      if (routesParams.size === 0) {
        return [];
      }
      let url = singleFetchUrl(page);
      if (foundOptOutRoute && routesParams.size > 0) {
        url.searchParams.set(
          "_routes",
          nextMatches.filter((m) => routesParams.has(m.route.id)).map((m) => m.route.id).join(",")
        );
      }
      return [url.pathname + url.search];
    }, [
      loaderData,
      location2,
      manifest,
      newMatchesForData,
      nextMatches,
      page,
      routeModules
    ]);
    let moduleHrefs = React9.useMemo(
      () => getModuleLinkHrefs(newMatchesForAssets, manifest),
      [newMatchesForAssets, manifest]
    );
    let keyedPrefetchLinks = useKeyedPrefetchLinks(newMatchesForAssets);
    return /* @__PURE__ */ React9.createElement(React9.Fragment, null, dataHrefs.map((href) => /* @__PURE__ */ React9.createElement("link", { key: href, rel: "prefetch", as: "fetch", href, ...linkProps })), moduleHrefs.map((href) => /* @__PURE__ */ React9.createElement("link", { key: href, rel: "modulepreload", href, ...linkProps })), keyedPrefetchLinks.map(({ key, link }) => (
      // these don't spread `linkProps` because they are full link descriptors
      // already with their own props
      /* @__PURE__ */ React9.createElement("link", { key, ...link })
    )));
  }
  function mergeRefs(...refs) {
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  try {
    if (isBrowser) {
      window.__reactRouterVersion = "7.0.0";
    }
  } catch (e) {
  }
  function BrowserRouter({
    basename,
    children,
    window: window2
  }) {
    let historyRef = React10.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({ window: window2, v5Compat: true });
    }
    let history = historyRef.current;
    let [state, setStateImpl] = React10.useState({
      action: history.action,
      location: history.location
    });
    let setState = React10.useCallback(
      (newState) => {
        React10.startTransition(() => setStateImpl(newState));
      },
      [setStateImpl]
    );
    React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React10.createElement(
      Router2,
      {
        basename,
        children,
        location: state.location,
        navigationType: state.action,
        navigator: history
      }
    );
  }
  function HistoryRouter({
    basename,
    children,
    history
  }) {
    let [state, setStateImpl] = React10.useState({
      action: history.action,
      location: history.location
    });
    let setState = React10.useCallback(
      (newState) => {
        React10.startTransition(() => setStateImpl(newState));
      },
      [setStateImpl]
    );
    React10.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React10.createElement(
      Router2,
      {
        basename,
        children,
        location: state.location,
        navigationType: state.action,
        navigator: history
      }
    );
  }
  HistoryRouter.displayName = "unstable_HistoryRouter";
  var ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link = React10.forwardRef(
    function LinkWithRef({
      onClick,
      discover = "render",
      prefetch = "none",
      relative,
      reloadDocument,
      replace: replace2,
      state,
      target,
      to,
      preventScrollReset,
      viewTransition,
      ...rest
    }, forwardedRef) {
      let { basename } = React10.useContext(NavigationContext);
      let isAbsolute = typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to);
      let absoluteHref;
      let isExternal = false;
      if (typeof to === "string" && isAbsolute) {
        absoluteHref = to;
        if (isBrowser) {
          try {
            let currentUrl = new URL(window.location.href);
            let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
            let path = stripBasename(targetUrl.pathname, basename);
            if (targetUrl.origin === currentUrl.origin && path != null) {
              to = path + targetUrl.search + targetUrl.hash;
            } else {
              isExternal = true;
            }
          } catch (e) {
            warning(
              false,
              `<Link to="${to}"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.`
            );
          }
        }
      }
      let href = useHref(to, { relative });
      let [shouldPrefetch, prefetchRef, prefetchHandlers] = usePrefetchBehavior(
        prefetch,
        rest
      );
      let internalOnClick = useLinkClickHandler(to, {
        replace: replace2,
        state,
        target,
        preventScrollReset,
        relative,
        viewTransition
      });
      function handleClick(event) {
        if (onClick)
          onClick(event);
        if (!event.defaultPrevented) {
          internalOnClick(event);
        }
      }
      let link = (
        // eslint-disable-next-line jsx-a11y/anchor-has-content
        /* @__PURE__ */ React10.createElement(
          "a",
          {
            ...rest,
            ...prefetchHandlers,
            href: absoluteHref || href,
            onClick: isExternal || reloadDocument ? onClick : handleClick,
            ref: mergeRefs(forwardedRef, prefetchRef),
            target,
            "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
          }
        )
      );
      return shouldPrefetch && !isAbsolute ? /* @__PURE__ */ React10.createElement(React10.Fragment, null, link, /* @__PURE__ */ React10.createElement(PrefetchPageLinks, { page: href })) : link;
    }
  );
  Link.displayName = "Link";
  var NavLink = React10.forwardRef(
    function NavLinkWithRef({
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end = false,
      style: styleProp,
      to,
      viewTransition,
      children,
      ...rest
    }, ref) {
      let path = useResolvedPath(to, { relative: rest.relative });
      let location2 = useLocation();
      let routerState = React10.useContext(DataRouterStateContext);
      let { navigator: navigator2, basename } = React10.useContext(NavigationContext);
      let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
      // eslint-disable-next-line react-hooks/rules-of-hooks
      useViewTransitionState(path) && viewTransition === true;
      let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path).pathname : path.pathname;
      let locationPathname = location2.pathname;
      let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
      if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase();
        nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
        toPathname = toPathname.toLowerCase();
      }
      if (nextLocationPathname && basename) {
        nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
      }
      const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
      let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
      let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
      let renderProps = {
        isActive,
        isPending,
        isTransitioning
      };
      let ariaCurrent = isActive ? ariaCurrentProp : void 0;
      let className;
      if (typeof classNameProp === "function") {
        className = classNameProp(renderProps);
      } else {
        className = [
          classNameProp,
          isActive ? "active" : null,
          isPending ? "pending" : null,
          isTransitioning ? "transitioning" : null
        ].filter(Boolean).join(" ");
      }
      let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
      return /* @__PURE__ */ React10.createElement(
        Link,
        {
          ...rest,
          "aria-current": ariaCurrent,
          className,
          ref,
          style,
          to,
          viewTransition
        },
        typeof children === "function" ? children(renderProps) : children
      );
    }
  );
  NavLink.displayName = "NavLink";
  var Form = React10.forwardRef(
    ({
      discover = "render",
      fetcherKey,
      navigate,
      reloadDocument,
      replace: replace2,
      state,
      method = defaultMethod,
      action,
      onSubmit,
      relative,
      preventScrollReset,
      viewTransition,
      ...props
    }, forwardedRef) => {
      let submit = useSubmit();
      let formAction = useFormAction(action, { relative });
      let formMethod = method.toLowerCase() === "get" ? "get" : "post";
      let isAbsolute = typeof action === "string" && ABSOLUTE_URL_REGEX2.test(action);
      let submitHandler = (event) => {
        onSubmit && onSubmit(event);
        if (event.defaultPrevented)
          return;
        event.preventDefault();
        let submitter = event.nativeEvent.submitter;
        let submitMethod = submitter?.getAttribute("formmethod") || method;
        submit(submitter || event.currentTarget, {
          fetcherKey,
          method: submitMethod,
          navigate,
          replace: replace2,
          state,
          relative,
          preventScrollReset,
          viewTransition
        });
      };
      return /* @__PURE__ */ React10.createElement(
        "form",
        {
          ref: forwardedRef,
          method: formMethod,
          action: formAction,
          onSubmit: reloadDocument ? onSubmit : submitHandler,
          ...props,
          "data-discover": !isAbsolute && discover === "render" ? "true" : void 0
        }
      );
    }
  );
  Form.displayName = "Form";
  function ScrollRestoration({
    getKey,
    storageKey,
    ...props
  }) {
    let remixContext = React10.useContext(FrameworkContext);
    let { basename } = React10.useContext(NavigationContext);
    let location2 = useLocation();
    let matches2 = useMatches();
    useScrollRestoration({ getKey, storageKey });
    let ssrKey = React10.useMemo(
      () => {
        if (!remixContext || !getKey)
          return null;
        let userKey = getScrollRestorationKey(
          location2,
          matches2,
          basename,
          getKey
        );
        return userKey !== location2.key ? userKey : null;
      },
      // Nah, we only need this the first time for the SSR render
      // eslint-disable-next-line react-hooks/exhaustive-deps
      []
    );
    if (!remixContext || remixContext.isSpaMode) {
      return null;
    }
    let restoreScroll = ((storageKey2, restoreKey) => {
      if (!window.history.state || !window.history.state.key) {
        let key = Math.random().toString(32).slice(2);
        window.history.replaceState({ key }, "");
      }
      try {
        let positions = JSON.parse(sessionStorage.getItem(storageKey2) || "{}");
        let storedY = positions[restoreKey || window.history.state.key];
        if (typeof storedY === "number") {
          window.scrollTo(0, storedY);
        }
      } catch (error2) {
        console.error(error2);
        sessionStorage.removeItem(storageKey2);
      }
    }).toString();
    return /* @__PURE__ */ React10.createElement(
      "script",
      {
        ...props,
        suppressHydrationWarning: true,
        dangerouslySetInnerHTML: {
          __html: `(${restoreScroll})(${JSON.stringify(
            storageKey || SCROLL_RESTORATION_STORAGE_KEY
          )}, ${JSON.stringify(ssrKey)})`
        }
      }
    );
  }
  ScrollRestoration.displayName = "ScrollRestoration";
  function getDataRouterConsoleError2(hookName) {
    return `${hookName} must be used within a data router.  See https://reactrouter.com/en/main/routers/picking-a-router.`;
  }
  function useDataRouterContext3(hookName) {
    let ctx = React10.useContext(DataRouterContext);
    invariant(ctx, getDataRouterConsoleError2(hookName));
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React10.useContext(DataRouterStateContext);
    invariant(state, getDataRouterConsoleError2(hookName));
    return state;
  }
  function useLinkClickHandler(to, {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative,
    viewTransition
  } = {}) {
    let navigate = useNavigate();
    let location2 = useLocation();
    let path = useResolvedPath(to, { relative });
    return React10.useCallback(
      (event) => {
        if (shouldProcessLinkClick(event, target)) {
          event.preventDefault();
          let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path);
          navigate(to, {
            replace: replace2,
            state,
            preventScrollReset,
            relative,
            viewTransition
          });
        }
      },
      [
        location2,
        navigate,
        path,
        replaceProp,
        state,
        target,
        to,
        preventScrollReset,
        relative,
        viewTransition
      ]
    );
  }
  var fetcherId = 0;
  var getUniqueFetcherId = () => `__${String(++fetcherId)}__`;
  function useSubmit() {
    let { router } = useDataRouterContext3(
      "useSubmit"
      /* UseSubmit */
    );
    let { basename } = React10.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React10.useCallback(
      async (target, options = {}) => {
        let { action, method, encType, formData, body } = getFormSubmissionInfo(
          target,
          basename
        );
        if (options.navigate === false) {
          let key = options.fetcherKey || getUniqueFetcherId();
          await router.fetch(key, currentRouteId, options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            flushSync: options.flushSync
          });
        } else {
          await router.navigate(options.action || action, {
            preventScrollReset: options.preventScrollReset,
            formData,
            body,
            formMethod: options.method || method,
            formEncType: options.encType || encType,
            replace: options.replace,
            state: options.state,
            fromRouteId: currentRouteId,
            flushSync: options.flushSync,
            viewTransition: options.viewTransition
          });
        }
      },
      [router, basename, currentRouteId]
    );
  }
  function useFormAction(action, { relative } = {}) {
    let { basename } = React10.useContext(NavigationContext);
    let routeContext = React10.useContext(RouteContext);
    invariant(routeContext, "useFormAction must be used inside a RouteContext");
    let [match] = routeContext.matches.slice(-1);
    let path = { ...useResolvedPath(action ? action : ".", { relative }) };
    let location2 = useLocation();
    if (action == null) {
      path.search = location2.search;
      let params = new URLSearchParams(path.search);
      let indexValues = params.getAll("index");
      let hasNakedIndexParam = indexValues.some((v) => v === "");
      if (hasNakedIndexParam) {
        params.delete("index");
        indexValues.filter((v) => v).forEach((v) => params.append("index", v));
        let qs = params.toString();
        path.search = qs ? `?${qs}` : "";
      }
    }
    if ((!action || action === ".") && match.route.index) {
      path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    return createPath(path);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function getScrollRestorationKey(location2, matches2, basename, getKey) {
    let key = null;
    if (getKey) {
      if (basename !== "/") {
        key = getKey(
          {
            ...location2,
            pathname: stripBasename(location2.pathname, basename) || location2.pathname
          },
          matches2
        );
      } else {
        key = getKey(location2, matches2);
      }
    }
    if (key == null) {
      key = location2.key;
    }
    return key;
  }
  function useScrollRestoration({
    getKey,
    storageKey
  } = {}) {
    let { router } = useDataRouterContext3(
      "useScrollRestoration"
      /* UseScrollRestoration */
    );
    let { restoreScrollPosition, preventScrollReset } = useDataRouterState2(
      "useScrollRestoration"
      /* UseScrollRestoration */
    );
    let { basename } = React10.useContext(NavigationContext);
    let location2 = useLocation();
    let matches2 = useMatches();
    let navigation = useNavigation();
    React10.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(
      React10.useCallback(() => {
        if (navigation.state === "idle") {
          let key = getScrollRestorationKey(location2, matches2, basename, getKey);
          savedScrollPositions[key] = window.scrollY;
        }
        try {
          sessionStorage.setItem(
            storageKey || SCROLL_RESTORATION_STORAGE_KEY,
            JSON.stringify(savedScrollPositions)
          );
        } catch (error2) {
          warning(
            false,
            `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error2}).`
          );
        }
        window.history.scrollRestoration = "auto";
      }, [navigation.state, getKey, basename, location2, matches2, storageKey])
    );
    if (typeof document !== "undefined") {
      React10.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(
            storageKey || SCROLL_RESTORATION_STORAGE_KEY
          );
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e) {
        }
      }, [storageKey]);
      React10.useLayoutEffect(() => {
        let disableScrollRestoration = router?.enableScrollRestoration(
          savedScrollPositions,
          () => window.scrollY,
          getKey ? (location22, matches22) => getScrollRestorationKey(location22, matches22, basename, getKey) : void 0
        );
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename, getKey]);
      React10.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location2.hash) {
          let el = document.getElementById(
            decodeURIComponent(location2.hash.slice(1))
          );
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location2, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let { capture } = options || {};
    React10.useEffect(() => {
      let opts = capture != null ? { capture } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }
  function useViewTransitionState(to, opts = {}) {
    let vtContext = React10.useContext(ViewTransitionContext);
    invariant(
      vtContext != null,
      "`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?"
    );
    let { basename } = useDataRouterContext3(
      "useViewTransitionState"
      /* useViewTransitionState */
    );
    let path = useResolvedPath(to, { relative: opts.relative });
    if (!vtContext.isTransitioning) {
      return false;
    }
    let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
    let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
    return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
  }
  var encoder = new TextEncoder();

  // node_modules/@shopify/polaris/build/esm/types.js
  var Key = /* @__PURE__ */ function(Key2) {
    Key2[Key2["Backspace"] = 8] = "Backspace";
    Key2[Key2["Tab"] = 9] = "Tab";
    Key2[Key2["Enter"] = 13] = "Enter";
    Key2[Key2["Shift"] = 16] = "Shift";
    Key2[Key2["Ctrl"] = 17] = "Ctrl";
    Key2[Key2["Alt"] = 18] = "Alt";
    Key2[Key2["Pause"] = 19] = "Pause";
    Key2[Key2["CapsLock"] = 20] = "CapsLock";
    Key2[Key2["Escape"] = 27] = "Escape";
    Key2[Key2["Space"] = 32] = "Space";
    Key2[Key2["PageUp"] = 33] = "PageUp";
    Key2[Key2["PageDown"] = 34] = "PageDown";
    Key2[Key2["End"] = 35] = "End";
    Key2[Key2["Home"] = 36] = "Home";
    Key2[Key2["LeftArrow"] = 37] = "LeftArrow";
    Key2[Key2["UpArrow"] = 38] = "UpArrow";
    Key2[Key2["RightArrow"] = 39] = "RightArrow";
    Key2[Key2["DownArrow"] = 40] = "DownArrow";
    Key2[Key2["Insert"] = 45] = "Insert";
    Key2[Key2["Delete"] = 46] = "Delete";
    Key2[Key2["Key0"] = 48] = "Key0";
    Key2[Key2["Key1"] = 49] = "Key1";
    Key2[Key2["Key2"] = 50] = "Key2";
    Key2[Key2["Key3"] = 51] = "Key3";
    Key2[Key2["Key4"] = 52] = "Key4";
    Key2[Key2["Key5"] = 53] = "Key5";
    Key2[Key2["Key6"] = 54] = "Key6";
    Key2[Key2["Key7"] = 55] = "Key7";
    Key2[Key2["Key8"] = 56] = "Key8";
    Key2[Key2["Key9"] = 57] = "Key9";
    Key2[Key2["KeyA"] = 65] = "KeyA";
    Key2[Key2["KeyB"] = 66] = "KeyB";
    Key2[Key2["KeyC"] = 67] = "KeyC";
    Key2[Key2["KeyD"] = 68] = "KeyD";
    Key2[Key2["KeyE"] = 69] = "KeyE";
    Key2[Key2["KeyF"] = 70] = "KeyF";
    Key2[Key2["KeyG"] = 71] = "KeyG";
    Key2[Key2["KeyH"] = 72] = "KeyH";
    Key2[Key2["KeyI"] = 73] = "KeyI";
    Key2[Key2["KeyJ"] = 74] = "KeyJ";
    Key2[Key2["KeyK"] = 75] = "KeyK";
    Key2[Key2["KeyL"] = 76] = "KeyL";
    Key2[Key2["KeyM"] = 77] = "KeyM";
    Key2[Key2["KeyN"] = 78] = "KeyN";
    Key2[Key2["KeyO"] = 79] = "KeyO";
    Key2[Key2["KeyP"] = 80] = "KeyP";
    Key2[Key2["KeyQ"] = 81] = "KeyQ";
    Key2[Key2["KeyR"] = 82] = "KeyR";
    Key2[Key2["KeyS"] = 83] = "KeyS";
    Key2[Key2["KeyT"] = 84] = "KeyT";
    Key2[Key2["KeyU"] = 85] = "KeyU";
    Key2[Key2["KeyV"] = 86] = "KeyV";
    Key2[Key2["KeyW"] = 87] = "KeyW";
    Key2[Key2["KeyX"] = 88] = "KeyX";
    Key2[Key2["KeyY"] = 89] = "KeyY";
    Key2[Key2["KeyZ"] = 90] = "KeyZ";
    Key2[Key2["LeftMeta"] = 91] = "LeftMeta";
    Key2[Key2["RightMeta"] = 92] = "RightMeta";
    Key2[Key2["Select"] = 93] = "Select";
    Key2[Key2["Numpad0"] = 96] = "Numpad0";
    Key2[Key2["Numpad1"] = 97] = "Numpad1";
    Key2[Key2["Numpad2"] = 98] = "Numpad2";
    Key2[Key2["Numpad3"] = 99] = "Numpad3";
    Key2[Key2["Numpad4"] = 100] = "Numpad4";
    Key2[Key2["Numpad5"] = 101] = "Numpad5";
    Key2[Key2["Numpad6"] = 102] = "Numpad6";
    Key2[Key2["Numpad7"] = 103] = "Numpad7";
    Key2[Key2["Numpad8"] = 104] = "Numpad8";
    Key2[Key2["Numpad9"] = 105] = "Numpad9";
    Key2[Key2["Multiply"] = 106] = "Multiply";
    Key2[Key2["Add"] = 107] = "Add";
    Key2[Key2["Subtract"] = 109] = "Subtract";
    Key2[Key2["Decimal"] = 110] = "Decimal";
    Key2[Key2["Divide"] = 111] = "Divide";
    Key2[Key2["F1"] = 112] = "F1";
    Key2[Key2["F2"] = 113] = "F2";
    Key2[Key2["F3"] = 114] = "F3";
    Key2[Key2["F4"] = 115] = "F4";
    Key2[Key2["F5"] = 116] = "F5";
    Key2[Key2["F6"] = 117] = "F6";
    Key2[Key2["F7"] = 118] = "F7";
    Key2[Key2["F8"] = 119] = "F8";
    Key2[Key2["F9"] = 120] = "F9";
    Key2[Key2["F10"] = 121] = "F10";
    Key2[Key2["F11"] = 122] = "F11";
    Key2[Key2["F12"] = 123] = "F12";
    Key2[Key2["NumLock"] = 144] = "NumLock";
    Key2[Key2["ScrollLock"] = 145] = "ScrollLock";
    Key2[Key2["Semicolon"] = 186] = "Semicolon";
    Key2[Key2["Equals"] = 187] = "Equals";
    Key2[Key2["Comma"] = 188] = "Comma";
    Key2[Key2["Dash"] = 189] = "Dash";
    Key2[Key2["Period"] = 190] = "Period";
    Key2[Key2["ForwardSlash"] = 191] = "ForwardSlash";
    Key2[Key2["GraveAccent"] = 192] = "GraveAccent";
    Key2[Key2["OpenBracket"] = 219] = "OpenBracket";
    Key2[Key2["BackSlash"] = 220] = "BackSlash";
    Key2[Key2["CloseBracket"] = 221] = "CloseBracket";
    Key2[Key2["SingleQuote"] = 222] = "SingleQuote";
    return Key2;
  }({});

  // node_modules/@shopify/polaris/build/esm/components/shared.js
  var scrollable = {
    props: {
      "data-polaris-scrollable": true
    },
    selector: "[data-polaris-scrollable]"
  };
  var overlay = {
    props: {
      "data-polaris-overlay": true
    },
    selector: "[data-polaris-overlay]"
  };
  var layer = {
    props: {
      "data-polaris-layer": true
    },
    selector: "[data-polaris-layer]"
  };
  var unstyled = {
    props: {
      "data-polaris-unstyled": true
    },
    selector: "[data-polaris-unstyled]"
  };
  var dataPolarisTopBar = {
    props: {
      "data-polaris-top-bar": true
    },
    selector: "[data-polaris-top-bar]"
  };
  var portal = {
    props: ["data-portal-id"],
    selector: "[data-portal-id]"
  };

  // node_modules/@shopify/polaris/build/esm/components/ThemeProvider/ThemeProvider.js
  var import_react2 = __toESM(require_react());

  // node_modules/@shopify/polaris-tokens/dist/esm/_virtual/_rollupPluginBabelHelpers.mjs
  function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
      var e, n, i, u, a = [], f = true, o = false;
      try {
        if (i = (t = t.call(r)).next, 0 === l) {
          if (Object(t) !== t)
            return;
          f = false;
        } else
          for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
            ;
      } catch (r2) {
        o = true, n = r2;
      } finally {
        try {
          if (!f && null != t.return && (u = t.return(), Object(u) !== u))
            return;
        } finally {
          if (o)
            throw n;
        }
      }
      return a;
    }
  }
  function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) {
      raw = strings.slice(0);
    }
    strings.raw = raw;
    return strings;
  }
  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@shopify/polaris-tokens/dist/esm/src/themes/utils.mjs
  var import_deepmerge = __toESM(require_cjs(), 1);

  // node_modules/@shopify/polaris-tokens/dist/esm/src/utils.mjs
  var _templateObject;
  var BASE_FONT_SIZE = 16;
  var UNIT_PX = "px";
  var UNIT_EM = "em";
  var UNIT_REM = "rem";
  var DIGIT_REGEX = new RegExp(String.raw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["-?d+(?:.d+|d*)"], ["-?\\d+(?:\\.\\d+|\\d*)"]))));
  var UNIT_REGEX = new RegExp(UNIT_PX + "|" + UNIT_EM + "|" + UNIT_REM);
  function getUnit(value) {
    if (value === void 0) {
      value = "";
    }
    var unit = value.match(new RegExp(DIGIT_REGEX.source + "(" + UNIT_REGEX.source + ")"));
    return unit && unit[1];
  }
  function toPx(value) {
    if (value === void 0) {
      value = "";
    }
    var unit = getUnit(value);
    if (!unit)
      return value;
    if (unit === UNIT_PX) {
      return value;
    }
    if (unit === UNIT_EM || unit === UNIT_REM) {
      return "" + parseFloat(value) * BASE_FONT_SIZE + UNIT_PX;
    }
  }
  function toEm(value, fontSize) {
    if (value === void 0) {
      value = "";
    }
    if (fontSize === void 0) {
      fontSize = BASE_FONT_SIZE;
    }
    var unit = getUnit(value);
    if (!unit)
      return value;
    if (unit === UNIT_EM) {
      return value;
    }
    if (unit === UNIT_PX) {
      return "" + parseFloat(value) / fontSize + UNIT_EM;
    }
    if (unit === UNIT_REM) {
      return "" + parseFloat(value) * BASE_FONT_SIZE / fontSize + UNIT_EM;
    }
  }
  function getTokenNames(theme) {
    return Object.values(theme).flatMap(function(tokenGroup) {
      return Object.keys(tokenGroup);
    });
  }
  function getMediaConditions(breakpoints) {
    var breakpointEntries = Object.entries(breakpoints);
    var lastBreakpointIndex = breakpointEntries.length - 1;
    return Object.fromEntries(breakpointEntries.map(function(entry, index) {
      var _ref3 = entry, _ref4 = _slicedToArray(_ref3, 2), breakpointsTokenName = _ref4[0], breakpoint = _ref4[1];
      var upMediaCondition = getUpMediaCondition(breakpoint);
      var downMediaCondition = getDownMediaCondition(breakpoint);
      var onlyMediaCondition = index === lastBreakpointIndex ? upMediaCondition : upMediaCondition + " and " + getDownMediaCondition(breakpointEntries[index + 1][1]);
      return [breakpointsTokenName, {
        // Media condition for the current breakpoint and up
        up: upMediaCondition,
        // Media condition for current breakpoint and down
        down: downMediaCondition,
        // Media condition for only the current breakpoint
        only: onlyMediaCondition
      }];
    }));
  }
  function getUpMediaCondition(breakpoint) {
    return "(min-width: " + toEm(breakpoint) + ")";
  }
  function getDownMediaCondition(breakpoint) {
    var _toPx2;
    var offsetBreakpoint = parseFloat((_toPx2 = toPx(breakpoint)) != null ? _toPx2 : "") - 0.04;
    return "(max-width: " + toEm(offsetBreakpoint + "px") + ")";
  }

  // node_modules/@shopify/polaris-tokens/dist/esm/src/themes/base/breakpoints.mjs
  var breakpointsAliases = ["xs", "sm", "md", "lg", "xl"];

  // node_modules/@shopify/polaris-tokens/dist/esm/src/themes/utils.mjs
  function createThemeClassName(themeName) {
    return "p-theme-" + themeName;
  }
  function createIsTokenName(theme) {
    var tokenNames = new Set(getTokenNames(theme));
    return function(tokenName) {
      return tokenNames.has(tokenName);
    };
  }

  // node_modules/@shopify/polaris-tokens/dist/esm/src/themes/constants.mjs
  var themeNameLight = "light";
  var themeNameDefault = themeNameLight;
  var themeNames = [themeNameLight, "light-mobile", "light-high-contrast-experimental", "dark-experimental"];

  // node_modules/@shopify/polaris-tokens/dist/esm/build/index.mjs
  var themes = {
    "light": {
      "border": {
        "border-radius-0": "0rem",
        "border-radius-050": "0.125rem",
        "border-radius-100": "0.25rem",
        "border-radius-150": "0.375rem",
        "border-radius-200": "0.5rem",
        "border-radius-300": "0.75rem",
        "border-radius-400": "1rem",
        "border-radius-500": "1.25rem",
        "border-radius-750": "1.875rem",
        "border-radius-full": "624.9375rem",
        "border-width-0": "0rem",
        "border-width-0165": "0.04125rem",
        "border-width-025": "0.0625rem",
        "border-width-050": "0.125rem",
        "border-width-100": "0.25rem"
      },
      "breakpoints": {
        "breakpoints-xs": "0rem",
        "breakpoints-sm": "30.625rem",
        "breakpoints-md": "48rem",
        "breakpoints-lg": "65rem",
        "breakpoints-xl": "90rem"
      },
      "color": {
        "color-scheme": "light",
        "color-bg": "rgba(241, 241, 241, 1)",
        "color-bg-inverse": "rgba(26, 26, 26, 1)",
        "color-bg-surface": "rgba(255, 255, 255, 1)",
        "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
        "color-bg-surface-active": "rgba(243, 243, 243, 1)",
        "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-surface-secondary": "rgba(247, 247, 247, 1)",
        "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
        "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
        "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
        "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
        "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-info": "rgba(234, 244, 255, 1)",
        "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
        "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
        "color-bg-surface-success": "rgba(205, 254, 212, 1)",
        "color-bg-surface-success-hover": "rgba(175, 254, 191, 1)",
        "color-bg-surface-success-active": "rgba(146, 252, 172, 1)",
        "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
        "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
        "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
        "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
        "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
        "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
        "color-bg-surface-critical": "rgba(254, 232, 235, 1)",
        "color-bg-surface-critical-hover": "rgba(254, 225, 230, 1)",
        "color-bg-surface-critical-active": "rgba(254, 217, 223, 1)",
        "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
        "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
        "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
        "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
        "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
        "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
        "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
        "color-bg-fill": "rgba(255, 255, 255, 1)",
        "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
        "color-bg-fill-active": "rgba(247, 247, 247, 1)",
        "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
        "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
        "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
        "color-bg-fill-secondary-selected": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
        "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
        "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
        "color-bg-fill-info": "rgba(145, 208, 255, 1)",
        "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
        "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
        "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
        "color-bg-fill-success": "rgba(4, 123, 93, 1)",
        "color-bg-fill-success-hover": "rgba(3, 94, 76, 1)",
        "color-bg-fill-success-active": "rgba(1, 75, 64, 1)",
        "color-bg-fill-success-secondary": "rgba(175, 254, 191, 1)",
        "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
        "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
        "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
        "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
        "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
        "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
        "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
        "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
        "color-bg-fill-critical": "rgba(199, 10, 36, 1)",
        "color-bg-fill-critical-hover": "rgba(163, 10, 36, 1)",
        "color-bg-fill-critical-active": "rgba(142, 11, 33, 1)",
        "color-bg-fill-critical-selected": "rgba(142, 11, 33, 1)",
        "color-bg-fill-critical-secondary": "rgba(254, 209, 215, 1)",
        "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
        "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
        "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
        "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
        "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
        "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
        "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
        "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
        "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
        "color-text": "rgba(48, 48, 48, 1)",
        "color-text-secondary": "rgba(97, 97, 97, 1)",
        "color-text-disabled": "rgba(181, 181, 181, 1)",
        "color-text-link": "rgba(0, 91, 211, 1)",
        "color-text-link-hover": "rgba(0, 66, 153, 1)",
        "color-text-link-active": "rgba(0, 46, 106, 1)",
        "color-text-brand": "rgba(74, 74, 74, 1)",
        "color-text-brand-hover": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
        "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
        "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
        "color-text-info": "rgba(0, 58, 90, 1)",
        "color-text-info-hover": "rgba(0, 58, 90, 1)",
        "color-text-info-active": "rgba(0, 33, 51, 1)",
        "color-text-info-secondary": "rgba(0, 124, 180, 1)",
        "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-text-success": "rgba(1, 75, 64, 1)",
        "color-text-success-hover": "rgba(7, 54, 48, 1)",
        "color-text-success-active": "rgba(2, 38, 34, 1)",
        "color-text-success-secondary": "rgba(4, 123, 93, 1)",
        "color-text-success-on-bg-fill": "rgba(250, 255, 251, 1)",
        "color-text-caution": "rgba(79, 71, 0, 1)",
        "color-text-caution-hover": "rgba(51, 46, 0, 1)",
        "color-text-caution-active": "rgba(31, 28, 0, 1)",
        "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
        "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
        "color-text-warning": "rgba(94, 66, 0, 1)",
        "color-text-warning-hover": "rgba(65, 45, 0, 1)",
        "color-text-warning-active": "rgba(37, 26, 0, 1)",
        "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
        "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
        "color-text-critical": "rgba(142, 11, 33, 1)",
        "color-text-critical-hover": "rgba(95, 7, 22, 1)",
        "color-text-critical-active": "rgba(47, 4, 11, 1)",
        "color-text-critical-secondary": "rgba(199, 10, 36, 1)",
        "color-text-critical-on-bg-fill": "rgba(255, 250, 251, 1)",
        "color-text-emphasis": "rgba(0, 91, 211, 1)",
        "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
        "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
        "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
        "color-text-magic": "rgba(87, 0, 209, 1)",
        "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
        "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
        "color-text-inverse": "rgba(227, 227, 227, 1)",
        "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
        "color-text-link-inverse": "rgba(197, 208, 255, 1)",
        "color-border": "rgba(227, 227, 227, 1)",
        "color-border-hover": "rgba(204, 204, 204, 1)",
        "color-border-disabled": "rgba(235, 235, 235, 1)",
        "color-border-secondary": "rgba(235, 235, 235, 1)",
        "color-border-tertiary": "rgba(204, 204, 204, 1)",
        "color-border-focus": "rgba(0, 91, 211, 1)",
        "color-border-brand": "rgba(227, 227, 227, 1)",
        "color-border-info": "rgba(168, 216, 255, 1)",
        "color-border-success": "rgba(146, 252, 172, 1)",
        "color-border-caution": "rgba(255, 235, 120, 1)",
        "color-border-warning": "rgba(255, 200, 121, 1)",
        "color-border-critical": "rgba(254, 193, 199, 1)",
        "color-border-critical-secondary": "rgba(142, 11, 33, 1)",
        "color-border-emphasis": "rgba(0, 91, 211, 1)",
        "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-border-magic": "rgba(228, 222, 255, 1)",
        "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
        "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
        "color-border-inverse": "rgba(97, 97, 97, 1)",
        "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
        "color-border-inverse-active": "rgba(227, 227, 227, 1)",
        "color-tooltip-tail-down-border": "rgba(212, 212, 212, 1)",
        "color-tooltip-tail-up-border": "rgba(227, 227, 227, 1)",
        "color-icon": "rgba(74, 74, 74, 1)",
        "color-icon-hover": "rgba(48, 48, 48, 1)",
        "color-icon-active": "rgba(26, 26, 26, 1)",
        "color-icon-disabled": "rgba(204, 204, 204, 1)",
        "color-icon-secondary": "rgba(138, 138, 138, 1)",
        "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
        "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
        "color-icon-brand": "rgba(26, 26, 26, 1)",
        "color-icon-info": "rgba(0, 148, 213, 1)",
        "color-icon-success": "rgba(4, 123, 93, 1)",
        "color-icon-caution": "rgba(153, 138, 0, 1)",
        "color-icon-warning": "rgba(178, 132, 0, 1)",
        "color-icon-critical": "rgba(226, 44, 56, 1)",
        "color-icon-emphasis": "rgba(0, 91, 211, 1)",
        "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-icon-magic": "rgba(128, 81, 255, 1)",
        "color-icon-inverse": "rgba(227, 227, 227, 1)",
        "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
        "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
        "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
        "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
        "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
        "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
        "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
        "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
        "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
        "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
        "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
        "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
        "color-avatar-two-bg-fill": "rgba(82, 244, 144, 1)",
        "color-avatar-two-text-on-bg-fill": "rgba(1, 75, 64, 1)",
        "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
        "color-button-gradient-bg-fill": "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)",
        "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-input-bg-surface": "rgba(253, 253, 253, 1)",
        "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
        "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
        "color-input-border": "rgba(138, 138, 138, 1)",
        "color-input-border-hover": "rgba(97, 97, 97, 1)",
        "color-input-border-active": "rgba(26, 26, 26, 1)",
        "color-nav-bg": "rgba(235, 235, 235, 1)",
        "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
        "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
        "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
        "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
        "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
        "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
        "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)",
        "color-scrollbar-thumb-bg": "rgba(181, 181, 181, 1)"
      },
      "font": {
        "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
        "font-size-275": "0.6875rem",
        "font-size-300": "0.75rem",
        "font-size-325": "0.8125rem",
        "font-size-350": "0.875rem",
        "font-size-400": "1rem",
        "font-size-450": "1.125rem",
        "font-size-500": "1.25rem",
        "font-size-550": "1.375rem",
        "font-size-600": "1.5rem",
        "font-size-750": "1.875rem",
        "font-size-800": "2rem",
        "font-size-900": "2.25rem",
        "font-size-1000": "2.5rem",
        "font-weight-regular": "450",
        "font-weight-medium": "550",
        "font-weight-semibold": "650",
        "font-weight-bold": "700",
        "font-letter-spacing-densest": "-0.03375rem",
        "font-letter-spacing-denser": "-0.01875rem",
        "font-letter-spacing-dense": "-0.0125rem",
        "font-letter-spacing-normal": "0rem",
        "font-line-height-300": "0.75rem",
        "font-line-height-400": "1rem",
        "font-line-height-500": "1.25rem",
        "font-line-height-600": "1.5rem",
        "font-line-height-700": "1.75rem",
        "font-line-height-800": "2rem",
        "font-line-height-1000": "2.5rem",
        "font-line-height-1200": "3rem"
      },
      "height": {
        "height-0": "0rem",
        "height-025": "0.0625rem",
        "height-050": "0.125rem",
        "height-100": "0.25rem",
        "height-150": "0.375rem",
        "height-200": "0.5rem",
        "height-300": "0.75rem",
        "height-400": "1rem",
        "height-500": "1.25rem",
        "height-600": "1.5rem",
        "height-700": "1.75rem",
        "height-800": "2rem",
        "height-900": "2.25rem",
        "height-1000": "2.5rem",
        "height-1200": "3rem",
        "height-1600": "4rem",
        "height-2000": "5rem",
        "height-2400": "6rem",
        "height-2800": "7rem",
        "height-3200": "8rem"
      },
      "motion": {
        "motion-duration-0": "0ms",
        "motion-duration-50": "50ms",
        "motion-duration-100": "100ms",
        "motion-duration-150": "150ms",
        "motion-duration-200": "200ms",
        "motion-duration-250": "250ms",
        "motion-duration-300": "300ms",
        "motion-duration-350": "350ms",
        "motion-duration-400": "400ms",
        "motion-duration-450": "450ms",
        "motion-duration-500": "500ms",
        "motion-duration-5000": "5000ms",
        "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
        "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
        "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
        "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
        "motion-linear": "cubic-bezier(0, 0, 1, 1)",
        "motion-keyframes-bounce": "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
        "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
        "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
        "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
        "motion-keyframes-appear-above": "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
        "motion-keyframes-appear-below": "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
      },
      "shadow": {
        "shadow-0": "none",
        "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
        "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
        "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
        "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
        "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
        "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
        "shadow-bevel-100": "0.0625rem 0rem 0rem 0rem rgba(0, 0, 0, 0.13) inset, -0.0625rem 0rem 0rem 0rem rgba(0, 0, 0, 0.13) inset, 0rem -0.0625rem 0rem 0rem rgba(0, 0, 0, 0.17) inset, 0rem 0.0625rem 0rem 0rem rgba(204, 204, 204, 0.5) inset",
        "shadow-inset-100": "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
        "shadow-inset-200": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
        "shadow-button": "0rem -0.0625rem 0rem 0rem #b5b5b5 inset, 0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.1) inset, 0rem 0.03125rem 0rem 0.09375rem #FFF inset",
        "shadow-button-hover": "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
        "shadow-button-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.2) inset",
        "shadow-button-primary": "0rem -0.0625rem 0rem 0.0625rem rgba(0, 0, 0, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(48, 48, 48, 1) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.25) inset;",
        "shadow-button-primary-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
        "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem rgb(0, 0, 0) inset",
        "shadow-button-primary-critical": "0rem -0.0625rem 0rem 0.0625rem rgba(142, 31, 11, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(181, 38, 11, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.349) inset",
        "shadow-button-primary-critical-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-critical-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-button-primary-success": "0rem -0.0625rem 0rem 0.0625rem rgba(12, 81, 50, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(19, 111, 69, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.251) inset",
        "shadow-button-primary-success-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-success-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset"
      },
      "space": {
        "space-0": "0rem",
        "space-025": "0.0625rem",
        "space-050": "0.125rem",
        "space-100": "0.25rem",
        "space-150": "0.375rem",
        "space-200": "0.5rem",
        "space-300": "0.75rem",
        "space-400": "1rem",
        "space-500": "1.25rem",
        "space-600": "1.5rem",
        "space-800": "2rem",
        "space-1000": "2.5rem",
        "space-1200": "3rem",
        "space-1600": "4rem",
        "space-2000": "5rem",
        "space-2400": "6rem",
        "space-2800": "7rem",
        "space-3200": "8rem",
        "space-button-group-gap": "0.5rem",
        "space-card-gap": "1rem",
        "space-card-padding": "1rem",
        "space-table-cell-padding": "0.375rem"
      },
      "text": {
        "text-heading-3xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-3xl-font-size": "2.25rem",
        "text-heading-3xl-font-weight": "700",
        "text-heading-3xl-font-letter-spacing": "-0.03375rem",
        "text-heading-3xl-font-line-height": "3rem",
        "text-heading-2xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-2xl-font-size": "1.875rem",
        "text-heading-2xl-font-weight": "700",
        "text-heading-2xl-font-letter-spacing": "-0.01875rem",
        "text-heading-2xl-font-line-height": "2.5rem",
        "text-heading-xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xl-font-size": "1.5rem",
        "text-heading-xl-font-weight": "700",
        "text-heading-xl-font-letter-spacing": "-0.0125rem",
        "text-heading-xl-font-line-height": "2rem",
        "text-heading-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-lg-font-size": "1.25rem",
        "text-heading-lg-font-weight": "650",
        "text-heading-lg-font-letter-spacing": "-0.0125rem",
        "text-heading-lg-font-line-height": "1.5rem",
        "text-heading-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-md-font-size": "0.875rem",
        "text-heading-md-font-weight": "650",
        "text-heading-md-font-letter-spacing": "0rem",
        "text-heading-md-font-line-height": "1.25rem",
        "text-heading-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-sm-font-size": "0.8125rem",
        "text-heading-sm-font-weight": "650",
        "text-heading-sm-font-letter-spacing": "0rem",
        "text-heading-sm-font-line-height": "1.25rem",
        "text-heading-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xs-font-size": "0.75rem",
        "text-heading-xs-font-weight": "650",
        "text-heading-xs-font-letter-spacing": "0rem",
        "text-heading-xs-font-line-height": "1rem",
        "text-body-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-lg-font-size": "0.875rem",
        "text-body-lg-font-weight": "450",
        "text-body-lg-font-letter-spacing": "0rem",
        "text-body-lg-font-line-height": "1.25rem",
        "text-body-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-md-font-size": "0.8125rem",
        "text-body-md-font-weight": "450",
        "text-body-md-font-letter-spacing": "0rem",
        "text-body-md-font-line-height": "1.25rem",
        "text-body-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-sm-font-size": "0.75rem",
        "text-body-sm-font-weight": "450",
        "text-body-sm-font-letter-spacing": "0rem",
        "text-body-sm-font-line-height": "1rem",
        "text-body-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-xs-font-size": "0.6875rem",
        "text-body-xs-font-weight": "450",
        "text-body-xs-font-letter-spacing": "0rem",
        "text-body-xs-font-line-height": "0.75rem"
      },
      "width": {
        "width-0": "0rem",
        "width-025": "0.0625rem",
        "width-050": "0.125rem",
        "width-100": "0.25rem",
        "width-150": "0.375rem",
        "width-200": "0.5rem",
        "width-300": "0.75rem",
        "width-400": "1rem",
        "width-500": "1.25rem",
        "width-600": "1.5rem",
        "width-700": "1.75rem",
        "width-800": "2rem",
        "width-900": "2.25rem",
        "width-1000": "2.5rem",
        "width-1200": "3rem",
        "width-1600": "4rem",
        "width-2000": "5rem",
        "width-2400": "6rem",
        "width-2800": "7rem",
        "width-3200": "8rem"
      },
      "zIndex": {
        "z-index-0": "auto",
        "z-index-1": "100",
        "z-index-2": "400",
        "z-index-3": "510",
        "z-index-4": "512",
        "z-index-5": "513",
        "z-index-6": "514",
        "z-index-7": "515",
        "z-index-8": "516",
        "z-index-9": "517",
        "z-index-10": "518",
        "z-index-11": "519",
        "z-index-12": "520"
      }
    },
    "light-mobile": {
      "border": {
        "border-radius-0": "0rem",
        "border-radius-050": "0.125rem",
        "border-radius-100": "0.25rem",
        "border-radius-150": "0.375rem",
        "border-radius-200": "0.5rem",
        "border-radius-300": "0.75rem",
        "border-radius-400": "1rem",
        "border-radius-500": "1.25rem",
        "border-radius-750": "1.875rem",
        "border-radius-full": "624.9375rem",
        "border-width-0": "0rem",
        "border-width-0165": "0.04125rem",
        "border-width-025": "0.0625rem",
        "border-width-050": "0.125rem",
        "border-width-100": "0.25rem"
      },
      "breakpoints": {
        "breakpoints-xs": "0rem",
        "breakpoints-sm": "30.625rem",
        "breakpoints-md": "48rem",
        "breakpoints-lg": "65rem",
        "breakpoints-xl": "90rem"
      },
      "color": {
        "color-scheme": "light",
        "color-bg": "rgba(241, 241, 241, 1)",
        "color-bg-inverse": "rgba(26, 26, 26, 1)",
        "color-bg-surface": "rgba(255, 255, 255, 1)",
        "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
        "color-bg-surface-active": "rgba(243, 243, 243, 1)",
        "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-surface-secondary": "rgba(247, 247, 247, 1)",
        "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
        "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
        "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
        "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
        "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-info": "rgba(234, 244, 255, 1)",
        "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
        "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
        "color-bg-surface-success": "rgba(205, 254, 212, 1)",
        "color-bg-surface-success-hover": "rgba(175, 254, 191, 1)",
        "color-bg-surface-success-active": "rgba(146, 252, 172, 1)",
        "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
        "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
        "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
        "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
        "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
        "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
        "color-bg-surface-critical": "rgba(254, 232, 235, 1)",
        "color-bg-surface-critical-hover": "rgba(254, 225, 230, 1)",
        "color-bg-surface-critical-active": "rgba(254, 217, 223, 1)",
        "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
        "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
        "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
        "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
        "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
        "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
        "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
        "color-bg-fill": "rgba(255, 255, 255, 1)",
        "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
        "color-bg-fill-active": "rgba(247, 247, 247, 1)",
        "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
        "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
        "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
        "color-bg-fill-secondary-selected": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
        "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
        "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
        "color-bg-fill-info": "rgba(145, 208, 255, 1)",
        "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
        "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
        "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
        "color-bg-fill-success": "rgba(4, 123, 93, 1)",
        "color-bg-fill-success-hover": "rgba(3, 94, 76, 1)",
        "color-bg-fill-success-active": "rgba(1, 75, 64, 1)",
        "color-bg-fill-success-secondary": "rgba(175, 254, 191, 1)",
        "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
        "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
        "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
        "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
        "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
        "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
        "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
        "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
        "color-bg-fill-critical": "rgba(199, 10, 36, 1)",
        "color-bg-fill-critical-hover": "rgba(163, 10, 36, 1)",
        "color-bg-fill-critical-active": "rgba(142, 11, 33, 1)",
        "color-bg-fill-critical-selected": "rgba(142, 11, 33, 1)",
        "color-bg-fill-critical-secondary": "rgba(254, 209, 215, 1)",
        "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
        "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
        "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
        "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
        "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
        "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
        "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
        "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
        "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
        "color-text": "rgba(48, 48, 48, 1)",
        "color-text-secondary": "rgba(97, 97, 97, 1)",
        "color-text-disabled": "rgba(181, 181, 181, 1)",
        "color-text-link": "rgba(0, 91, 211, 1)",
        "color-text-link-hover": "rgba(0, 66, 153, 1)",
        "color-text-link-active": "rgba(0, 46, 106, 1)",
        "color-text-brand": "rgba(74, 74, 74, 1)",
        "color-text-brand-hover": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
        "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
        "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
        "color-text-info": "rgba(0, 58, 90, 1)",
        "color-text-info-hover": "rgba(0, 58, 90, 1)",
        "color-text-info-active": "rgba(0, 33, 51, 1)",
        "color-text-info-secondary": "rgba(0, 124, 180, 1)",
        "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-text-success": "rgba(1, 75, 64, 1)",
        "color-text-success-hover": "rgba(7, 54, 48, 1)",
        "color-text-success-active": "rgba(2, 38, 34, 1)",
        "color-text-success-secondary": "rgba(4, 123, 93, 1)",
        "color-text-success-on-bg-fill": "rgba(250, 255, 251, 1)",
        "color-text-caution": "rgba(79, 71, 0, 1)",
        "color-text-caution-hover": "rgba(51, 46, 0, 1)",
        "color-text-caution-active": "rgba(31, 28, 0, 1)",
        "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
        "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
        "color-text-warning": "rgba(94, 66, 0, 1)",
        "color-text-warning-hover": "rgba(65, 45, 0, 1)",
        "color-text-warning-active": "rgba(37, 26, 0, 1)",
        "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
        "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
        "color-text-critical": "rgba(142, 11, 33, 1)",
        "color-text-critical-hover": "rgba(95, 7, 22, 1)",
        "color-text-critical-active": "rgba(47, 4, 11, 1)",
        "color-text-critical-secondary": "rgba(199, 10, 36, 1)",
        "color-text-critical-on-bg-fill": "rgba(255, 250, 251, 1)",
        "color-text-emphasis": "rgba(0, 91, 211, 1)",
        "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
        "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
        "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
        "color-text-magic": "rgba(87, 0, 209, 1)",
        "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
        "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
        "color-text-inverse": "rgba(227, 227, 227, 1)",
        "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
        "color-text-link-inverse": "rgba(197, 208, 255, 1)",
        "color-border": "rgba(227, 227, 227, 1)",
        "color-border-hover": "rgba(204, 204, 204, 1)",
        "color-border-disabled": "rgba(235, 235, 235, 1)",
        "color-border-secondary": "rgba(235, 235, 235, 1)",
        "color-border-tertiary": "rgba(204, 204, 204, 1)",
        "color-border-focus": "rgba(0, 91, 211, 1)",
        "color-border-brand": "rgba(227, 227, 227, 1)",
        "color-border-info": "rgba(168, 216, 255, 1)",
        "color-border-success": "rgba(146, 252, 172, 1)",
        "color-border-caution": "rgba(255, 235, 120, 1)",
        "color-border-warning": "rgba(255, 200, 121, 1)",
        "color-border-critical": "rgba(254, 193, 199, 1)",
        "color-border-critical-secondary": "rgba(142, 11, 33, 1)",
        "color-border-emphasis": "rgba(0, 91, 211, 1)",
        "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-border-magic": "rgba(228, 222, 255, 1)",
        "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
        "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
        "color-border-inverse": "rgba(97, 97, 97, 1)",
        "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
        "color-border-inverse-active": "rgba(227, 227, 227, 1)",
        "color-tooltip-tail-down-border": "rgba(212, 212, 212, 1)",
        "color-tooltip-tail-up-border": "rgba(227, 227, 227, 1)",
        "color-icon": "rgba(74, 74, 74, 1)",
        "color-icon-hover": "rgba(48, 48, 48, 1)",
        "color-icon-active": "rgba(26, 26, 26, 1)",
        "color-icon-disabled": "rgba(204, 204, 204, 1)",
        "color-icon-secondary": "rgba(138, 138, 138, 1)",
        "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
        "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
        "color-icon-brand": "rgba(26, 26, 26, 1)",
        "color-icon-info": "rgba(0, 148, 213, 1)",
        "color-icon-success": "rgba(4, 123, 93, 1)",
        "color-icon-caution": "rgba(153, 138, 0, 1)",
        "color-icon-warning": "rgba(178, 132, 0, 1)",
        "color-icon-critical": "rgba(226, 44, 56, 1)",
        "color-icon-emphasis": "rgba(0, 91, 211, 1)",
        "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-icon-magic": "rgba(128, 81, 255, 1)",
        "color-icon-inverse": "rgba(227, 227, 227, 1)",
        "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
        "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
        "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
        "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
        "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
        "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
        "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
        "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
        "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
        "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
        "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
        "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
        "color-avatar-two-bg-fill": "rgba(82, 244, 144, 1)",
        "color-avatar-two-text-on-bg-fill": "rgba(1, 75, 64, 1)",
        "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
        "color-button-gradient-bg-fill": "none",
        "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-input-bg-surface": "rgba(253, 253, 253, 1)",
        "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
        "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
        "color-input-border": "rgba(138, 138, 138, 1)",
        "color-input-border-hover": "rgba(97, 97, 97, 1)",
        "color-input-border-active": "rgba(26, 26, 26, 1)",
        "color-nav-bg": "rgba(235, 235, 235, 1)",
        "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
        "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
        "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
        "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
        "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
        "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
        "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)",
        "color-scrollbar-thumb-bg": "rgba(181, 181, 181, 1)"
      },
      "font": {
        "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
        "font-size-275": "0.6875rem",
        "font-size-300": "0.75rem",
        "font-size-325": "0.8125rem",
        "font-size-350": "0.875rem",
        "font-size-400": "1rem",
        "font-size-450": "1.125rem",
        "font-size-500": "1.25rem",
        "font-size-550": "1.375rem",
        "font-size-600": "1.5rem",
        "font-size-750": "1.875rem",
        "font-size-800": "2rem",
        "font-size-900": "2.25rem",
        "font-size-1000": "2.5rem",
        "font-weight-regular": "450",
        "font-weight-medium": "550",
        "font-weight-semibold": "650",
        "font-weight-bold": "700",
        "font-letter-spacing-densest": "-0.03375rem",
        "font-letter-spacing-denser": "-0.01875rem",
        "font-letter-spacing-dense": "-0.0125rem",
        "font-letter-spacing-normal": "0rem",
        "font-line-height-300": "0.75rem",
        "font-line-height-400": "1rem",
        "font-line-height-500": "1.25rem",
        "font-line-height-600": "1.5rem",
        "font-line-height-700": "1.75rem",
        "font-line-height-800": "2rem",
        "font-line-height-1000": "2.5rem",
        "font-line-height-1200": "3rem"
      },
      "height": {
        "height-0": "0rem",
        "height-025": "0.0625rem",
        "height-050": "0.125rem",
        "height-100": "0.25rem",
        "height-150": "0.375rem",
        "height-200": "0.5rem",
        "height-300": "0.75rem",
        "height-400": "1rem",
        "height-500": "1.25rem",
        "height-600": "1.5rem",
        "height-700": "1.75rem",
        "height-800": "2rem",
        "height-900": "2.25rem",
        "height-1000": "2.5rem",
        "height-1200": "3rem",
        "height-1600": "4rem",
        "height-2000": "5rem",
        "height-2400": "6rem",
        "height-2800": "7rem",
        "height-3200": "8rem"
      },
      "motion": {
        "motion-duration-0": "0ms",
        "motion-duration-50": "50ms",
        "motion-duration-100": "100ms",
        "motion-duration-150": "150ms",
        "motion-duration-200": "200ms",
        "motion-duration-250": "250ms",
        "motion-duration-300": "300ms",
        "motion-duration-350": "350ms",
        "motion-duration-400": "400ms",
        "motion-duration-450": "450ms",
        "motion-duration-500": "500ms",
        "motion-duration-5000": "5000ms",
        "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
        "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
        "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
        "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
        "motion-linear": "cubic-bezier(0, 0, 1, 1)",
        "motion-keyframes-bounce": "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
        "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
        "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
        "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
        "motion-keyframes-appear-above": "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
        "motion-keyframes-appear-below": "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
      },
      "shadow": {
        "shadow-0": "none",
        "shadow-100": "none",
        "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
        "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
        "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
        "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
        "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
        "shadow-bevel-100": "none",
        "shadow-inset-100": "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
        "shadow-inset-200": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
        "shadow-button": "0 0 0 var(--p-border-width-025) var(--p-color-border) inset",
        "shadow-button-hover": "0 0 0 var(--p-border-width-025) var(--p-color-border) inset",
        "shadow-button-inset": "0 0 0 var(--p-border-width-025) var(--p-color-border) inset",
        "shadow-button-primary": "none",
        "shadow-button-primary-hover": "none",
        "shadow-button-primary-inset": "none",
        "shadow-button-primary-critical": "none",
        "shadow-button-primary-critical-hover": "none",
        "shadow-button-primary-critical-inset": "none",
        "shadow-button-primary-success": "none",
        "shadow-button-primary-success-hover": "none",
        "shadow-button-primary-success-inset": "none",
        "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset"
      },
      "space": {
        "space-0": "0rem",
        "space-025": "0.0625rem",
        "space-050": "0.125rem",
        "space-100": "0.25rem",
        "space-150": "0.375rem",
        "space-200": "0.5rem",
        "space-300": "0.75rem",
        "space-400": "1rem",
        "space-500": "1.25rem",
        "space-600": "1.5rem",
        "space-800": "2rem",
        "space-1000": "2.5rem",
        "space-1200": "3rem",
        "space-1600": "4rem",
        "space-2000": "5rem",
        "space-2400": "6rem",
        "space-2800": "7rem",
        "space-3200": "8rem",
        "space-button-group-gap": "0.5rem",
        "space-card-gap": "0.5rem",
        "space-card-padding": "1rem",
        "space-table-cell-padding": "0.375rem"
      },
      "text": {
        "text-heading-3xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-3xl-font-size": "2.25rem",
        "text-heading-3xl-font-weight": "700",
        "text-heading-3xl-font-letter-spacing": "-0.03375rem",
        "text-heading-3xl-font-line-height": "3rem",
        "text-heading-2xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-2xl-font-size": "2rem",
        "text-heading-2xl-font-weight": "700",
        "text-heading-2xl-font-letter-spacing": "-0.01875rem",
        "text-heading-2xl-font-line-height": "2.5rem",
        "text-heading-xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xl-font-size": "1.375rem",
        "text-heading-xl-font-weight": "700",
        "text-heading-xl-font-letter-spacing": "-0.0125rem",
        "text-heading-xl-font-line-height": "1.75rem",
        "text-heading-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-lg-font-size": "1.125rem",
        "text-heading-lg-font-weight": "650",
        "text-heading-lg-font-letter-spacing": "-0.0125rem",
        "text-heading-lg-font-line-height": "1.5rem",
        "text-heading-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-md-font-size": "1rem",
        "text-heading-md-font-weight": "650",
        "text-heading-md-font-letter-spacing": "0rem",
        "text-heading-md-font-line-height": "1.25rem",
        "text-heading-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-sm-font-size": "0.875rem",
        "text-heading-sm-font-weight": "650",
        "text-heading-sm-font-letter-spacing": "0rem",
        "text-heading-sm-font-line-height": "1.25rem",
        "text-heading-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xs-font-size": "0.75rem",
        "text-heading-xs-font-weight": "650",
        "text-heading-xs-font-letter-spacing": "0rem",
        "text-heading-xs-font-line-height": "1rem",
        "text-body-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-lg-font-size": "1.125rem",
        "text-body-lg-font-weight": "450",
        "text-body-lg-font-letter-spacing": "0rem",
        "text-body-lg-font-line-height": "1.75rem",
        "text-body-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-md-font-size": "1rem",
        "text-body-md-font-weight": "450",
        "text-body-md-font-letter-spacing": "0rem",
        "text-body-md-font-line-height": "1.5rem",
        "text-body-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-sm-font-size": "0.875rem",
        "text-body-sm-font-weight": "450",
        "text-body-sm-font-letter-spacing": "0rem",
        "text-body-sm-font-line-height": "1.25rem",
        "text-body-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-xs-font-size": "0.75rem",
        "text-body-xs-font-weight": "450",
        "text-body-xs-font-letter-spacing": "0rem",
        "text-body-xs-font-line-height": "1rem"
      },
      "width": {
        "width-0": "0rem",
        "width-025": "0.0625rem",
        "width-050": "0.125rem",
        "width-100": "0.25rem",
        "width-150": "0.375rem",
        "width-200": "0.5rem",
        "width-300": "0.75rem",
        "width-400": "1rem",
        "width-500": "1.25rem",
        "width-600": "1.5rem",
        "width-700": "1.75rem",
        "width-800": "2rem",
        "width-900": "2.25rem",
        "width-1000": "2.5rem",
        "width-1200": "3rem",
        "width-1600": "4rem",
        "width-2000": "5rem",
        "width-2400": "6rem",
        "width-2800": "7rem",
        "width-3200": "8rem"
      },
      "zIndex": {
        "z-index-0": "auto",
        "z-index-1": "100",
        "z-index-2": "400",
        "z-index-3": "510",
        "z-index-4": "512",
        "z-index-5": "513",
        "z-index-6": "514",
        "z-index-7": "515",
        "z-index-8": "516",
        "z-index-9": "517",
        "z-index-10": "518",
        "z-index-11": "519",
        "z-index-12": "520"
      }
    },
    "light-high-contrast-experimental": {
      "border": {
        "border-radius-0": "0rem",
        "border-radius-050": "0.125rem",
        "border-radius-100": "0.25rem",
        "border-radius-150": "0.375rem",
        "border-radius-200": "0.5rem",
        "border-radius-300": "0.75rem",
        "border-radius-400": "1rem",
        "border-radius-500": "1.25rem",
        "border-radius-750": "1.875rem",
        "border-radius-full": "624.9375rem",
        "border-width-0": "0rem",
        "border-width-0165": "0.04125rem",
        "border-width-025": "0.0625rem",
        "border-width-050": "0.125rem",
        "border-width-100": "0.25rem"
      },
      "breakpoints": {
        "breakpoints-xs": "0rem",
        "breakpoints-sm": "30.625rem",
        "breakpoints-md": "48rem",
        "breakpoints-lg": "65rem",
        "breakpoints-xl": "90rem"
      },
      "color": {
        "color-scheme": "light",
        "color-bg": "rgba(241, 241, 241, 1)",
        "color-bg-inverse": "rgba(26, 26, 26, 1)",
        "color-bg-surface": "rgba(255, 255, 255, 1)",
        "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
        "color-bg-surface-active": "rgba(243, 243, 243, 1)",
        "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-surface-secondary": "rgba(241, 241, 241, 1)",
        "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
        "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
        "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
        "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
        "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-info": "rgba(234, 244, 255, 1)",
        "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
        "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
        "color-bg-surface-success": "rgba(205, 254, 212, 1)",
        "color-bg-surface-success-hover": "rgba(175, 254, 191, 1)",
        "color-bg-surface-success-active": "rgba(146, 252, 172, 1)",
        "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
        "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
        "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
        "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
        "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
        "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
        "color-bg-surface-critical": "rgba(254, 232, 235, 1)",
        "color-bg-surface-critical-hover": "rgba(254, 225, 230, 1)",
        "color-bg-surface-critical-active": "rgba(254, 217, 223, 1)",
        "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
        "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
        "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
        "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
        "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
        "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
        "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
        "color-bg-fill": "rgba(255, 255, 255, 1)",
        "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
        "color-bg-fill-active": "rgba(247, 247, 247, 1)",
        "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
        "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
        "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
        "color-bg-fill-secondary-selected": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
        "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
        "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
        "color-bg-fill-info": "rgba(145, 208, 255, 1)",
        "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
        "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
        "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
        "color-bg-fill-success": "rgba(4, 123, 93, 1)",
        "color-bg-fill-success-hover": "rgba(3, 94, 76, 1)",
        "color-bg-fill-success-active": "rgba(1, 75, 64, 1)",
        "color-bg-fill-success-secondary": "rgba(175, 254, 191, 1)",
        "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
        "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
        "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
        "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
        "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
        "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
        "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
        "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
        "color-bg-fill-critical": "rgba(199, 10, 36, 1)",
        "color-bg-fill-critical-hover": "rgba(163, 10, 36, 1)",
        "color-bg-fill-critical-active": "rgba(142, 11, 33, 1)",
        "color-bg-fill-critical-selected": "rgba(142, 11, 33, 1)",
        "color-bg-fill-critical-secondary": "rgba(254, 209, 215, 1)",
        "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
        "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
        "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
        "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
        "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
        "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
        "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
        "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
        "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
        "color-text": "rgba(26, 26, 26, 1)",
        "color-text-secondary": "rgba(26, 26, 26, 1)",
        "color-text-disabled": "rgba(181, 181, 181, 1)",
        "color-text-link": "rgba(0, 91, 211, 1)",
        "color-text-link-hover": "rgba(0, 66, 153, 1)",
        "color-text-link-active": "rgba(0, 46, 106, 1)",
        "color-text-brand": "rgba(26, 26, 26, 1)",
        "color-text-brand-hover": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
        "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
        "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
        "color-text-info": "rgba(0, 58, 90, 1)",
        "color-text-info-hover": "rgba(0, 58, 90, 1)",
        "color-text-info-active": "rgba(0, 33, 51, 1)",
        "color-text-info-secondary": "rgba(0, 124, 180, 1)",
        "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-text-success": "rgba(1, 75, 64, 1)",
        "color-text-success-hover": "rgba(7, 54, 48, 1)",
        "color-text-success-active": "rgba(2, 38, 34, 1)",
        "color-text-success-secondary": "rgba(4, 123, 93, 1)",
        "color-text-success-on-bg-fill": "rgba(250, 255, 251, 1)",
        "color-text-caution": "rgba(79, 71, 0, 1)",
        "color-text-caution-hover": "rgba(51, 46, 0, 1)",
        "color-text-caution-active": "rgba(31, 28, 0, 1)",
        "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
        "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
        "color-text-warning": "rgba(94, 66, 0, 1)",
        "color-text-warning-hover": "rgba(65, 45, 0, 1)",
        "color-text-warning-active": "rgba(37, 26, 0, 1)",
        "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
        "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
        "color-text-critical": "rgba(142, 11, 33, 1)",
        "color-text-critical-hover": "rgba(95, 7, 22, 1)",
        "color-text-critical-active": "rgba(47, 4, 11, 1)",
        "color-text-critical-secondary": "rgba(199, 10, 36, 1)",
        "color-text-critical-on-bg-fill": "rgba(255, 250, 251, 1)",
        "color-text-emphasis": "rgba(0, 91, 211, 1)",
        "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
        "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
        "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
        "color-text-magic": "rgba(87, 0, 209, 1)",
        "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
        "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
        "color-text-inverse": "rgba(227, 227, 227, 1)",
        "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
        "color-text-link-inverse": "rgba(197, 208, 255, 1)",
        "color-border": "rgba(138, 138, 138, 1)",
        "color-border-hover": "rgba(204, 204, 204, 1)",
        "color-border-disabled": "rgba(235, 235, 235, 1)",
        "color-border-secondary": "rgba(138, 138, 138, 1)",
        "color-border-tertiary": "rgba(204, 204, 204, 1)",
        "color-border-focus": "rgba(0, 91, 211, 1)",
        "color-border-brand": "rgba(227, 227, 227, 1)",
        "color-border-info": "rgba(168, 216, 255, 1)",
        "color-border-success": "rgba(146, 252, 172, 1)",
        "color-border-caution": "rgba(255, 235, 120, 1)",
        "color-border-warning": "rgba(255, 200, 121, 1)",
        "color-border-critical": "rgba(254, 193, 199, 1)",
        "color-border-critical-secondary": "rgba(142, 11, 33, 1)",
        "color-border-emphasis": "rgba(0, 91, 211, 1)",
        "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-border-magic": "rgba(228, 222, 255, 1)",
        "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
        "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
        "color-border-inverse": "rgba(97, 97, 97, 1)",
        "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
        "color-border-inverse-active": "rgba(227, 227, 227, 1)",
        "color-tooltip-tail-down-border": "rgba(212, 212, 212, 1)",
        "color-tooltip-tail-up-border": "rgba(227, 227, 227, 1)",
        "color-icon": "rgba(74, 74, 74, 1)",
        "color-icon-hover": "rgba(48, 48, 48, 1)",
        "color-icon-active": "rgba(26, 26, 26, 1)",
        "color-icon-disabled": "rgba(204, 204, 204, 1)",
        "color-icon-secondary": "rgba(74, 74, 74, 1)",
        "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
        "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
        "color-icon-brand": "rgba(26, 26, 26, 1)",
        "color-icon-info": "rgba(0, 148, 213, 1)",
        "color-icon-success": "rgba(4, 123, 93, 1)",
        "color-icon-caution": "rgba(153, 138, 0, 1)",
        "color-icon-warning": "rgba(178, 132, 0, 1)",
        "color-icon-critical": "rgba(226, 44, 56, 1)",
        "color-icon-emphasis": "rgba(0, 91, 211, 1)",
        "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-icon-magic": "rgba(128, 81, 255, 1)",
        "color-icon-inverse": "rgba(227, 227, 227, 1)",
        "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
        "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
        "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
        "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
        "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
        "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
        "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
        "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
        "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
        "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
        "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
        "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
        "color-avatar-two-bg-fill": "rgba(82, 244, 144, 1)",
        "color-avatar-two-text-on-bg-fill": "rgba(1, 75, 64, 1)",
        "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
        "color-button-gradient-bg-fill": "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)",
        "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-input-bg-surface": "rgba(253, 253, 253, 1)",
        "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
        "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
        "color-input-border": "rgba(74, 74, 74, 1)",
        "color-input-border-hover": "rgba(97, 97, 97, 1)",
        "color-input-border-active": "rgba(26, 26, 26, 1)",
        "color-nav-bg": "rgba(235, 235, 235, 1)",
        "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
        "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
        "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
        "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
        "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
        "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
        "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)",
        "color-scrollbar-thumb-bg": "rgba(181, 181, 181, 1)"
      },
      "font": {
        "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
        "font-size-275": "0.6875rem",
        "font-size-300": "0.75rem",
        "font-size-325": "0.8125rem",
        "font-size-350": "0.875rem",
        "font-size-400": "1rem",
        "font-size-450": "1.125rem",
        "font-size-500": "1.25rem",
        "font-size-550": "1.375rem",
        "font-size-600": "1.5rem",
        "font-size-750": "1.875rem",
        "font-size-800": "2rem",
        "font-size-900": "2.25rem",
        "font-size-1000": "2.5rem",
        "font-weight-regular": "450",
        "font-weight-medium": "550",
        "font-weight-semibold": "650",
        "font-weight-bold": "700",
        "font-letter-spacing-densest": "-0.03375rem",
        "font-letter-spacing-denser": "-0.01875rem",
        "font-letter-spacing-dense": "-0.0125rem",
        "font-letter-spacing-normal": "0rem",
        "font-line-height-300": "0.75rem",
        "font-line-height-400": "1rem",
        "font-line-height-500": "1.25rem",
        "font-line-height-600": "1.5rem",
        "font-line-height-700": "1.75rem",
        "font-line-height-800": "2rem",
        "font-line-height-1000": "2.5rem",
        "font-line-height-1200": "3rem"
      },
      "height": {
        "height-0": "0rem",
        "height-025": "0.0625rem",
        "height-050": "0.125rem",
        "height-100": "0.25rem",
        "height-150": "0.375rem",
        "height-200": "0.5rem",
        "height-300": "0.75rem",
        "height-400": "1rem",
        "height-500": "1.25rem",
        "height-600": "1.5rem",
        "height-700": "1.75rem",
        "height-800": "2rem",
        "height-900": "2.25rem",
        "height-1000": "2.5rem",
        "height-1200": "3rem",
        "height-1600": "4rem",
        "height-2000": "5rem",
        "height-2400": "6rem",
        "height-2800": "7rem",
        "height-3200": "8rem"
      },
      "motion": {
        "motion-duration-0": "0ms",
        "motion-duration-50": "50ms",
        "motion-duration-100": "100ms",
        "motion-duration-150": "150ms",
        "motion-duration-200": "200ms",
        "motion-duration-250": "250ms",
        "motion-duration-300": "300ms",
        "motion-duration-350": "350ms",
        "motion-duration-400": "400ms",
        "motion-duration-450": "450ms",
        "motion-duration-500": "500ms",
        "motion-duration-5000": "5000ms",
        "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
        "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
        "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
        "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
        "motion-linear": "cubic-bezier(0, 0, 1, 1)",
        "motion-keyframes-bounce": "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
        "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
        "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
        "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
        "motion-keyframes-appear-above": "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
        "motion-keyframes-appear-below": "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
      },
      "shadow": {
        "shadow-0": "none",
        "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
        "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
        "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
        "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
        "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
        "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
        "shadow-bevel-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07), 0rem 0.0625rem 0rem 0rem rgba(208, 208, 208, 0.40) inset, 0.0625rem 0rem 0rem 0rem #CCC inset, -0.0625rem 0rem 0rem 0rem #CCC inset, 0rem -0.0625rem 0rem 0rem #999 inset",
        "shadow-inset-100": "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
        "shadow-inset-200": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
        "shadow-button": "0rem -0.0625rem 0rem 0rem #b5b5b5 inset, 0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.1) inset, 0rem 0.03125rem 0rem 0.09375rem #FFF inset",
        "shadow-button-hover": "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
        "shadow-button-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.2) inset",
        "shadow-button-primary": "0rem -0.0625rem 0rem 0.0625rem rgba(0, 0, 0, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(48, 48, 48, 1) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.25) inset;",
        "shadow-button-primary-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
        "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem rgb(0, 0, 0) inset",
        "shadow-button-primary-critical": "0rem -0.0625rem 0rem 0.0625rem rgba(142, 31, 11, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(181, 38, 11, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.349) inset",
        "shadow-button-primary-critical-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-critical-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-button-primary-success": "0rem -0.0625rem 0rem 0.0625rem rgba(12, 81, 50, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(19, 111, 69, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.251) inset",
        "shadow-button-primary-success-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-success-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset"
      },
      "space": {
        "space-0": "0rem",
        "space-025": "0.0625rem",
        "space-050": "0.125rem",
        "space-100": "0.25rem",
        "space-150": "0.375rem",
        "space-200": "0.5rem",
        "space-300": "0.75rem",
        "space-400": "1rem",
        "space-500": "1.25rem",
        "space-600": "1.5rem",
        "space-800": "2rem",
        "space-1000": "2.5rem",
        "space-1200": "3rem",
        "space-1600": "4rem",
        "space-2000": "5rem",
        "space-2400": "6rem",
        "space-2800": "7rem",
        "space-3200": "8rem",
        "space-button-group-gap": "0.5rem",
        "space-card-gap": "1rem",
        "space-card-padding": "1rem",
        "space-table-cell-padding": "0.375rem"
      },
      "text": {
        "text-heading-3xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-3xl-font-size": "2.25rem",
        "text-heading-3xl-font-weight": "700",
        "text-heading-3xl-font-letter-spacing": "-0.03375rem",
        "text-heading-3xl-font-line-height": "3rem",
        "text-heading-2xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-2xl-font-size": "1.875rem",
        "text-heading-2xl-font-weight": "700",
        "text-heading-2xl-font-letter-spacing": "-0.01875rem",
        "text-heading-2xl-font-line-height": "2.5rem",
        "text-heading-xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xl-font-size": "1.5rem",
        "text-heading-xl-font-weight": "700",
        "text-heading-xl-font-letter-spacing": "-0.0125rem",
        "text-heading-xl-font-line-height": "2rem",
        "text-heading-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-lg-font-size": "1.25rem",
        "text-heading-lg-font-weight": "650",
        "text-heading-lg-font-letter-spacing": "-0.0125rem",
        "text-heading-lg-font-line-height": "1.5rem",
        "text-heading-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-md-font-size": "0.875rem",
        "text-heading-md-font-weight": "650",
        "text-heading-md-font-letter-spacing": "0rem",
        "text-heading-md-font-line-height": "1.25rem",
        "text-heading-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-sm-font-size": "0.8125rem",
        "text-heading-sm-font-weight": "650",
        "text-heading-sm-font-letter-spacing": "0rem",
        "text-heading-sm-font-line-height": "1.25rem",
        "text-heading-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xs-font-size": "0.75rem",
        "text-heading-xs-font-weight": "650",
        "text-heading-xs-font-letter-spacing": "0rem",
        "text-heading-xs-font-line-height": "1rem",
        "text-body-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-lg-font-size": "0.875rem",
        "text-body-lg-font-weight": "450",
        "text-body-lg-font-letter-spacing": "0rem",
        "text-body-lg-font-line-height": "1.25rem",
        "text-body-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-md-font-size": "0.8125rem",
        "text-body-md-font-weight": "450",
        "text-body-md-font-letter-spacing": "0rem",
        "text-body-md-font-line-height": "1.25rem",
        "text-body-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-sm-font-size": "0.75rem",
        "text-body-sm-font-weight": "450",
        "text-body-sm-font-letter-spacing": "0rem",
        "text-body-sm-font-line-height": "1rem",
        "text-body-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-xs-font-size": "0.6875rem",
        "text-body-xs-font-weight": "450",
        "text-body-xs-font-letter-spacing": "0rem",
        "text-body-xs-font-line-height": "0.75rem"
      },
      "width": {
        "width-0": "0rem",
        "width-025": "0.0625rem",
        "width-050": "0.125rem",
        "width-100": "0.25rem",
        "width-150": "0.375rem",
        "width-200": "0.5rem",
        "width-300": "0.75rem",
        "width-400": "1rem",
        "width-500": "1.25rem",
        "width-600": "1.5rem",
        "width-700": "1.75rem",
        "width-800": "2rem",
        "width-900": "2.25rem",
        "width-1000": "2.5rem",
        "width-1200": "3rem",
        "width-1600": "4rem",
        "width-2000": "5rem",
        "width-2400": "6rem",
        "width-2800": "7rem",
        "width-3200": "8rem"
      },
      "zIndex": {
        "z-index-0": "auto",
        "z-index-1": "100",
        "z-index-2": "400",
        "z-index-3": "510",
        "z-index-4": "512",
        "z-index-5": "513",
        "z-index-6": "514",
        "z-index-7": "515",
        "z-index-8": "516",
        "z-index-9": "517",
        "z-index-10": "518",
        "z-index-11": "519",
        "z-index-12": "520"
      }
    },
    "dark-experimental": {
      "border": {
        "border-radius-0": "0rem",
        "border-radius-050": "0.125rem",
        "border-radius-100": "0.25rem",
        "border-radius-150": "0.375rem",
        "border-radius-200": "0.5rem",
        "border-radius-300": "0.75rem",
        "border-radius-400": "1rem",
        "border-radius-500": "1.25rem",
        "border-radius-750": "1.875rem",
        "border-radius-full": "624.9375rem",
        "border-width-0": "0rem",
        "border-width-0165": "0.04125rem",
        "border-width-025": "0.0625rem",
        "border-width-050": "0.125rem",
        "border-width-100": "0.25rem"
      },
      "breakpoints": {
        "breakpoints-xs": "0rem",
        "breakpoints-sm": "30.625rem",
        "breakpoints-md": "48rem",
        "breakpoints-lg": "65rem",
        "breakpoints-xl": "90rem"
      },
      "color": {
        "color-scheme": "dark",
        "color-bg": "rgba(26, 26, 26, 1)",
        "color-bg-inverse": "rgba(26, 26, 26, 1)",
        "color-bg-surface": "rgba(48, 48, 48, 1)",
        "color-bg-surface-hover": "rgba(74, 74, 74, 1)",
        "color-bg-surface-active": "rgba(97, 97, 97, 1)",
        "color-bg-surface-selected": "rgba(97, 97, 97, 1)",
        "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-surface-secondary": "rgba(247, 247, 247, 1)",
        "color-bg-surface-secondary-hover": "rgba(255, 255, 255, 0.06)",
        "color-bg-surface-secondary-active": "rgba(255, 255, 255, 0.14)",
        "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary": "rgba(255, 255, 255, 0.08)",
        "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
        "color-bg-surface-brand-selected": "rgba(74, 74, 74, 1)",
        "color-bg-surface-info": "rgba(234, 244, 255, 1)",
        "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
        "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
        "color-bg-surface-success": "rgba(205, 254, 212, 1)",
        "color-bg-surface-success-hover": "rgba(175, 254, 191, 1)",
        "color-bg-surface-success-active": "rgba(146, 252, 172, 1)",
        "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
        "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
        "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
        "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
        "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
        "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
        "color-bg-surface-critical": "rgba(254, 232, 235, 1)",
        "color-bg-surface-critical-hover": "rgba(254, 225, 230, 1)",
        "color-bg-surface-critical-active": "rgba(254, 217, 223, 1)",
        "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
        "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
        "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
        "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
        "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
        "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
        "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
        "color-bg-fill": "rgba(48, 48, 48, 1)",
        "color-bg-fill-hover": "rgba(255, 255, 255, 0.05)",
        "color-bg-fill-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-selected": "rgba(97, 97, 97, 1)",
        "color-bg-fill-disabled": "rgba(255, 255, 255, 0.05)",
        "color-bg-fill-secondary": "rgba(255, 255, 255, 0.08)",
        "color-bg-fill-secondary-hover": "rgba(255, 255, 255, 0.11)",
        "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
        "color-bg-fill-secondary-selected": "rgba(255, 255, 255, 0.17)",
        "color-bg-fill-tertiary": "rgba(48, 48, 48, 1)",
        "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
        "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
        "color-bg-fill-brand": "rgba(255, 255, 255, 1)",
        "color-bg-fill-brand-hover": "rgba(243, 243, 243, 1)",
        "color-bg-fill-brand-active": "rgba(247, 247, 247, 1)",
        "color-bg-fill-brand-selected": "rgba(212, 212, 212, 1)",
        "color-bg-fill-brand-disabled": "rgba(255, 255, 255, 0.22)",
        "color-bg-fill-info": "rgba(145, 208, 255, 1)",
        "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
        "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
        "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
        "color-bg-fill-success": "rgba(4, 123, 93, 1)",
        "color-bg-fill-success-hover": "rgba(3, 94, 76, 1)",
        "color-bg-fill-success-active": "rgba(1, 75, 64, 1)",
        "color-bg-fill-success-secondary": "rgba(175, 254, 191, 1)",
        "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
        "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
        "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
        "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
        "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
        "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
        "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
        "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
        "color-bg-fill-critical": "rgba(199, 10, 36, 1)",
        "color-bg-fill-critical-hover": "rgba(163, 10, 36, 1)",
        "color-bg-fill-critical-active": "rgba(142, 11, 33, 1)",
        "color-bg-fill-critical-selected": "rgba(142, 11, 33, 1)",
        "color-bg-fill-critical-secondary": "rgba(254, 209, 215, 1)",
        "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
        "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
        "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
        "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
        "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
        "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
        "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-transparent": "rgba(255, 255, 255, 0.11)",
        "color-bg-fill-transparent-hover": "rgba(255, 255, 255, 0.14)",
        "color-bg-fill-transparent-active": "rgba(255, 255, 255, 0.17)",
        "color-bg-fill-transparent-selected": "rgba(255, 255, 255, 0.22)",
        "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
        "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
        "color-text": "rgba(227, 227, 227, 1)",
        "color-text-secondary": "rgba(181, 181, 181, 1)",
        "color-text-disabled": "rgba(74, 74, 74, 1)",
        "color-text-link": "rgba(0, 91, 211, 1)",
        "color-text-link-hover": "rgba(0, 66, 153, 1)",
        "color-text-link-active": "rgba(0, 46, 106, 1)",
        "color-text-brand": "rgba(74, 74, 74, 1)",
        "color-text-brand-hover": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
        "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
        "color-text-brand-on-bg-fill-disabled": "rgba(138, 138, 138, 1)",
        "color-text-info": "rgba(0, 58, 90, 1)",
        "color-text-info-hover": "rgba(0, 58, 90, 1)",
        "color-text-info-active": "rgba(0, 33, 51, 1)",
        "color-text-info-secondary": "rgba(0, 124, 180, 1)",
        "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-text-success": "rgba(1, 75, 64, 1)",
        "color-text-success-hover": "rgba(7, 54, 48, 1)",
        "color-text-success-active": "rgba(2, 38, 34, 1)",
        "color-text-success-secondary": "rgba(4, 123, 93, 1)",
        "color-text-success-on-bg-fill": "rgba(250, 255, 251, 1)",
        "color-text-caution": "rgba(79, 71, 0, 1)",
        "color-text-caution-hover": "rgba(51, 46, 0, 1)",
        "color-text-caution-active": "rgba(31, 28, 0, 1)",
        "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
        "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
        "color-text-warning": "rgba(94, 66, 0, 1)",
        "color-text-warning-hover": "rgba(65, 45, 0, 1)",
        "color-text-warning-active": "rgba(37, 26, 0, 1)",
        "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
        "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
        "color-text-critical": "rgba(142, 11, 33, 1)",
        "color-text-critical-hover": "rgba(95, 7, 22, 1)",
        "color-text-critical-active": "rgba(47, 4, 11, 1)",
        "color-text-critical-secondary": "rgba(199, 10, 36, 1)",
        "color-text-critical-on-bg-fill": "rgba(255, 250, 251, 1)",
        "color-text-emphasis": "rgba(0, 91, 211, 1)",
        "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
        "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
        "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
        "color-text-magic": "rgba(87, 0, 209, 1)",
        "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
        "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
        "color-text-inverse": "rgba(227, 227, 227, 1)",
        "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
        "color-text-link-inverse": "rgba(197, 208, 255, 1)",
        "color-border": "rgba(227, 227, 227, 1)",
        "color-border-hover": "rgba(204, 204, 204, 1)",
        "color-border-disabled": "rgba(235, 235, 235, 1)",
        "color-border-secondary": "rgba(74, 74, 74, 1)",
        "color-border-tertiary": "rgba(204, 204, 204, 1)",
        "color-border-focus": "rgba(0, 91, 211, 1)",
        "color-border-brand": "rgba(227, 227, 227, 1)",
        "color-border-info": "rgba(168, 216, 255, 1)",
        "color-border-success": "rgba(146, 252, 172, 1)",
        "color-border-caution": "rgba(255, 235, 120, 1)",
        "color-border-warning": "rgba(255, 200, 121, 1)",
        "color-border-critical": "rgba(254, 193, 199, 1)",
        "color-border-critical-secondary": "rgba(142, 11, 33, 1)",
        "color-border-emphasis": "rgba(0, 91, 211, 1)",
        "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-border-magic": "rgba(228, 222, 255, 1)",
        "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
        "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
        "color-border-inverse": "rgba(97, 97, 97, 1)",
        "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
        "color-border-inverse-active": "rgba(227, 227, 227, 1)",
        "color-tooltip-tail-down-border": "rgba(60, 60, 60, 1)",
        "color-tooltip-tail-up-border": "rgba(71, 71, 71, 1)",
        "color-icon": "rgba(227, 227, 227, 1)",
        "color-icon-hover": "rgba(48, 48, 48, 1)",
        "color-icon-active": "rgba(26, 26, 26, 1)",
        "color-icon-disabled": "rgba(74, 74, 74, 1)",
        "color-icon-secondary": "rgba(181, 181, 181, 1)",
        "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
        "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
        "color-icon-brand": "rgba(74, 74, 74, 1)",
        "color-icon-info": "rgba(0, 148, 213, 1)",
        "color-icon-success": "rgba(4, 123, 93, 1)",
        "color-icon-caution": "rgba(153, 138, 0, 1)",
        "color-icon-warning": "rgba(178, 132, 0, 1)",
        "color-icon-critical": "rgba(226, 44, 56, 1)",
        "color-icon-emphasis": "rgba(0, 91, 211, 1)",
        "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-icon-magic": "rgba(128, 81, 255, 1)",
        "color-icon-inverse": "rgba(227, 227, 227, 1)",
        "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
        "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
        "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
        "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
        "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
        "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
        "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
        "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
        "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
        "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
        "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
        "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
        "color-avatar-two-bg-fill": "rgba(82, 244, 144, 1)",
        "color-avatar-two-text-on-bg-fill": "rgba(1, 75, 64, 1)",
        "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
        "color-button-gradient-bg-fill": "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)",
        "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-input-bg-surface": "rgba(253, 253, 253, 1)",
        "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
        "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
        "color-input-border": "rgba(138, 138, 138, 1)",
        "color-input-border-hover": "rgba(97, 97, 97, 1)",
        "color-input-border-active": "rgba(26, 26, 26, 1)",
        "color-nav-bg": "rgba(235, 235, 235, 1)",
        "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
        "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
        "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
        "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
        "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
        "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
        "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)",
        "color-scrollbar-thumb-bg": "rgba(181, 181, 181, 1)"
      },
      "font": {
        "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
        "font-size-275": "0.6875rem",
        "font-size-300": "0.75rem",
        "font-size-325": "0.8125rem",
        "font-size-350": "0.875rem",
        "font-size-400": "1rem",
        "font-size-450": "1.125rem",
        "font-size-500": "1.25rem",
        "font-size-550": "1.375rem",
        "font-size-600": "1.5rem",
        "font-size-750": "1.875rem",
        "font-size-800": "2rem",
        "font-size-900": "2.25rem",
        "font-size-1000": "2.5rem",
        "font-weight-regular": "450",
        "font-weight-medium": "550",
        "font-weight-semibold": "650",
        "font-weight-bold": "700",
        "font-letter-spacing-densest": "-0.03375rem",
        "font-letter-spacing-denser": "-0.01875rem",
        "font-letter-spacing-dense": "-0.0125rem",
        "font-letter-spacing-normal": "0rem",
        "font-line-height-300": "0.75rem",
        "font-line-height-400": "1rem",
        "font-line-height-500": "1.25rem",
        "font-line-height-600": "1.5rem",
        "font-line-height-700": "1.75rem",
        "font-line-height-800": "2rem",
        "font-line-height-1000": "2.5rem",
        "font-line-height-1200": "3rem"
      },
      "height": {
        "height-0": "0rem",
        "height-025": "0.0625rem",
        "height-050": "0.125rem",
        "height-100": "0.25rem",
        "height-150": "0.375rem",
        "height-200": "0.5rem",
        "height-300": "0.75rem",
        "height-400": "1rem",
        "height-500": "1.25rem",
        "height-600": "1.5rem",
        "height-700": "1.75rem",
        "height-800": "2rem",
        "height-900": "2.25rem",
        "height-1000": "2.5rem",
        "height-1200": "3rem",
        "height-1600": "4rem",
        "height-2000": "5rem",
        "height-2400": "6rem",
        "height-2800": "7rem",
        "height-3200": "8rem"
      },
      "motion": {
        "motion-duration-0": "0ms",
        "motion-duration-50": "50ms",
        "motion-duration-100": "100ms",
        "motion-duration-150": "150ms",
        "motion-duration-200": "200ms",
        "motion-duration-250": "250ms",
        "motion-duration-300": "300ms",
        "motion-duration-350": "350ms",
        "motion-duration-400": "400ms",
        "motion-duration-450": "450ms",
        "motion-duration-500": "500ms",
        "motion-duration-5000": "5000ms",
        "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
        "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
        "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
        "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
        "motion-linear": "cubic-bezier(0, 0, 1, 1)",
        "motion-keyframes-bounce": "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
        "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
        "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
        "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
        "motion-keyframes-appear-above": "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
        "motion-keyframes-appear-below": "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }"
      },
      "shadow": {
        "shadow-0": "none",
        "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
        "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
        "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
        "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
        "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
        "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
        "shadow-bevel-100": "0.0625rem 0rem 0rem 0rem rgba(204, 204, 204, 0.08) inset, -0.0625rem 0rem 0rem 0rem rgba(204, 204, 204, 0.08) inset, 0rem -0.0625rem 0rem 0rem rgba(204, 204, 204, 0.08) inset, 0rem 0.0625rem 0rem 0rem rgba(204, 204, 204, 0.16) inset",
        "shadow-inset-100": "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
        "shadow-inset-200": "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
        "shadow-button": "0rem -0.0625rem 0rem 0rem #b5b5b5 inset, 0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.1) inset, 0rem 0.03125rem 0rem 0.09375rem #FFF inset",
        "shadow-button-hover": "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
        "shadow-button-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.2) inset",
        "shadow-button-primary": "0rem -0.0625rem 0rem 0.0625rem rgba(0, 0, 0, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(48, 48, 48, 1) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.25) inset;",
        "shadow-button-primary-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
        "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem rgb(0, 0, 0) inset",
        "shadow-button-primary-critical": "0rem -0.0625rem 0rem 0.0625rem rgba(142, 31, 11, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(181, 38, 11, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.349) inset",
        "shadow-button-primary-critical-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-critical-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-button-primary-success": "0rem -0.0625rem 0rem 0.0625rem rgba(12, 81, 50, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(19, 111, 69, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.251) inset",
        "shadow-button-primary-success-hover": "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-success-inset": "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset"
      },
      "space": {
        "space-0": "0rem",
        "space-025": "0.0625rem",
        "space-050": "0.125rem",
        "space-100": "0.25rem",
        "space-150": "0.375rem",
        "space-200": "0.5rem",
        "space-300": "0.75rem",
        "space-400": "1rem",
        "space-500": "1.25rem",
        "space-600": "1.5rem",
        "space-800": "2rem",
        "space-1000": "2.5rem",
        "space-1200": "3rem",
        "space-1600": "4rem",
        "space-2000": "5rem",
        "space-2400": "6rem",
        "space-2800": "7rem",
        "space-3200": "8rem",
        "space-button-group-gap": "0.5rem",
        "space-card-gap": "1rem",
        "space-card-padding": "1rem",
        "space-table-cell-padding": "0.375rem"
      },
      "text": {
        "text-heading-3xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-3xl-font-size": "2.25rem",
        "text-heading-3xl-font-weight": "700",
        "text-heading-3xl-font-letter-spacing": "-0.03375rem",
        "text-heading-3xl-font-line-height": "3rem",
        "text-heading-2xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-2xl-font-size": "1.875rem",
        "text-heading-2xl-font-weight": "700",
        "text-heading-2xl-font-letter-spacing": "-0.01875rem",
        "text-heading-2xl-font-line-height": "2.5rem",
        "text-heading-xl-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xl-font-size": "1.5rem",
        "text-heading-xl-font-weight": "700",
        "text-heading-xl-font-letter-spacing": "-0.0125rem",
        "text-heading-xl-font-line-height": "2rem",
        "text-heading-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-lg-font-size": "1.25rem",
        "text-heading-lg-font-weight": "650",
        "text-heading-lg-font-letter-spacing": "-0.0125rem",
        "text-heading-lg-font-line-height": "1.5rem",
        "text-heading-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-md-font-size": "0.875rem",
        "text-heading-md-font-weight": "650",
        "text-heading-md-font-letter-spacing": "0rem",
        "text-heading-md-font-line-height": "1.25rem",
        "text-heading-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-sm-font-size": "0.8125rem",
        "text-heading-sm-font-weight": "650",
        "text-heading-sm-font-letter-spacing": "0rem",
        "text-heading-sm-font-line-height": "1.25rem",
        "text-heading-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xs-font-size": "0.75rem",
        "text-heading-xs-font-weight": "650",
        "text-heading-xs-font-letter-spacing": "0rem",
        "text-heading-xs-font-line-height": "1rem",
        "text-body-lg-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-lg-font-size": "0.875rem",
        "text-body-lg-font-weight": "450",
        "text-body-lg-font-letter-spacing": "0rem",
        "text-body-lg-font-line-height": "1.25rem",
        "text-body-md-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-md-font-size": "0.8125rem",
        "text-body-md-font-weight": "450",
        "text-body-md-font-letter-spacing": "0rem",
        "text-body-md-font-line-height": "1.25rem",
        "text-body-sm-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-sm-font-size": "0.75rem",
        "text-body-sm-font-weight": "450",
        "text-body-sm-font-letter-spacing": "0rem",
        "text-body-sm-font-line-height": "1rem",
        "text-body-xs-font-family": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-xs-font-size": "0.6875rem",
        "text-body-xs-font-weight": "450",
        "text-body-xs-font-letter-spacing": "0rem",
        "text-body-xs-font-line-height": "0.75rem"
      },
      "width": {
        "width-0": "0rem",
        "width-025": "0.0625rem",
        "width-050": "0.125rem",
        "width-100": "0.25rem",
        "width-150": "0.375rem",
        "width-200": "0.5rem",
        "width-300": "0.75rem",
        "width-400": "1rem",
        "width-500": "1.25rem",
        "width-600": "1.5rem",
        "width-700": "1.75rem",
        "width-800": "2rem",
        "width-900": "2.25rem",
        "width-1000": "2.5rem",
        "width-1200": "3rem",
        "width-1600": "4rem",
        "width-2000": "5rem",
        "width-2400": "6rem",
        "width-2800": "7rem",
        "width-3200": "8rem"
      },
      "zIndex": {
        "z-index-0": "auto",
        "z-index-1": "100",
        "z-index-2": "400",
        "z-index-3": "510",
        "z-index-4": "512",
        "z-index-5": "513",
        "z-index-6": "514",
        "z-index-7": "515",
        "z-index-8": "516",
        "z-index-9": "517",
        "z-index-10": "518",
        "z-index-11": "519",
        "z-index-12": "520"
      }
    }
  };
  var themeDefault = themes[themeNameDefault];
  var isTokenName = createIsTokenName(themes[themeNameDefault]);

  // node_modules/@shopify/polaris/build/esm/utilities/use-theme.js
  var import_react = __toESM(require_react());
  var ThemeContext = /* @__PURE__ */ (0, import_react.createContext)(null);
  var ThemeNameContext = /* @__PURE__ */ (0, import_react.createContext)(null);
  function getTheme(themeName) {
    return themes[themeName];
  }
  function useTheme() {
    const theme = (0, import_react.useContext)(ThemeContext);
    if (!theme) {
      throw new Error("No theme was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
    }
    return theme;
  }
  function useThemeName() {
    const themeName = (0, import_react.useContext)(ThemeNameContext);
    if (!themeName) {
      throw new Error("No themeName was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
    }
    return themeName;
  }

  // node_modules/@shopify/polaris/build/esm/utilities/is-object.js
  function isObject(value) {
    const type = typeof value;
    return value != null && (type === "object" || type === "function");
  }

  // node_modules/@shopify/polaris/build/esm/utilities/css.js
  function classNames(...classes) {
    return classes.filter(Boolean).join(" ");
  }
  function variationName(name, value) {
    return `${name}${value.charAt(0).toUpperCase()}${value.slice(1)}`;
  }
  function sanitizeCustomProperties(styles54) {
    const nonNullValues = Object.entries(styles54).filter(([_, value]) => value != null);
    return nonNullValues.length ? Object.fromEntries(nonNullValues) : void 0;
  }
  function getResponsiveProps(componentName, componentProp, tokenSubgroup, responsiveProp) {
    if (!responsiveProp)
      return {};
    let result;
    if (!isObject(responsiveProp)) {
      result = {
        [breakpointsAliases[0]]: `var(--p-${tokenSubgroup}-${responsiveProp})`
      };
    } else {
      result = Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, aliasOrScale]) => [breakpointAlias, `var(--p-${tokenSubgroup}-${aliasOrScale})`]));
    }
    return Object.fromEntries(Object.entries(result).map(([breakpointAlias, value]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, value]));
  }
  function getResponsiveValue(componentName, componentProp, responsiveProp) {
    if (!responsiveProp)
      return {};
    if (!isObject(responsiveProp)) {
      return {
        [`--pc-${componentName}-${componentProp}-${breakpointsAliases[0]}`]: responsiveProp
      };
    }
    return Object.fromEntries(Object.entries(responsiveProp).map(([breakpointAlias, responsiveValue]) => [`--pc-${componentName}-${componentProp}-${breakpointAlias}`, responsiveValue]));
  }

  // node_modules/@shopify/polaris/build/esm/components/ThemeProvider/ThemeProvider.css.js
  var styles = {
    "themeContainer": "Polaris-ThemeProvider--themeContainer"
  };

  // node_modules/@shopify/polaris/build/esm/components/ThemeProvider/ThemeProvider.js
  var themeNamesLocal = ["light", "dark-experimental"];
  var isThemeNameLocal = (name) => themeNamesLocal.includes(name);
  function ThemeProvider(props) {
    const {
      as: ThemeContainer = "div",
      children,
      className,
      theme: themeName = themeNameDefault
    } = props;
    return /* @__PURE__ */ import_react2.default.createElement(ThemeNameContext.Provider, {
      value: themeName
    }, /* @__PURE__ */ import_react2.default.createElement(ThemeContext.Provider, {
      value: getTheme(themeName)
    }, /* @__PURE__ */ import_react2.default.createElement(ThemeContainer, {
      "data-portal-id": props["data-portal-id"],
      className: classNames(createThemeClassName(themeName), styles.themeContainer, className)
    }, children)));
  }

  // node_modules/@shopify/polaris/build/esm/utilities/clamp.js
  function clamp(number, min, max) {
    if (number < min)
      return min;
    if (number > max)
      return max;
    return number;
  }

  // node_modules/@shopify/polaris/build/esm/utilities/within-content-context.js
  var import_react3 = __toESM(require_react());
  var WithinContentContext = /* @__PURE__ */ (0, import_react3.createContext)(false);

  // node_modules/@shopify/polaris/build/esm/utilities/use-event-listener.js
  var import_react5 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/use-isomorphic-layout-effect.js
  var import_react4 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/target.js
  var isServer = typeof window === "undefined" || typeof document === "undefined";

  // node_modules/@shopify/polaris/build/esm/utilities/use-isomorphic-layout-effect.js
  var useIsomorphicLayoutEffect2 = isServer ? import_react4.useEffect : import_react4.useLayoutEffect;

  // node_modules/@shopify/polaris/build/esm/utilities/use-event-listener.js
  function useEventListener(eventName, handler, target, options) {
    const handlerRef = (0, import_react5.useRef)(handler);
    const optionsRef = (0, import_react5.useRef)(options);
    useIsomorphicLayoutEffect2(() => {
      handlerRef.current = handler;
    }, [handler]);
    useIsomorphicLayoutEffect2(() => {
      optionsRef.current = options;
    }, [options]);
    (0, import_react5.useEffect)(() => {
      if (!(typeof eventName === "string" && target !== null))
        return;
      let targetElement;
      if (typeof target === "undefined") {
        targetElement = window;
      } else if ("current" in target) {
        if (target.current === null)
          return;
        targetElement = target.current;
      } else {
        targetElement = target;
      }
      const eventOptions = optionsRef.current;
      const eventListener = (event) => handlerRef.current(event);
      targetElement.addEventListener(eventName, eventListener, eventOptions);
      return () => {
        targetElement.removeEventListener(eventName, eventListener, eventOptions);
      };
    }, [eventName, target]);
  }

  // node_modules/@shopify/polaris/build/esm/utilities/use-index-resource-state.js
  var import_react6 = __toESM(require_react());
  var SelectionType = /* @__PURE__ */ function(SelectionType3) {
    SelectionType3["All"] = "all";
    SelectionType3["Page"] = "page";
    SelectionType3["Multi"] = "multi";
    SelectionType3["Single"] = "single";
    SelectionType3["Range"] = "range";
    return SelectionType3;
  }({});
  function defaultResourceIDResolver(resource) {
    if ("id" in resource) {
      return resource.id;
    }
    throw new Error("Your resource does not directly contain an `id`. Pass a `resourceIDResolver` to `useIndexResourceState`");
  }
  function useIndexResourceState(resources, {
    selectedResources: initSelectedResources = [],
    allResourcesSelected: initAllResourcesSelected = false,
    resourceIDResolver = defaultResourceIDResolver,
    resourceFilter = void 0
  } = {
    selectedResources: [],
    allResourcesSelected: false,
    resourceIDResolver: defaultResourceIDResolver,
    resourceFilter: void 0
  }) {
    const [selectedResources, setSelectedResources] = (0, import_react6.useState)(initSelectedResources);
    const [allResourcesSelected, setAllResourcesSelected] = (0, import_react6.useState)(initAllResourcesSelected);
    const handleSelectionChange = (0, import_react6.useCallback)((selectionType, isSelecting, selection, _position) => {
      if (selectionType === SelectionType.All) {
        setAllResourcesSelected(isSelecting);
      } else if (allResourcesSelected) {
        setAllResourcesSelected(false);
      }
      switch (selectionType) {
        case SelectionType.Single:
          setSelectedResources((newSelectedResources) => isSelecting ? [...newSelectedResources, selection] : newSelectedResources.filter((id) => id !== selection));
          break;
        case SelectionType.All:
        case SelectionType.Page:
          if (resourceFilter) {
            const filteredResources = resources.filter(resourceFilter);
            setSelectedResources(isSelecting && selectedResources.length < filteredResources.length ? filteredResources.map(resourceIDResolver) : []);
          } else {
            setSelectedResources(isSelecting ? resources.map(resourceIDResolver) : []);
          }
          break;
        case SelectionType.Multi:
          if (!selection)
            break;
          setSelectedResources((currentSelectedResources) => {
            const ids = [];
            const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;
            for (let i = selection[0]; i <= selection[1]; i++) {
              if (filteredResources.includes(resources[i])) {
                const id = resourceIDResolver(resources[i]);
                if (isSelecting && !currentSelectedResources.includes(id) || !isSelecting && currentSelectedResources.includes(id)) {
                  ids.push(id);
                }
              }
            }
            return isSelecting ? [...currentSelectedResources, ...ids] : currentSelectedResources.filter((id) => !ids.includes(id));
          });
          break;
        case SelectionType.Range:
          if (!selection)
            break;
          setSelectedResources((currentSelectedResources) => {
            const filteredResources = resourceFilter ? resources.filter(resourceFilter) : resources;
            const resourceIds = filteredResources.map(resourceIDResolver);
            const selectedIds = resourceIds.slice(Number(selection[0]), Number(selection[1]) + 1);
            const isIndeterminate = selectedIds.some((id) => {
              return selectedResources.includes(id);
            });
            const isChecked = selectedIds.every((id) => {
              return selectedResources.includes(id);
            });
            const isSelectingAllInRange = !isChecked && (isSelecting || isIndeterminate);
            const nextSelectedResources = isSelectingAllInRange ? [...(/* @__PURE__ */ new Set([...currentSelectedResources, ...selectedIds])).values()] : currentSelectedResources.filter((id) => !selectedIds.includes(id));
            return nextSelectedResources;
          });
          break;
      }
    }, [allResourcesSelected, resourceFilter, selectedResources, resources, resourceIDResolver]);
    const clearSelection = (0, import_react6.useCallback)(() => {
      setSelectedResources([]);
      setAllResourcesSelected(false);
    }, []);
    const removeSelectedResources = (0, import_react6.useCallback)((removeResources) => {
      const selectedResourcesCopy = [...selectedResources];
      const newSelectedResources = selectedResourcesCopy.filter((resource) => !removeResources.includes(resource));
      setSelectedResources(newSelectedResources);
      if (newSelectedResources.length === 0) {
        setAllResourcesSelected(false);
      }
    }, [selectedResources]);
    return {
      selectedResources,
      allResourcesSelected,
      handleSelectionChange,
      clearSelection,
      removeSelectedResources
    };
  }

  // node_modules/@shopify/polaris/build/esm/utilities/breakpoints.js
  var import_react7 = __toESM(require_react());
  var Breakpoints = {
    // TODO: Update to smDown
    navigationBarCollapsed: "767.95px",
    // TODO: Update to lgDown
    stackedContent: "1039.95px"
  };
  var noWindowMatches = {
    media: "",
    addListener: noop,
    removeListener: noop,
    matches: false,
    onchange: noop,
    addEventListener: noop,
    removeEventListener: noop,
    dispatchEvent: (_) => true
  };
  function noop() {
  }
  function navigationBarCollapsed() {
    return isServer ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.navigationBarCollapsed})`);
  }
  function stackedContent() {
    return isServer ? noWindowMatches : window.matchMedia(`(max-width: ${Breakpoints.stackedContent})`);
  }
  var hookCallbacks = /* @__PURE__ */ new Set();
  var breakpointsQueryEntries = getBreakpointsQueryEntries(themeDefault.breakpoints);
  if (!isServer) {
    breakpointsQueryEntries.forEach(([breakpointAlias, query]) => {
      const eventListener = (event) => {
        for (const hookCallback of hookCallbacks) {
          hookCallback(breakpointAlias, event.matches);
        }
      };
      const mql = window.matchMedia(query);
      if (mql.addListener) {
        mql.addListener(eventListener);
      } else {
        mql.addEventListener("change", eventListener);
      }
    });
  }
  function getDefaultMatches(defaults2) {
    return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias]) => [directionAlias, typeof defaults2 === "boolean" ? defaults2 : defaults2?.[directionAlias] ?? false]));
  }
  function getLiveMatches() {
    return Object.fromEntries(breakpointsQueryEntries.map(([directionAlias, query]) => [directionAlias, window.matchMedia(query).matches]));
  }
  function useBreakpoints(options) {
    const [breakpoints, setBreakpoints] = (0, import_react7.useState)(getDefaultMatches(options?.defaults));
    useIsomorphicLayoutEffect2(() => {
      setBreakpoints(getLiveMatches());
      const callback = (breakpointAlias, matches2) => {
        setBreakpoints((prevBreakpoints) => ({
          ...prevBreakpoints,
          [breakpointAlias]: matches2
        }));
      };
      hookCallbacks.add(callback);
      return () => {
        hookCallbacks.delete(callback);
      };
    }, []);
    return breakpoints;
  }
  function getBreakpointsQueryEntries(breakpoints) {
    const mediaConditionEntries = Object.entries(getMediaConditions(breakpoints));
    return mediaConditionEntries.map(([breakpointsToken, mediaConditions]) => Object.entries(mediaConditions).map(([direction, mediaCondition]) => {
      const breakpointsAlias = breakpointsToken.split("-")[1];
      const directionAlias = `${breakpointsAlias}${capitalize2(direction)}`;
      return [directionAlias, mediaCondition];
    })).flat();
  }
  function capitalize2(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  // node_modules/@shopify/polaris/build/esm/components/AppProvider/AppProvider.js
  var import_react24 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/debounce.js
  function debounce(func, waitArg, options) {
    let lastArgs;
    let lastThis;
    let maxWait;
    let result;
    let timerId;
    let lastCallTime;
    let lastInvokeTime = 0;
    let leading = false;
    let maxing = false;
    let trailing = true;
    const useRAF = !waitArg && waitArg !== 0;
    if (typeof func !== "function") {
      throw new TypeError("Expected a function");
    }
    const wait = waitArg || 0;
    if (typeof options === "object") {
      leading = Boolean(options.leading);
      maxing = "maxWait" in options;
      maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : void 0;
      trailing = "trailing" in options ? Boolean(options.trailing) : trailing;
    }
    function invokeFunc(time) {
      const args = lastArgs;
      const thisArg = lastThis;
      lastArgs = void 0;
      lastThis = void 0;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }
    function startTimer(pendingFunc, wait2) {
      if (useRAF) {
        cancelAnimationFrame(timerId);
        return requestAnimationFrame(pendingFunc);
      }
      return setTimeout(pendingFunc, wait2);
    }
    function cancelTimer(id) {
      if (useRAF) {
        return cancelAnimationFrame(id);
      }
      clearTimeout(id);
    }
    function leadingEdge(time) {
      lastInvokeTime = time;
      timerId = startTimer(timerExpired, wait);
      return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
      const timeSinceLastCall = time - lastCallTime;
      const timeSinceLastInvoke = time - lastInvokeTime;
      const timeWaiting = wait - timeSinceLastCall;
      return maxing && maxWait ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
      const timeSinceLastCall = time - lastCallTime;
      const timeSinceLastInvoke = time - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && maxWait && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      const time = Date.now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      timerId = startTimer(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
      timerId = void 0;
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      if (timerId !== void 0) {
        cancelTimer(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = void 0;
    }
    function flush() {
      return timerId === void 0 ? result : trailingEdge(Date.now());
    }
    function pending() {
      return timerId !== void 0;
    }
    function debounced(...args) {
      const time = Date.now();
      const isInvoking = shouldInvoke(time);
      lastArgs = args;
      lastThis = this;
      lastCallTime = time;
      if (isInvoking) {
        if (timerId === void 0) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          timerId = startTimer(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === void 0) {
        timerId = startTimer(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    debounced.pending = pending;
    return debounced;
  }

  // node_modules/@shopify/polaris/build/esm/utilities/geometry.js
  var Rect = class _Rect {
    static get zero() {
      return new _Rect();
    }
    constructor({
      top = 0,
      left = 0,
      width = 0,
      height = 0
    } = {}) {
      this.top = top;
      this.left = left;
      this.width = width;
      this.height = height;
    }
    get center() {
      return {
        x: this.left + this.width / 2,
        y: this.top + this.height / 2
      };
    }
  };
  function getRectForNode(node) {
    try {
      const rect = node.getBoundingClientRect();
      return new Rect({
        top: rect.top,
        left: rect.left,
        width: rect.width,
        height: rect.height
      });
    } catch (_) {
      return new Rect({
        width: window.innerWidth,
        height: window.innerHeight
      });
    }
  }

  // node_modules/@shopify/polaris/build/esm/utilities/sticky-manager/sticky-manager.js
  var SIXTY_FPS = 1e3 / 60;
  var StickyManager = class {
    constructor(container) {
      this.stickyItems = [];
      this.stuckItems = [];
      this.container = null;
      this.topBarOffset = 0;
      this.handleResize = debounce(() => {
        this.manageStickyItems();
      }, SIXTY_FPS, {
        leading: true,
        trailing: true,
        maxWait: SIXTY_FPS
      });
      this.handleScroll = debounce(() => {
        this.manageStickyItems();
      }, SIXTY_FPS, {
        leading: true,
        trailing: true,
        maxWait: SIXTY_FPS
      });
      if (container) {
        this.setContainer(container);
      }
    }
    registerStickyItem(stickyItem) {
      this.stickyItems.push(stickyItem);
    }
    unregisterStickyItem(nodeToRemove) {
      const nodeIndex = this.stickyItems.findIndex(({
        stickyNode
      }) => nodeToRemove === stickyNode);
      this.stickyItems.splice(nodeIndex, 1);
    }
    getStickyItem(node) {
      return this.stickyItems.find(({
        stickyNode
      }) => node === stickyNode);
    }
    setContainer(el) {
      this.container = el;
      if (isDocument(el)) {
        this.setTopBarOffset(el);
      }
      this.container.addEventListener("scroll", this.handleScroll);
      window.addEventListener("resize", this.handleResize);
      this.manageStickyItems();
    }
    removeScrollListener() {
      if (this.container) {
        this.container.removeEventListener("scroll", this.handleScroll);
        window.removeEventListener("resize", this.handleResize);
      }
    }
    manageStickyItems() {
      if (this.stickyItems.length <= 0) {
        return;
      }
      const scrollTop = this.container ? scrollTopFor(this.container) : 0;
      const containerTop = getRectForNode(this.container).top + this.topBarOffset;
      this.stickyItems.forEach((stickyItem) => {
        const {
          handlePositioning
        } = stickyItem;
        const {
          sticky,
          top,
          left,
          width
        } = this.evaluateStickyItem(stickyItem, scrollTop, containerTop);
        this.updateStuckItems(stickyItem, sticky);
        handlePositioning(sticky, top, left, width);
      });
    }
    evaluateStickyItem(stickyItem, scrollTop, containerTop) {
      const {
        stickyNode,
        placeHolderNode,
        boundingElement,
        offset,
        disableWhenStacked
      } = stickyItem;
      if (disableWhenStacked && stackedContent().matches) {
        return {
          sticky: false,
          top: 0,
          left: 0,
          width: "auto"
        };
      }
      const stickyOffset = offset ? this.getOffset(stickyNode) + parseInt(
        // Important: This will not update when the active theme changes.
        // Update this to `useTheme` once converted to a function component.
        themeDefault.space["space-500"],
        10
      ) : this.getOffset(stickyNode);
      const scrollPosition2 = scrollTop + stickyOffset;
      const placeHolderNodeCurrentTop = placeHolderNode.getBoundingClientRect().top - containerTop + scrollTop;
      const top = containerTop + stickyOffset;
      const width = placeHolderNode.getBoundingClientRect().width;
      const left = placeHolderNode.getBoundingClientRect().left;
      let sticky;
      if (boundingElement == null) {
        sticky = scrollPosition2 >= placeHolderNodeCurrentTop;
      } else {
        const stickyItemHeight = stickyNode.getBoundingClientRect().height || stickyNode.firstElementChild?.getBoundingClientRect().height || 0;
        const stickyItemBottomPosition = boundingElement.getBoundingClientRect().bottom - stickyItemHeight + scrollTop - containerTop;
        sticky = scrollPosition2 >= placeHolderNodeCurrentTop && scrollPosition2 < stickyItemBottomPosition;
      }
      return {
        sticky,
        top,
        left,
        width
      };
    }
    updateStuckItems(item, sticky) {
      const {
        stickyNode
      } = item;
      if (sticky && !this.isNodeStuck(stickyNode)) {
        this.addStuckItem(item);
      } else if (!sticky && this.isNodeStuck(stickyNode)) {
        this.removeStuckItem(item);
      }
    }
    addStuckItem(stickyItem) {
      this.stuckItems.push(stickyItem);
    }
    removeStuckItem(stickyItem) {
      const {
        stickyNode: nodeToRemove
      } = stickyItem;
      const nodeIndex = this.stuckItems.findIndex(({
        stickyNode
      }) => nodeToRemove === stickyNode);
      this.stuckItems.splice(nodeIndex, 1);
    }
    getOffset(node) {
      if (this.stuckItems.length === 0) {
        return 0;
      }
      let offset = 0;
      let count = 0;
      const stuckNodesLength = this.stuckItems.length;
      const nodeRect = getRectForNode(node);
      while (count < stuckNodesLength) {
        const stuckNode = this.stuckItems[count].stickyNode;
        if (stuckNode !== node) {
          const stuckNodeRect = getRectForNode(stuckNode);
          if (!horizontallyOverlaps(nodeRect, stuckNodeRect)) {
            offset += getRectForNode(stuckNode).height;
          }
        } else {
          break;
        }
        count++;
      }
      return offset;
    }
    isNodeStuck(node) {
      const nodeFound = this.stuckItems.findIndex(({
        stickyNode
      }) => node === stickyNode);
      return nodeFound >= 0;
    }
    setTopBarOffset(container) {
      const topbarElement = container.querySelector(`:not(${scrollable.selector}) ${dataPolarisTopBar.selector}`);
      this.topBarOffset = topbarElement ? topbarElement.clientHeight : 0;
    }
  };
  function isDocument(node) {
    return node === document;
  }
  function scrollTopFor(container) {
    return isDocument(container) ? document.body.scrollTop || document.documentElement.scrollTop : container.scrollTop;
  }
  function horizontallyOverlaps(rect1, rect2) {
    const rect1Left = rect1.left;
    const rect1Right = rect1.left + rect1.width;
    const rect2Left = rect2.left;
    const rect2Right = rect2.left + rect2.width;
    return rect2Right < rect1Left || rect1Right < rect2Left;
  }

  // node_modules/@shopify/polaris/build/esm/utilities/scroll-lock-manager/scroll-lock-manager.js
  var SCROLL_LOCKING_ATTRIBUTE = "data-lock-scrolling";
  var SCROLL_LOCKING_HIDDEN_ATTRIBUTE = "data-lock-scrolling-hidden";
  var SCROLL_LOCKING_WRAPPER_ATTRIBUTE = "data-lock-scrolling-wrapper";
  var scrollPosition = 0;
  function isScrollBarVisible() {
    const {
      body
    } = document;
    return body.scrollHeight > body.clientHeight;
  }
  var ScrollLockManager = class {
    constructor() {
      this.scrollLocks = 0;
      this.locked = false;
    }
    registerScrollLock() {
      this.scrollLocks += 1;
      this.handleScrollLocking();
    }
    unregisterScrollLock() {
      this.scrollLocks -= 1;
      this.handleScrollLocking();
    }
    handleScrollLocking() {
      if (isServer)
        return;
      const {
        scrollLocks
      } = this;
      const {
        body
      } = document;
      const wrapper = body.firstElementChild;
      if (scrollLocks === 0) {
        body.removeAttribute(SCROLL_LOCKING_ATTRIBUTE);
        body.removeAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE);
        if (wrapper) {
          wrapper.removeAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE);
        }
        window.scroll(0, scrollPosition);
        this.locked = false;
      } else if (scrollLocks > 0 && !this.locked) {
        scrollPosition = window.pageYOffset;
        body.setAttribute(SCROLL_LOCKING_ATTRIBUTE, "");
        if (!isScrollBarVisible()) {
          body.setAttribute(SCROLL_LOCKING_HIDDEN_ATTRIBUTE, "");
        }
        if (wrapper) {
          wrapper.setAttribute(SCROLL_LOCKING_WRAPPER_ATTRIBUTE, "");
          wrapper.scrollTop = scrollPosition;
        }
        this.locked = true;
      }
    }
    resetScrollPosition() {
      scrollPosition = 0;
    }
  };

  // node_modules/@shopify/polaris/build/esm/utilities/get.js
  var OBJECT_NOTATION_MATCHER = /\[(.*?)\]|(\w+)/g;
  function get(obj, keypath, defaultValue) {
    if (obj == null)
      return void 0;
    const keys = Array.isArray(keypath) ? keypath : getKeypath(keypath);
    let acc = obj;
    for (let i = 0; i < keys.length; i++) {
      const val = acc[keys[i]];
      if (val === void 0)
        return defaultValue;
      acc = val;
    }
    return acc;
  }
  function getKeypath(str) {
    const path = [];
    let result;
    while (result = OBJECT_NOTATION_MATCHER.exec(str)) {
      const [, first, second] = result;
      path.push(first || second);
    }
    return path;
  }

  // node_modules/@shopify/polaris/build/esm/utilities/merge.js
  function merge(...objs) {
    let final = {};
    for (const obj of objs) {
      final = mergeRecursively(final, obj);
    }
    return final;
  }
  function mergeRecursively(inputObjA, objB) {
    const objA = Array.isArray(inputObjA) ? [...inputObjA] : {
      ...inputObjA
    };
    for (const key in objB) {
      if (!Object.prototype.hasOwnProperty.call(objB, key)) {
        continue;
      } else if (isMergeableValue(objB[key]) && isMergeableValue(objA[key])) {
        objA[key] = mergeRecursively(objA[key], objB[key]);
      } else {
        objA[key] = objB[key];
      }
    }
    return objA;
  }
  function isMergeableValue(value) {
    return value !== null && typeof value === "object";
  }

  // node_modules/@shopify/polaris/build/esm/utilities/i18n/I18n.js
  var REPLACE_REGEX = /{([^}]*)}/g;
  var I18n = class {
    /**
     * @param translation A locale object or array of locale objects that overrides default translations. If specifying an array then your desired language dictionary should come first, followed by your fallback language dictionaries
     */
    constructor(translation) {
      this.translation = {};
      this.translation = Array.isArray(translation) ? merge(...translation.slice().reverse()) : translation;
    }
    translate(id, replacements) {
      const text = get(this.translation, id, "");
      if (!text) {
        return "";
      }
      if (replacements) {
        return text.replace(REPLACE_REGEX, (match) => {
          const replacement = match.substring(1, match.length - 1);
          if (replacements[replacement] === void 0) {
            const replacementData = JSON.stringify(replacements);
            throw new Error(`Error in translation for key '${id}'. No replacement found for key '${replacement}'. The following replacements were passed: '${replacementData}'`);
          }
          return replacements[replacement];
        });
      }
      return text;
    }
    translationKeyExists(path) {
      return Boolean(get(this.translation, path));
    }
  };

  // node_modules/@shopify/polaris/build/esm/utilities/features/context.js
  var import_react8 = __toESM(require_react());
  var FeaturesContext = /* @__PURE__ */ (0, import_react8.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/utilities/i18n/context.js
  var import_react9 = __toESM(require_react());
  var I18nContext = /* @__PURE__ */ (0, import_react9.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/utilities/scroll-lock-manager/context.js
  var import_react10 = __toESM(require_react());
  var ScrollLockManagerContext = /* @__PURE__ */ (0, import_react10.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/utilities/sticky-manager/context.js
  var import_react11 = __toESM(require_react());
  var StickyManagerContext = /* @__PURE__ */ (0, import_react11.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/utilities/link/context.js
  var import_react12 = __toESM(require_react());
  var LinkContext = /* @__PURE__ */ (0, import_react12.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/components/MediaQueryProvider/MediaQueryProvider.js
  var import_react15 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/media-query/context.js
  var import_react13 = __toESM(require_react());
  var MediaQueryContext = /* @__PURE__ */ (0, import_react13.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/components/EventListener/EventListener.js
  var import_react14 = __toESM(require_react());
  var EventListener2 = class extends import_react14.PureComponent {
    componentDidMount() {
      this.attachListener();
    }
    componentDidUpdate({
      passive,
      ...detachProps
    }) {
      this.detachListener(detachProps);
      this.attachListener();
    }
    componentWillUnmount() {
      this.detachListener();
    }
    render() {
      return null;
    }
    attachListener() {
      const {
        event,
        handler,
        capture,
        passive,
        window: customWindow
      } = this.props;
      const window2 = customWindow || globalThis.window;
      window2.addEventListener(event, handler, {
        capture,
        passive
      });
    }
    detachListener(prevProps) {
      const {
        event,
        handler,
        capture,
        window: customWindow
      } = prevProps || this.props;
      const window2 = customWindow || globalThis.window;
      window2.removeEventListener(event, handler, capture);
    }
  };

  // node_modules/@shopify/polaris/build/esm/components/MediaQueryProvider/MediaQueryProvider.js
  var MediaQueryProvider = function MediaQueryProvider2({
    children
  }) {
    const [isNavigationCollapsed, setIsNavigationCollapsed] = (0, import_react15.useState)(false);
    const handleResize = (0, import_react15.useCallback)(debounce(() => {
      if (isNavigationCollapsed !== navigationBarCollapsed().matches) {
        setIsNavigationCollapsed(!isNavigationCollapsed);
      }
    }, 40, {
      trailing: true,
      leading: true,
      maxWait: 40
    }), [isNavigationCollapsed]);
    (0, import_react15.useEffect)(() => {
      setIsNavigationCollapsed(navigationBarCollapsed().matches);
    }, []);
    const context = (0, import_react15.useMemo)(() => ({
      isNavigationCollapsed
    }), [isNavigationCollapsed]);
    return /* @__PURE__ */ import_react15.default.createElement(MediaQueryContext.Provider, {
      value: context
    }, /* @__PURE__ */ import_react15.default.createElement(EventListener2, {
      event: "resize",
      handler: handleResize
    }), children);
  };

  // node_modules/@shopify/polaris/build/esm/components/PortalsManager/PortalsManager.js
  var import_react19 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/use-is-after-initial-mount.js
  var import_react16 = __toESM(require_react());
  function useIsAfterInitialMount() {
    const [isAfterInitialMount, setIsAfterInitialMount] = (0, import_react16.useState)(false);
    (0, import_react16.useEffect)(() => {
      setIsAfterInitialMount(true);
    }, []);
    return isAfterInitialMount;
  }

  // node_modules/@shopify/polaris/build/esm/utilities/portals/context.js
  var import_react17 = __toESM(require_react());
  var PortalsManagerContext = /* @__PURE__ */ (0, import_react17.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/components/PortalsManager/components/PortalsContainer/PortalsContainer.js
  var import_react18 = __toESM(require_react());
  function PortalsContainerComponent(_props, ref) {
    return /* @__PURE__ */ import_react18.default.createElement("div", {
      id: "PolarisPortalsContainer",
      ref
    });
  }
  var PortalsContainer = /* @__PURE__ */ (0, import_react18.forwardRef)(PortalsContainerComponent);

  // node_modules/@shopify/polaris/build/esm/components/PortalsManager/PortalsManager.js
  function PortalsManager({
    children,
    container
  }) {
    const isMounted = useIsAfterInitialMount();
    const ref = (0, import_react19.useRef)(null);
    const contextValue = (0, import_react19.useMemo)(() => {
      if (container) {
        return {
          container
        };
      } else if (isMounted) {
        return {
          container: ref.current
        };
      } else {
        return {
          container: null
        };
      }
    }, [container, isMounted]);
    return /* @__PURE__ */ import_react19.default.createElement(PortalsManagerContext.Provider, {
      value: contextValue
    }, children, container ? null : /* @__PURE__ */ import_react19.default.createElement(PortalsContainer, {
      ref
    }));
  }

  // node_modules/@shopify/polaris/build/esm/components/FocusManager/FocusManager.js
  var import_react21 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/focus-manager/context.js
  var import_react20 = __toESM(require_react());
  var FocusManagerContext = /* @__PURE__ */ (0, import_react20.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/components/FocusManager/FocusManager.js
  function FocusManager({
    children
  }) {
    const [trapFocusList, setTrapFocusList] = (0, import_react21.useState)([]);
    const add2 = (0, import_react21.useCallback)((id) => {
      setTrapFocusList((list) => [...list, id]);
    }, []);
    const remove = (0, import_react21.useCallback)((id) => {
      let removed = true;
      setTrapFocusList((list) => {
        const clone = [...list];
        const index = clone.indexOf(id);
        if (index === -1) {
          removed = false;
        } else {
          clone.splice(index, 1);
        }
        return clone;
      });
      return removed;
    }, []);
    const value = (0, import_react21.useMemo)(() => ({
      trapFocusList,
      add: add2,
      remove
    }), [add2, trapFocusList, remove]);
    return /* @__PURE__ */ import_react21.default.createElement(FocusManagerContext.Provider, {
      value
    }, children);
  }

  // node_modules/@shopify/polaris/build/esm/components/EphemeralPresenceManager/EphemeralPresenceManager.js
  var import_react23 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/ephemeral-presence-manager/context.js
  var import_react22 = __toESM(require_react());
  var EphemeralPresenceManagerContext = /* @__PURE__ */ (0, import_react22.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/components/EphemeralPresenceManager/EphemeralPresenceManager.js
  var defaultState = {
    tooltip: 0,
    hovercard: 0
  };
  function EphemeralPresenceManager({
    children
  }) {
    const [presenceCounter, setPresenceCounter] = (0, import_react23.useState)(defaultState);
    const addPresence = (0, import_react23.useCallback)((key) => {
      setPresenceCounter((prevList) => ({
        ...prevList,
        [key]: prevList[key] + 1
      }));
    }, []);
    const removePresence = (0, import_react23.useCallback)((key) => {
      setPresenceCounter((prevList) => ({
        ...prevList,
        [key]: prevList[key] - 1
      }));
    }, []);
    const value = (0, import_react23.useMemo)(() => ({
      presenceList: Object.entries(presenceCounter).reduce((previousValue, currentValue) => {
        const [key, value2] = currentValue;
        return {
          ...previousValue,
          [key]: value2 >= 1
        };
      }, {}),
      presenceCounter,
      addPresence,
      removePresence
    }), [addPresence, removePresence, presenceCounter]);
    return /* @__PURE__ */ import_react23.default.createElement(EphemeralPresenceManagerContext.Provider, {
      value
    }, children);
  }

  // node_modules/@shopify/polaris/build/esm/components/AppProvider/AppProvider.js
  var MAX_SCROLLBAR_WIDTH = 20;
  var SCROLLBAR_TEST_ELEMENT_PARENT_SIZE = 30;
  var SCROLLBAR_TEST_ELEMENT_CHILD_SIZE = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE + 10;
  function measureScrollbars() {
    const parentEl = document.createElement("div");
    parentEl.setAttribute("style", `position: absolute; opacity: 0; transform: translate3d(-9999px, -9999px, 0); pointer-events: none; width:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px; height:${SCROLLBAR_TEST_ELEMENT_PARENT_SIZE}px;`);
    const child = document.createElement("div");
    child.setAttribute("style", `width:100%; height: ${SCROLLBAR_TEST_ELEMENT_CHILD_SIZE}; overflow:scroll; scrollbar-width: thin;`);
    parentEl.appendChild(child);
    document.body.appendChild(parentEl);
    const scrollbarWidth = SCROLLBAR_TEST_ELEMENT_PARENT_SIZE - (parentEl.firstElementChild?.clientWidth ?? 0);
    const scrollbarWidthWithSafetyHatch = Math.min(scrollbarWidth, MAX_SCROLLBAR_WIDTH);
    document.documentElement.style.setProperty("--pc-app-provider-scrollbar-width", `${scrollbarWidthWithSafetyHatch}px`);
    document.body.removeChild(parentEl);
  }
  var AppProvider = class extends import_react24.Component {
    constructor(props) {
      super(props);
      this.setBodyStyles = () => {
        document.body.style.backgroundColor = "var(--p-color-bg)";
        document.body.style.color = "var(--p-color-text)";
      };
      this.setRootAttributes = () => {
        const activeThemeName = this.getThemeName();
        themeNames.forEach((themeName) => {
          document.documentElement.classList.toggle(createThemeClassName(themeName), themeName === activeThemeName);
        });
      };
      this.getThemeName = () => this.props.theme ?? themeNameDefault;
      this.stickyManager = new StickyManager();
      this.scrollLockManager = new ScrollLockManager();
      const {
        i18n,
        linkComponent
      } = this.props;
      this.state = {
        link: linkComponent,
        intl: new I18n(i18n)
      };
    }
    componentDidMount() {
      if (document != null) {
        this.stickyManager.setContainer(document);
        this.setBodyStyles();
        this.setRootAttributes();
        const isSafari16 = navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome") && (navigator.userAgent.includes("Version/16.1") || navigator.userAgent.includes("Version/16.2") || navigator.userAgent.includes("Version/16.3"));
        const isMobileApp16 = navigator.userAgent.includes("Shopify Mobile/iOS") && (navigator.userAgent.includes("OS 16_1") || navigator.userAgent.includes("OS 16_2") || navigator.userAgent.includes("OS 16_3"));
        if (isSafari16 || isMobileApp16) {
          document.documentElement.classList.add("Polaris-Safari-16-Font-Optical-Sizing-Patch");
        }
      }
      measureScrollbars();
    }
    componentDidUpdate({
      i18n: prevI18n,
      linkComponent: prevLinkComponent
    }) {
      const {
        i18n,
        linkComponent
      } = this.props;
      this.setRootAttributes();
      if (i18n === prevI18n && linkComponent === prevLinkComponent) {
        return;
      }
      this.setState({
        link: linkComponent,
        intl: new I18n(i18n)
      });
    }
    render() {
      const {
        children,
        features = {}
      } = this.props;
      const themeName = this.getThemeName();
      const {
        intl,
        link
      } = this.state;
      return /* @__PURE__ */ import_react24.default.createElement(ThemeNameContext.Provider, {
        value: themeName
      }, /* @__PURE__ */ import_react24.default.createElement(ThemeContext.Provider, {
        value: getTheme(themeName)
      }, /* @__PURE__ */ import_react24.default.createElement(FeaturesContext.Provider, {
        value: features
      }, /* @__PURE__ */ import_react24.default.createElement(I18nContext.Provider, {
        value: intl
      }, /* @__PURE__ */ import_react24.default.createElement(ScrollLockManagerContext.Provider, {
        value: this.scrollLockManager
      }, /* @__PURE__ */ import_react24.default.createElement(StickyManagerContext.Provider, {
        value: this.stickyManager
      }, /* @__PURE__ */ import_react24.default.createElement(LinkContext.Provider, {
        value: link
      }, /* @__PURE__ */ import_react24.default.createElement(MediaQueryProvider, null, /* @__PURE__ */ import_react24.default.createElement(PortalsManager, null, /* @__PURE__ */ import_react24.default.createElement(FocusManager, null, /* @__PURE__ */ import_react24.default.createElement(EphemeralPresenceManager, null, children)))))))))));
    }
  };

  // node_modules/@shopify/polaris/build/esm/components/Button/utils.js
  var import_react59 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Button/Button.js
  var import_react58 = __toESM(require_react());

  // node_modules/@shopify/polaris-icons/dist/icons/AlertCircleIcon.svg.mjs
  var import_react25 = __toESM(require_react(), 1);
  var SvgAlertCircleIcon = function SvgAlertCircleIcon2(props) {
    return /* @__PURE__ */ import_react25.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react25.default.createElement("path", {
      d: "M10 6a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5a.75.75 0 0 1 .75-.75Z"
    }), /* @__PURE__ */ import_react25.default.createElement("path", {
      d: "M11 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"
    }), /* @__PURE__ */ import_react25.default.createElement("path", {
      fillRule: "evenodd",
      d: "M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0Zm-1.5 0a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0Z"
    }));
  };
  SvgAlertCircleIcon.displayName = "AlertCircleIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/ArrowDownIcon.svg.mjs
  var import_react26 = __toESM(require_react(), 1);
  var SvgArrowDownIcon = function SvgArrowDownIcon2(props) {
    return /* @__PURE__ */ import_react26.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react26.default.createElement("path", {
      fillRule: "evenodd",
      d: "M10 3.5a.75.75 0 0 1 .75.75v9.69l2.72-2.72a.75.75 0 0 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 0 1 1.06-1.06l2.72 2.72v-9.69a.75.75 0 0 1 .75-.75Z"
    }));
  };
  SvgArrowDownIcon.displayName = "ArrowDownIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/ArrowUpIcon.svg.mjs
  var import_react27 = __toESM(require_react(), 1);
  var SvgArrowUpIcon = function SvgArrowUpIcon2(props) {
    return /* @__PURE__ */ import_react27.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react27.default.createElement("path", {
      fillRule: "evenodd",
      d: "M10 16.5a.75.75 0 0 1-.75-.75v-9.69l-2.72 2.72a.75.75 0 1 1-1.06-1.06l4-4a.75.75 0 0 1 1.06 0l4 4a.75.75 0 1 1-1.06 1.06l-2.72-2.72v9.69a.75.75 0 0 1-.75.75Z"
    }));
  };
  SvgArrowUpIcon.displayName = "ArrowUpIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/ChevronDownIcon.svg.mjs
  var import_react28 = __toESM(require_react(), 1);
  var SvgChevronDownIcon = function SvgChevronDownIcon2(props) {
    return /* @__PURE__ */ import_react28.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react28.default.createElement("path", {
      fillRule: "evenodd",
      d: "M5.72 8.47a.75.75 0 0 1 1.06 0l3.47 3.47 3.47-3.47a.75.75 0 1 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 0 1 0-1.06Z"
    }));
  };
  SvgChevronDownIcon.displayName = "ChevronDownIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/ChevronLeftIcon.svg.mjs
  var import_react29 = __toESM(require_react(), 1);
  var SvgChevronLeftIcon = function SvgChevronLeftIcon2(props) {
    return /* @__PURE__ */ import_react29.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react29.default.createElement("path", {
      fillRule: "evenodd",
      d: "M11.764 5.204a.75.75 0 0 1 .032 1.06l-3.516 3.736 3.516 3.736a.75.75 0 1 1-1.092 1.028l-4-4.25a.75.75 0 0 1 0-1.028l4-4.25a.75.75 0 0 1 1.06-.032Z"
    }));
  };
  SvgChevronLeftIcon.displayName = "ChevronLeftIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/ChevronRightIcon.svg.mjs
  var import_react30 = __toESM(require_react(), 1);
  var SvgChevronRightIcon = function SvgChevronRightIcon2(props) {
    return /* @__PURE__ */ import_react30.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react30.default.createElement("path", {
      fillRule: "evenodd",
      d: "M7.72 14.53a.75.75 0 0 1 0-1.06l3.47-3.47-3.47-3.47a.75.75 0 0 1 1.06-1.06l4 4a.75.75 0 0 1 0 1.06l-4 4a.75.75 0 0 1-1.06 0Z"
    }));
  };
  SvgChevronRightIcon.displayName = "ChevronRightIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/ChevronUpIcon.svg.mjs
  var import_react31 = __toESM(require_react(), 1);
  var SvgChevronUpIcon = function SvgChevronUpIcon2(props) {
    return /* @__PURE__ */ import_react31.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react31.default.createElement("path", {
      fillRule: "evenodd",
      d: "M14.53 12.28a.75.75 0 0 1-1.06 0l-3.47-3.47-3.47 3.47a.75.75 0 0 1-1.06-1.06l4-4a.75.75 0 0 1 1.06 0l4 4a.75.75 0 0 1 0 1.06Z"
    }));
  };
  SvgChevronUpIcon.displayName = "ChevronUpIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/DeleteIcon.svg.mjs
  var import_react32 = __toESM(require_react(), 1);
  var SvgDeleteIcon = function SvgDeleteIcon2(props) {
    return /* @__PURE__ */ import_react32.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react32.default.createElement("path", {
      d: "M11.5 8.25a.75.75 0 0 1 .75.75v4.25a.75.75 0 0 1-1.5 0v-4.25a.75.75 0 0 1 .75-.75Z"
    }), /* @__PURE__ */ import_react32.default.createElement("path", {
      d: "M9.25 9a.75.75 0 0 0-1.5 0v4.25a.75.75 0 0 0 1.5 0v-4.25Z"
    }), /* @__PURE__ */ import_react32.default.createElement("path", {
      fillRule: "evenodd",
      d: "M7.25 5.25a2.75 2.75 0 0 1 5.5 0h3a.75.75 0 0 1 0 1.5h-.75v5.45c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311c-.642.327-1.482.327-3.162.327h-.4c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311c-.327-.642-.327-1.482-.327-3.162v-5.45h-.75a.75.75 0 0 1 0-1.5h3Zm1.5 0a1.25 1.25 0 1 1 2.5 0h-2.5Zm-2.25 1.5h7v5.45c0 .865-.001 1.423-.036 1.848-.033.408-.09.559-.128.633a1.5 1.5 0 0 1-.655.655c-.074.038-.225.095-.633.128-.425.035-.983.036-1.848.036h-.4c-.865 0-1.423-.001-1.848-.036-.408-.033-.559-.09-.633-.128a1.5 1.5 0 0 1-.656-.655c-.037-.074-.094-.225-.127-.633-.035-.425-.036-.983-.036-1.848v-5.45Z"
    }));
  };
  SvgDeleteIcon.displayName = "DeleteIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/DuplicateIcon.svg.mjs
  var import_react33 = __toESM(require_react(), 1);
  var SvgDuplicateIcon = function SvgDuplicateIcon2(props) {
    return /* @__PURE__ */ import_react33.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react33.default.createElement("path", {
      d: "M11.25 8.5c-.414 0-.75.336-.75.75v1.25h-1.25c-.414 0-.75.336-.75.75s.336.75.75.75h1.25v1.25c0 .414.336.75.75.75s.75-.336.75-.75v-1.25h1.25c.414 0 .75-.336.75-.75s-.336-.75-.75-.75h-1.25v-1.25c0-.414-.336-.75-.75-.75Z"
    }), /* @__PURE__ */ import_react33.default.createElement("path", {
      fillRule: "evenodd",
      d: "M8.75 16.5c-1.438 0-2.618-1.104-2.74-2.51-1.406-.122-2.51-1.302-2.51-2.74v-5c0-1.519 1.231-2.75 2.75-2.75h5c1.438 0 2.618 1.104 2.74 2.51 1.406.122 2.51 1.302 2.51 2.74v5c0 1.519-1.231 2.75-2.75 2.75h-5Zm0-10.5c-1.519 0-2.75 1.231-2.75 2.75v3.725c-.57-.116-1-.62-1-1.225v-5c0-.69.56-1.25 1.25-1.25h5c.605 0 1.11.43 1.225 1h-3.725Zm0 1.5c-.69 0-1.25.56-1.25 1.25v5c0 .69.56 1.25 1.25 1.25h5c.69 0 1.25-.56 1.25-1.25v-5c0-.69-.56-1.25-1.25-1.25h-5Z"
    }));
  };
  SvgDuplicateIcon.displayName = "DuplicateIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/EditIcon.svg.mjs
  var import_react34 = __toESM(require_react(), 1);
  var SvgEditIcon = function SvgEditIcon2(props) {
    return /* @__PURE__ */ import_react34.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react34.default.createElement("path", {
      fillRule: "evenodd",
      d: "M15.655 4.344a2.695 2.695 0 0 0-3.81 0l-.599.599-.009-.009-1.06 1.06.008.01-5.88 5.88a2.75 2.75 0 0 0-.805 1.944v1.922a.75.75 0 0 0 .75.75h1.922a2.75 2.75 0 0 0 1.944-.806l7.54-7.539a2.695 2.695 0 0 0 0-3.81Zm-4.409 2.72-5.88 5.88a1.25 1.25 0 0 0-.366.884v1.172h1.172c.331 0 .65-.132.883-.366l5.88-5.88-1.689-1.69Zm2.75.629.599-.599a1.195 1.195 0 1 0-1.69-1.689l-.598.599 1.69 1.689Z"
    }));
  };
  SvgEditIcon.displayName = "EditIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/FilterIcon.svg.mjs
  var import_react35 = __toESM(require_react(), 1);
  var SvgFilterIcon = function SvgFilterIcon2(props) {
    return /* @__PURE__ */ import_react35.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react35.default.createElement("path", {
      d: "M3 6a.75.75 0 0 1 .75-.75h12.5a.75.75 0 0 1 0 1.5h-12.5a.75.75 0 0 1-.75-.75Z"
    }), /* @__PURE__ */ import_react35.default.createElement("path", {
      d: "M6.75 14a.75.75 0 0 1 .75-.75h5a.75.75 0 0 1 0 1.5h-5a.75.75 0 0 1-.75-.75Z"
    }), /* @__PURE__ */ import_react35.default.createElement("path", {
      d: "M5.5 9.25a.75.75 0 0 0 0 1.5h9a.75.75 0 0 0 0-1.5h-9Z"
    }));
  };
  SvgFilterIcon.displayName = "FilterIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/InfoIcon.svg.mjs
  var import_react36 = __toESM(require_react(), 1);
  var SvgInfoIcon = function SvgInfoIcon2(props) {
    return /* @__PURE__ */ import_react36.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react36.default.createElement("path", {
      d: "M10 14a.75.75 0 0 1-.75-.75v-3.5a.75.75 0 0 1 1.5 0v3.5a.75.75 0 0 1-.75.75Z"
    }), /* @__PURE__ */ import_react36.default.createElement("path", {
      d: "M9 7a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z"
    }), /* @__PURE__ */ import_react36.default.createElement("path", {
      fillRule: "evenodd",
      d: "M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0Zm-1.5 0a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0Z"
    }));
  };
  SvgInfoIcon.displayName = "InfoIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/LayoutColumns3Icon.svg.mjs
  var import_react37 = __toESM(require_react(), 1);
  var SvgLayoutColumns3Icon = function SvgLayoutColumns3Icon2(props) {
    return /* @__PURE__ */ import_react37.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react37.default.createElement("path", {
      fillRule: "evenodd",
      d: "M3 6.75c0-2.071 1.679-3.75 3.75-3.75h6.5c2.071 0 3.75 1.679 3.75 3.75v6.5c0 2.071-1.679 3.75-3.75 3.75h-6.5c-2.071 0-3.75-1.679-3.75-3.75v-6.5Zm3.75-2.25c-1.243 0-2.25 1.007-2.25 2.25v6.5c0 1.243 1.007 2.25 2.25 2.25h.5v-11h-.5Zm4.5 11h-2.5v-11h2.5v11Zm1.5 0h.5c1.243 0 2.25-1.007 2.25-2.25v-6.5c0-1.243-1.007-2.25-2.25-2.25h-.5v11Z"
    }));
  };
  SvgLayoutColumns3Icon.displayName = "LayoutColumns3Icon";

  // node_modules/@shopify/polaris-icons/dist/icons/MenuHorizontalIcon.svg.mjs
  var import_react38 = __toESM(require_react(), 1);
  var SvgMenuHorizontalIcon = function SvgMenuHorizontalIcon2(props) {
    return /* @__PURE__ */ import_react38.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react38.default.createElement("path", {
      d: "M6 10a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"
    }), /* @__PURE__ */ import_react38.default.createElement("path", {
      d: "M11.5 10a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"
    }), /* @__PURE__ */ import_react38.default.createElement("path", {
      d: "M17 10a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z"
    }));
  };
  SvgMenuHorizontalIcon.displayName = "MenuHorizontalIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/MinusIcon.svg.mjs
  var import_react39 = __toESM(require_react(), 1);
  var SvgMinusIcon = function SvgMinusIcon2(props) {
    return /* @__PURE__ */ import_react39.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react39.default.createElement("path", {
      fillRule: "evenodd",
      d: "M5 10c0-.414.336-.75.75-.75h8.5c.414 0 .75.336.75.75s-.336.75-.75.75h-8.5c-.414 0-.75-.336-.75-.75Z"
    }));
  };
  SvgMinusIcon.displayName = "MinusIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/PlusIcon.svg.mjs
  var import_react40 = __toESM(require_react(), 1);
  var SvgPlusIcon = function SvgPlusIcon2(props) {
    return /* @__PURE__ */ import_react40.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react40.default.createElement("path", {
      d: "M10.75 5.75c0-.414-.336-.75-.75-.75s-.75.336-.75.75v3.5h-3.5c-.414 0-.75.336-.75.75s.336.75.75.75h3.5v3.5c0 .414.336.75.75.75s.75-.336.75-.75v-3.5h3.5c.414 0 .75-.336.75-.75s-.336-.75-.75-.75h-3.5v-3.5Z"
    }));
  };
  SvgPlusIcon.displayName = "PlusIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/SearchIcon.svg.mjs
  var import_react41 = __toESM(require_react(), 1);
  var SvgSearchIcon = function SvgSearchIcon2(props) {
    return /* @__PURE__ */ import_react41.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react41.default.createElement("path", {
      fillRule: "evenodd",
      d: "M12.323 13.383a5.5 5.5 0 1 1 1.06-1.06l2.897 2.897a.75.75 0 1 1-1.06 1.06l-2.897-2.897Zm.677-4.383a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z"
    }));
  };
  SvgSearchIcon.displayName = "SearchIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/SelectIcon.svg.mjs
  var import_react42 = __toESM(require_react(), 1);
  var SvgSelectIcon = function SvgSelectIcon2(props) {
    return /* @__PURE__ */ import_react42.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react42.default.createElement("path", {
      d: "M10.884 4.323a1.25 1.25 0 0 0-1.768 0l-2.646 2.647a.75.75 0 0 0 1.06 1.06l2.47-2.47 2.47 2.47a.75.75 0 1 0 1.06-1.06l-2.646-2.647Z"
    }), /* @__PURE__ */ import_react42.default.createElement("path", {
      d: "m13.53 13.03-2.646 2.647a1.25 1.25 0 0 1-1.768 0l-2.646-2.647a.75.75 0 0 1 1.06-1.06l2.47 2.47 2.47-2.47a.75.75 0 0 1 1.06 1.06Z"
    }));
  };
  SvgSelectIcon.displayName = "SelectIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/SortAscendingIcon.svg.mjs
  var import_react43 = __toESM(require_react(), 1);
  var SvgSortAscendingIcon = function SvgSortAscendingIcon2(props) {
    return /* @__PURE__ */ import_react43.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react43.default.createElement("path", {
      fillRule: "evenodd",
      d: "M9.116 4.323a1.25 1.25 0 0 1 1.768 0l2.646 2.647a.75.75 0 0 1-1.06 1.06l-2.47-2.47-2.47 2.47a.75.75 0 1 1-1.06-1.06l2.646-2.647Z"
    }), /* @__PURE__ */ import_react43.default.createElement("path", {
      fillOpacity: 0.33,
      fillRule: "evenodd",
      d: "M9.116 15.677a1.25 1.25 0 0 0 1.768 0l2.646-2.647a.75.75 0 0 0-1.06-1.06l-2.47 2.47-2.47-2.47a.75.75 0 0 0-1.06 1.06l2.646 2.647Z"
    }));
  };
  SvgSortAscendingIcon.displayName = "SortAscendingIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/SortDescendingIcon.svg.mjs
  var import_react44 = __toESM(require_react(), 1);
  var SvgSortDescendingIcon = function SvgSortDescendingIcon2(props) {
    return /* @__PURE__ */ import_react44.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react44.default.createElement("path", {
      fillOpacity: 0.33,
      fillRule: "evenodd",
      d: "M9.116 4.823a1.25 1.25 0 0 1 1.768 0l2.646 2.647a.75.75 0 0 1-1.06 1.06l-2.47-2.47-2.47 2.47a.75.75 0 1 1-1.06-1.06l2.646-2.647Z"
    }), /* @__PURE__ */ import_react44.default.createElement("path", {
      fillRule: "evenodd",
      d: "M9.116 15.177a1.25 1.25 0 0 0 1.768 0l2.646-2.647a.75.75 0 0 0-1.06-1.06l-2.47 2.47-2.47-2.47a.75.75 0 0 0-1.06 1.06l2.646 2.647Z"
    }));
  };
  SvgSortDescendingIcon.displayName = "SortDescendingIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/SortIcon.svg.mjs
  var import_react45 = __toESM(require_react(), 1);
  var SvgSortIcon = function SvgSortIcon2(props) {
    return /* @__PURE__ */ import_react45.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react45.default.createElement("path", {
      d: "M7.75 6.06v7.69a.75.75 0 0 1-1.5 0v-7.69l-1.72 1.72a.75.75 0 0 1-1.06-1.06l3-3a.75.75 0 0 1 1.06 0l3 3a.75.75 0 1 1-1.06 1.06l-1.72-1.72Z"
    }), /* @__PURE__ */ import_react45.default.createElement("path", {
      d: "M13.75 6.25a.75.75 0 0 0-1.5 0v7.69l-1.72-1.72a.75.75 0 1 0-1.06 1.06l3 3a.75.75 0 0 0 1.06 0l3-3a.75.75 0 1 0-1.06-1.06l-1.72 1.72v-7.69Z"
    }));
  };
  SvgSortIcon.displayName = "SortIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/XCircleIcon.svg.mjs
  var import_react46 = __toESM(require_react(), 1);
  var SvgXCircleIcon = function SvgXCircleIcon2(props) {
    return /* @__PURE__ */ import_react46.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react46.default.createElement("path", {
      d: "M13.03 6.97a.75.75 0 0 1 0 1.06l-1.97 1.97 1.97 1.97a.75.75 0 1 1-1.06 1.06l-1.97-1.97-1.97 1.97a.75.75 0 0 1-1.06-1.06l1.97-1.97-1.97-1.97a.75.75 0 0 1 1.06-1.06l1.97 1.97 1.97-1.97a.75.75 0 0 1 1.06 0Z"
    }), /* @__PURE__ */ import_react46.default.createElement("path", {
      fillRule: "evenodd",
      d: "M10 17a7 7 0 1 0 0-14 7 7 0 0 0 0 14Zm0-1.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11Z"
    }));
  };
  SvgXCircleIcon.displayName = "XCircleIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/XIcon.svg.mjs
  var import_react47 = __toESM(require_react(), 1);
  var SvgXIcon = function SvgXIcon2(props) {
    return /* @__PURE__ */ import_react47.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react47.default.createElement("path", {
      d: "M13.97 15.03a.75.75 0 1 0 1.06-1.06l-3.97-3.97 3.97-3.97a.75.75 0 0 0-1.06-1.06l-3.97 3.97-3.97-3.97a.75.75 0 0 0-1.06 1.06l3.97 3.97-3.97 3.97a.75.75 0 1 0 1.06 1.06l3.97-3.97 3.97 3.97Z"
    }));
  };
  SvgXIcon.displayName = "XIcon";

  // node_modules/@shopify/polaris-icons/dist/icons/XSmallIcon.svg.mjs
  var import_react48 = __toESM(require_react(), 1);
  var SvgXSmallIcon = function SvgXSmallIcon2(props) {
    return /* @__PURE__ */ import_react48.default.createElement("svg", Object.assign({
      viewBox: "0 0 20 20"
    }, props), /* @__PURE__ */ import_react48.default.createElement("path", {
      d: "M12.72 13.78a.75.75 0 1 0 1.06-1.06l-2.72-2.72 2.72-2.72a.75.75 0 0 0-1.06-1.06l-2.72 2.72-2.72-2.72a.75.75 0 0 0-1.06 1.06l2.72 2.72-2.72 2.72a.75.75 0 1 0 1.06 1.06l2.72-2.72 2.72 2.72Z"
    }));
  };
  SvgXSmallIcon.displayName = "XSmallIcon";

  // node_modules/@shopify/polaris-icons/dist/index.mjs
  var import_react49 = __toESM(require_react(), 1);

  // node_modules/@shopify/polaris/build/esm/utilities/is-element-in-viewport.js
  function isElementInViewport(element) {
    const {
      top,
      left,
      bottom,
      right
    } = element.getBoundingClientRect();
    const window2 = element.ownerDocument.defaultView || globalThis.window;
    return top >= 0 && right <= window2.innerWidth && bottom <= window2.innerHeight && left >= 0;
  }

  // node_modules/@shopify/polaris/build/esm/utilities/focus.js
  var FOCUSABLE_SELECTOR = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]';
  var KEYBOARD_FOCUSABLE_SELECTORS = 'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]:not([tabindex="-1"])';
  var MENUITEM_FOCUSABLE_SELECTORS = 'a[role="menuitem"],frame[role="menuitem"],iframe[role="menuitem"],input[role="menuitem"]:not([type=hidden]):not(:disabled),select[role="menuitem"]:not(:disabled),textarea[role="menuitem"]:not(:disabled),button[role="menuitem"]:not(:disabled),*[tabindex]:not([tabindex="-1"])';
  var handleMouseUpByBlurring = ({
    currentTarget
  }) => currentTarget.blur();
  function nextFocusableNode(node, filter2) {
    const allFocusableElements = [...document.querySelectorAll(FOCUSABLE_SELECTOR)];
    const sliceLocation = allFocusableElements.indexOf(node) + 1;
    const focusableElementsAfterNode = allFocusableElements.slice(sliceLocation);
    for (const focusableElement of focusableElementsAfterNode) {
      if (isElementInViewport(focusableElement) && (!filter2 || filter2 && filter2(focusableElement))) {
        return focusableElement;
      }
    }
    return null;
  }
  function findFirstFocusableNode(element, onlyDescendants = true) {
    if (!onlyDescendants && matches(element, FOCUSABLE_SELECTOR)) {
      return element;
    }
    return element.querySelector(FOCUSABLE_SELECTOR);
  }
  function findFirstFocusableNodeIncludingDisabled(element) {
    const focusableSelector = `a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]`;
    if (matches(element, focusableSelector)) {
      return element;
    }
    return element.querySelector(focusableSelector);
  }
  function focusFirstFocusableNode(element, onlyDescendants = true) {
    findFirstFocusableNode(element, onlyDescendants)?.focus();
  }
  function focusNextFocusableNode(node, filter2) {
    const nextFocusable = nextFocusableNode(node, filter2);
    if (nextFocusable && nextFocusable instanceof HTMLElement) {
      nextFocusable.focus();
      return true;
    }
    return false;
  }
  function findFirstKeyboardFocusableNode(element, onlyDescendants = true) {
    if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
      return element;
    }
    return element.querySelector(KEYBOARD_FOCUSABLE_SELECTORS);
  }
  function focusFirstKeyboardFocusableNode(element, onlyDescendants = true) {
    const firstFocusable = findFirstKeyboardFocusableNode(element, onlyDescendants);
    if (firstFocusable) {
      firstFocusable.focus();
      return true;
    }
    return false;
  }
  function findLastKeyboardFocusableNode(element, onlyDescendants = true) {
    if (!onlyDescendants && matches(element, KEYBOARD_FOCUSABLE_SELECTORS)) {
      return element;
    }
    const allFocusable = element.querySelectorAll(KEYBOARD_FOCUSABLE_SELECTORS);
    return allFocusable[allFocusable.length - 1];
  }
  function focusLastKeyboardFocusableNode(element, onlyDescendants = true) {
    const lastFocusable = findLastKeyboardFocusableNode(element, onlyDescendants);
    if (lastFocusable) {
      lastFocusable.focus();
      return true;
    }
    return false;
  }
  function wrapFocusPreviousFocusableMenuItem(parentElement, currentFocusedElement) {
    const allFocusableChildren = getMenuFocusableDescendants(parentElement);
    const currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
    if (currentItemIdx === -1) {
      allFocusableChildren[0].focus();
    } else {
      allFocusableChildren[(currentItemIdx - 1 + allFocusableChildren.length) % allFocusableChildren.length].focus();
    }
  }
  function wrapFocusNextFocusableMenuItem(parentElement, currentFocusedElement) {
    const allFocusableChildren = getMenuFocusableDescendants(parentElement);
    const currentItemIdx = getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement);
    if (currentItemIdx === -1) {
      allFocusableChildren[0].focus();
    } else {
      allFocusableChildren[(currentItemIdx + 1) % allFocusableChildren.length].focus();
    }
  }
  function getMenuFocusableDescendants(element) {
    return element.querySelectorAll(MENUITEM_FOCUSABLE_SELECTORS);
  }
  function getCurrentFocusedElementIndex(allFocusableChildren, currentFocusedElement) {
    let currentItemIdx = 0;
    for (const focusableChild of allFocusableChildren) {
      if (focusableChild === currentFocusedElement) {
        break;
      }
      currentItemIdx++;
    }
    return currentItemIdx === allFocusableChildren.length ? -1 : currentItemIdx;
  }
  function matches(node, selector) {
    if (node.matches) {
      return node.matches(selector);
    }
    const matches2 = (node.ownerDocument || document).querySelectorAll(selector);
    let i = matches2.length;
    while (--i >= 0 && matches2.item(i) !== node)
      return i > -1;
  }

  // node_modules/@shopify/polaris/build/esm/components/Button/Button.css.js
  var styles2 = {
    "Button": "Polaris-Button",
    "disabled": "Polaris-Button--disabled",
    "pressed": "Polaris-Button--pressed",
    "variantPrimary": "Polaris-Button--variantPrimary",
    "variantSecondary": "Polaris-Button--variantSecondary",
    "variantTertiary": "Polaris-Button--variantTertiary",
    "variantPlain": "Polaris-Button--variantPlain",
    "removeUnderline": "Polaris-Button--removeUnderline",
    "variantMonochromePlain": "Polaris-Button--variantMonochromePlain",
    "toneSuccess": "Polaris-Button--toneSuccess",
    "toneCritical": "Polaris-Button--toneCritical",
    "sizeMicro": "Polaris-Button--sizeMicro",
    "sizeSlim": "Polaris-Button--sizeSlim",
    "sizeMedium": "Polaris-Button--sizeMedium",
    "sizeLarge": "Polaris-Button--sizeLarge",
    "textAlignCenter": "Polaris-Button--textAlignCenter",
    "textAlignStart": "Polaris-Button--textAlignStart",
    "textAlignLeft": "Polaris-Button--textAlignLeft",
    "textAlignEnd": "Polaris-Button--textAlignEnd",
    "textAlignRight": "Polaris-Button--textAlignRight",
    "fullWidth": "Polaris-Button--fullWidth",
    "iconOnly": "Polaris-Button--iconOnly",
    "iconWithText": "Polaris-Button--iconWithText",
    "disclosure": "Polaris-Button--disclosure",
    "loading": "Polaris-Button--loading",
    "pressable": "Polaris-Button--pressable",
    "hidden": "Polaris-Button--hidden",
    "Icon": "Polaris-Button__Icon",
    "Spinner": "Polaris-Button__Spinner"
  };

  // node_modules/@shopify/polaris/build/esm/components/Icon/Icon.js
  var import_react51 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Icon/Icon.css.js
  var styles3 = {
    "Icon": "Polaris-Icon",
    "toneInherit": "Polaris-Icon--toneInherit",
    "toneBase": "Polaris-Icon--toneBase",
    "toneSubdued": "Polaris-Icon--toneSubdued",
    "toneCaution": "Polaris-Icon--toneCaution",
    "toneWarning": "Polaris-Icon--toneWarning",
    "toneCritical": "Polaris-Icon--toneCritical",
    "toneInteractive": "Polaris-Icon--toneInteractive",
    "toneInfo": "Polaris-Icon--toneInfo",
    "toneSuccess": "Polaris-Icon--toneSuccess",
    "tonePrimary": "Polaris-Icon--tonePrimary",
    "toneEmphasis": "Polaris-Icon--toneEmphasis",
    "toneMagic": "Polaris-Icon--toneMagic",
    "toneTextCaution": "Polaris-Icon--toneTextCaution",
    "toneTextWarning": "Polaris-Icon--toneTextWarning",
    "toneTextCritical": "Polaris-Icon--toneTextCritical",
    "toneTextInfo": "Polaris-Icon--toneTextInfo",
    "toneTextPrimary": "Polaris-Icon--toneTextPrimary",
    "toneTextSuccess": "Polaris-Icon--toneTextSuccess",
    "toneTextMagic": "Polaris-Icon--toneTextMagic",
    "Svg": "Polaris-Icon__Svg",
    "Img": "Polaris-Icon__Img",
    "Placeholder": "Polaris-Icon__Placeholder"
  };

  // node_modules/@shopify/polaris/build/esm/components/Text/Text.js
  var import_react50 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Text/Text.css.js
  var styles4 = {
    "root": "Polaris-Text--root",
    "block": "Polaris-Text--block",
    "truncate": "Polaris-Text--truncate",
    "visuallyHidden": "Polaris-Text--visuallyHidden",
    "start": "Polaris-Text--start",
    "center": "Polaris-Text--center",
    "end": "Polaris-Text--end",
    "justify": "Polaris-Text--justify",
    "base": "Polaris-Text--base",
    "inherit": "Polaris-Text--inherit",
    "disabled": "Polaris-Text--disabled",
    "success": "Polaris-Text--success",
    "critical": "Polaris-Text--critical",
    "caution": "Polaris-Text--caution",
    "subdued": "Polaris-Text--subdued",
    "magic": "Polaris-Text--magic",
    "magic-subdued": "Polaris-Text__magic--subdued",
    "text-inverse": "Polaris-Text__text--inverse",
    "text-inverse-secondary": "Polaris-Text--textInverseSecondary",
    "headingXs": "Polaris-Text--headingXs",
    "headingSm": "Polaris-Text--headingSm",
    "headingMd": "Polaris-Text--headingMd",
    "headingLg": "Polaris-Text--headingLg",
    "headingXl": "Polaris-Text--headingXl",
    "heading2xl": "Polaris-Text--heading2xl",
    "heading3xl": "Polaris-Text--heading3xl",
    "bodyXs": "Polaris-Text--bodyXs",
    "bodySm": "Polaris-Text--bodySm",
    "bodyMd": "Polaris-Text--bodyMd",
    "bodyLg": "Polaris-Text--bodyLg",
    "regular": "Polaris-Text--regular",
    "medium": "Polaris-Text--medium",
    "semibold": "Polaris-Text--semibold",
    "bold": "Polaris-Text--bold",
    "break": "Polaris-Text--break",
    "numeric": "Polaris-Text--numeric",
    "line-through": "Polaris-Text__line--through"
  };

  // node_modules/@shopify/polaris/build/esm/components/Text/Text.js
  var deprecatedVariants = {
    heading3xl: "heading2xl"
  };
  var Text = ({
    alignment,
    as,
    breakWord,
    children,
    tone,
    fontWeight,
    id,
    numeric = false,
    truncate = false,
    variant,
    visuallyHidden = false,
    textDecorationLine
  }) => {
    if (variant && Object.prototype.hasOwnProperty.call(deprecatedVariants, variant)) {
      console.warn(`Deprecation: <Text variant="${variant}" />. The value "${variant}" will be removed in a future major version of Polaris. Use "${deprecatedVariants[variant]}" instead.`);
    }
    const Component7 = as || (visuallyHidden ? "span" : "p");
    const className = classNames(styles4.root, variant && styles4[variant], fontWeight && styles4[fontWeight], (alignment || truncate) && styles4.block, alignment && styles4[alignment], breakWord && styles4.break, tone && styles4[tone], numeric && styles4.numeric, truncate && styles4.truncate, visuallyHidden && styles4.visuallyHidden, textDecorationLine && styles4[textDecorationLine]);
    return /* @__PURE__ */ import_react50.default.createElement(Component7, Object.assign({
      className
    }, id && {
      id
    }), children);
  };

  // node_modules/@shopify/polaris/build/esm/components/Icon/Icon.js
  function Icon({
    source,
    tone,
    accessibilityLabel
  }) {
    let sourceType;
    if (typeof source === "function") {
      sourceType = "function";
    } else if (source === "placeholder") {
      sourceType = "placeholder";
    } else {
      sourceType = "external";
    }
    if (tone && sourceType === "external" && true) {
      console.warn("Recoloring external SVGs is not supported. Set the intended color on your SVG instead.");
    }
    const className = classNames(styles3.Icon, tone && styles3[variationName("tone", tone)]);
    const {
      mdDown
    } = useBreakpoints();
    const SourceComponent = source;
    const contentMarkup = {
      function: /* @__PURE__ */ import_react51.default.createElement(SourceComponent, Object.assign({
        className: styles3.Svg,
        focusable: "false",
        "aria-hidden": "true"
        // On Mobile we're scaling the viewBox to 18x18 to make the icons bigger
        // Also, we're setting the viewport origin to 1x1 to center the icon
        // We use this syntax so we don't override the existing viewBox value if we don't need to.
      }, mdDown ? {
        viewBox: "1 1 18 18"
      } : {})),
      placeholder: /* @__PURE__ */ import_react51.default.createElement("div", {
        className: styles3.Placeholder
      }),
      external: /* @__PURE__ */ import_react51.default.createElement("img", {
        className: styles3.Img,
        src: `data:image/svg+xml;utf8,${source}`,
        alt: "",
        "aria-hidden": "true"
      })
    };
    return /* @__PURE__ */ import_react51.default.createElement("span", {
      className
    }, accessibilityLabel && /* @__PURE__ */ import_react51.default.createElement(Text, {
      as: "span",
      visuallyHidden: true
    }, accessibilityLabel), contentMarkup[sourceType]);
  }

  // node_modules/@shopify/polaris/build/esm/components/Spinner/Spinner.js
  var import_react52 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Spinner/Spinner.css.js
  var styles5 = {
    "Spinner": "Polaris-Spinner",
    "sizeSmall": "Polaris-Spinner--sizeSmall",
    "sizeLarge": "Polaris-Spinner--sizeLarge"
  };

  // node_modules/@shopify/polaris/build/esm/components/Spinner/Spinner.js
  function Spinner({
    size = "large",
    accessibilityLabel,
    hasFocusableParent
  }) {
    const isAfterInitialMount = useIsAfterInitialMount();
    const className = classNames(styles5.Spinner, size && styles5[variationName("size", size)]);
    const spinnerSVGMarkup = size === "large" ? /* @__PURE__ */ import_react52.default.createElement("svg", {
      viewBox: "0 0 44 44",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */ import_react52.default.createElement("path", {
      d: "M15.542 1.487A21.507 21.507 0 00.5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 00-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 10-.9-2.863z"
    })) : /* @__PURE__ */ import_react52.default.createElement("svg", {
      viewBox: "0 0 20 20",
      xmlns: "http://www.w3.org/2000/svg"
    }, /* @__PURE__ */ import_react52.default.createElement("path", {
      d: "M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z"
    }));
    const spanAttributes = {
      ...!hasFocusableParent && {
        role: "status"
      }
    };
    const accessibilityLabelMarkup = (isAfterInitialMount || !hasFocusableParent) && /* @__PURE__ */ import_react52.default.createElement(Text, {
      as: "span",
      visuallyHidden: true
    }, accessibilityLabel);
    return /* @__PURE__ */ import_react52.default.createElement(import_react52.default.Fragment, null, /* @__PURE__ */ import_react52.default.createElement("span", {
      className
    }, spinnerSVGMarkup), /* @__PURE__ */ import_react52.default.createElement("span", spanAttributes, accessibilityLabelMarkup));
  }

  // node_modules/@shopify/polaris/build/esm/components/UnstyledButton/UnstyledButton.js
  var import_react56 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/use-disable-interaction.js
  var import_react53 = __toESM(require_react());
  function useDisableClick(disabled, handleClick) {
    const handleClickWrapper = (0, import_react53.useCallback)((event) => {
      if (disabled) {
        event.preventDefault();
        event.stopPropagation();
      }
    }, [disabled]);
    if (!disabled) {
      return handleClick;
    }
    return handleClickWrapper;
  }

  // node_modules/@shopify/polaris/build/esm/components/UnstyledLink/UnstyledLink.js
  var import_react55 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/link/hooks.js
  var import_react54 = __toESM(require_react());
  function useLink() {
    return (0, import_react54.useContext)(LinkContext);
  }

  // node_modules/@shopify/polaris/build/esm/components/UnstyledLink/UnstyledLink.js
  var UnstyledLink = /* @__PURE__ */ (0, import_react55.memo)(/* @__PURE__ */ (0, import_react55.forwardRef)(function UnstyledLink2(props, _ref) {
    const LinkComponent = useLink();
    if (LinkComponent) {
      return /* @__PURE__ */ import_react55.default.createElement(LinkComponent, Object.assign({}, unstyled.props, props, {
        ref: _ref
      }));
    }
    const {
      external,
      url,
      target: targetProp,
      ...rest
    } = props;
    let target;
    if (external) {
      target = "_blank";
    } else {
      target = targetProp ?? void 0;
    }
    const rel = target === "_blank" ? "noopener noreferrer" : void 0;
    return /* @__PURE__ */ import_react55.default.createElement("a", Object.assign({
      target
    }, rest, {
      href: url,
      rel
    }, unstyled.props, {
      ref: _ref
    }));
  }));

  // node_modules/@shopify/polaris/build/esm/components/UnstyledButton/UnstyledButton.js
  function UnstyledButton({
    id,
    children,
    className,
    url,
    external,
    target,
    download,
    submit,
    disabled,
    loading,
    pressed,
    accessibilityLabel,
    role,
    ariaControls,
    ariaExpanded,
    ariaDescribedBy,
    ariaChecked,
    onClick,
    onFocus,
    onBlur,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseEnter,
    onTouchStart,
    ...rest
  }) {
    let buttonMarkup;
    const commonProps = {
      id,
      className,
      "aria-label": accessibilityLabel
    };
    const interactiveProps = {
      ...commonProps,
      role,
      onClick,
      onFocus,
      onBlur,
      onMouseUp: handleMouseUpByBlurring,
      onMouseEnter,
      onTouchStart
    };
    const handleClick = useDisableClick(disabled, onClick);
    if (url) {
      buttonMarkup = disabled ? (
        // Render an `<a>` so toggling disabled/enabled state changes only the
        // `href` attribute instead of replacing the whole element.
        /* @__PURE__ */ import_react56.default.createElement("a", commonProps, children)
      ) : /* @__PURE__ */ import_react56.default.createElement(UnstyledLink, Object.assign({}, interactiveProps, {
        url,
        external,
        target,
        download
      }, rest), children);
    } else {
      buttonMarkup = /* @__PURE__ */ import_react56.default.createElement("button", Object.assign({}, interactiveProps, {
        "aria-disabled": disabled,
        type: submit ? "submit" : "button",
        "aria-busy": loading ? true : void 0,
        "aria-controls": ariaControls,
        "aria-expanded": ariaExpanded,
        "aria-describedby": ariaDescribedBy,
        "aria-checked": ariaChecked,
        "aria-pressed": pressed,
        onKeyDown,
        onKeyUp,
        onKeyPress,
        onClick: handleClick,
        tabIndex: disabled ? -1 : void 0
      }, rest), children);
    }
    return buttonMarkup;
  }

  // node_modules/@shopify/polaris/build/esm/utilities/i18n/hooks.js
  var import_react57 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/errors.js
  var MissingAppProviderError = class extends Error {
    constructor(message = "") {
      super(`${message ? `${message} ` : message}Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.`);
      this.name = "MissingAppProviderError";
    }
  };

  // node_modules/@shopify/polaris/build/esm/utilities/i18n/hooks.js
  function useI18n() {
    const i18n = (0, import_react57.useContext)(I18nContext);
    if (!i18n) {
      throw new MissingAppProviderError("No i18n was provided.");
    }
    return i18n;
  }

  // node_modules/@shopify/polaris/build/esm/components/Button/Button.js
  function Button({
    id,
    children,
    url,
    disabled,
    external,
    download,
    target,
    submit,
    loading,
    pressed,
    accessibilityLabel,
    role,
    ariaControls,
    ariaExpanded,
    ariaDescribedBy,
    ariaChecked,
    onClick,
    onFocus,
    onBlur,
    onKeyDown,
    onKeyPress,
    onKeyUp,
    onMouseEnter,
    onTouchStart,
    onPointerDown,
    icon,
    disclosure,
    removeUnderline,
    size = "medium",
    textAlign = "center",
    fullWidth,
    dataPrimaryLink,
    tone,
    variant = "secondary"
  }) {
    const i18n = useI18n();
    const isDisabled = disabled || loading;
    const {
      mdUp
    } = useBreakpoints();
    const className = classNames(styles2.Button, styles2.pressable, styles2[variationName("variant", variant)], styles2[variationName("size", size)], styles2[variationName("textAlign", textAlign)], fullWidth && styles2.fullWidth, disclosure && styles2.disclosure, icon && children && styles2.iconWithText, icon && children == null && styles2.iconOnly, isDisabled && styles2.disabled, loading && styles2.loading, pressed && !disabled && !url && styles2.pressed, removeUnderline && styles2.removeUnderline, tone && styles2[variationName("tone", tone)]);
    const disclosureMarkup = disclosure ? /* @__PURE__ */ import_react58.default.createElement("span", {
      className: loading ? styles2.hidden : styles2.Icon
    }, /* @__PURE__ */ import_react58.default.createElement(Icon, {
      source: loading ? "placeholder" : getDisclosureIconSource(disclosure, SvgChevronUpIcon, SvgChevronDownIcon)
    })) : null;
    const iconSource = isIconSource(icon) ? /* @__PURE__ */ import_react58.default.createElement(Icon, {
      source: loading ? "placeholder" : icon
    }) : icon;
    const iconMarkup = iconSource ? /* @__PURE__ */ import_react58.default.createElement("span", {
      className: loading ? styles2.hidden : styles2.Icon
    }, iconSource) : null;
    const hasPlainText = ["plain", "monochromePlain"].includes(variant);
    let textFontWeight = "medium";
    if (hasPlainText) {
      textFontWeight = "regular";
    } else if (variant === "primary") {
      textFontWeight = mdUp ? "medium" : "semibold";
    }
    let textVariant = "bodySm";
    if (size === "large" || hasPlainText && size !== "micro") {
      textVariant = "bodyMd";
    }
    const childMarkup = children ? /* @__PURE__ */ import_react58.default.createElement(Text, {
      as: "span",
      variant: textVariant,
      fontWeight: textFontWeight,
      key: disabled ? "text-disabled" : "text"
    }, children) : null;
    const spinnerSVGMarkup = loading ? /* @__PURE__ */ import_react58.default.createElement("span", {
      className: styles2.Spinner
    }, /* @__PURE__ */ import_react58.default.createElement(Spinner, {
      size: "small",
      accessibilityLabel: i18n.translate("Polaris.Button.spinnerAccessibilityLabel")
    })) : null;
    const commonProps = {
      id,
      className,
      accessibilityLabel,
      ariaDescribedBy,
      role,
      onClick,
      onFocus,
      onBlur,
      onMouseUp: handleMouseUpByBlurring,
      onMouseEnter,
      onTouchStart,
      "data-primary-link": dataPrimaryLink
    };
    const linkProps = {
      url,
      external,
      download,
      target
    };
    const actionProps = {
      submit,
      disabled: isDisabled,
      loading,
      ariaControls,
      ariaExpanded,
      ariaChecked,
      pressed,
      onKeyDown,
      onKeyUp,
      onKeyPress,
      onPointerDown
    };
    const buttonMarkup = /* @__PURE__ */ import_react58.default.createElement(UnstyledButton, Object.assign({}, commonProps, linkProps, actionProps), spinnerSVGMarkup, iconMarkup, childMarkup, disclosureMarkup);
    return buttonMarkup;
  }
  function isIconSource(x) {
    return typeof x === "string" || typeof x === "object" && x.body || typeof x === "function";
  }
  function getDisclosureIconSource(disclosure, upIcon, downIcon) {
    if (disclosure === "select") {
      return SvgSelectIcon;
    }
    return disclosure === "up" ? upIcon : downIcon;
  }

  // node_modules/@shopify/polaris/build/esm/components/Button/utils.js
  function buttonsFrom(actions, overrides = {}) {
    if (Array.isArray(actions)) {
      return actions.map((action, index) => buttonFrom(action, overrides, index));
    } else {
      const action = actions;
      return buttonFrom(action, overrides);
    }
  }
  function buttonFrom({
    content,
    onAction,
    plain,
    destructive,
    ...action
  }, overrides, key) {
    const plainVariant = plain ? "plain" : void 0;
    const destructiveVariant = destructive ? "primary" : void 0;
    const tone = !overrides?.tone && destructive ? "critical" : overrides?.tone;
    return /* @__PURE__ */ import_react59.default.createElement(Button, Object.assign({
      key,
      onClick: onAction,
      tone,
      variant: plainVariant || destructiveVariant
    }, action, overrides), content);
  }

  // node_modules/@shopify/polaris/build/esm/components/Card/Card.js
  var import_react62 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/ShadowBevel/ShadowBevel.js
  var import_react60 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/ShadowBevel/ShadowBevel.css.js
  var styles6 = {
    "ShadowBevel": "Polaris-ShadowBevel"
  };

  // node_modules/@shopify/polaris/build/esm/components/ShadowBevel/ShadowBevel.js
  function ShadowBevel(props) {
    const {
      as = "div",
      bevel = true,
      borderRadius,
      boxShadow,
      children,
      zIndex = "0"
    } = props;
    const Component7 = as;
    return /* @__PURE__ */ import_react60.default.createElement(Component7, {
      className: styles6.ShadowBevel,
      style: {
        "--pc-shadow-bevel-z-index": zIndex,
        ...getResponsiveValue("shadow-bevel", "content", mapResponsiveProp(bevel, (bevel2) => bevel2 ? '""' : "none")),
        ...getResponsiveValue("shadow-bevel", "box-shadow", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-shadow-${boxShadow})` : "none")),
        ...getResponsiveValue("shadow-bevel", "border-radius", mapResponsiveProp(bevel, (bevel2) => bevel2 ? `var(--p-border-radius-${borderRadius})` : "var(--p-border-radius-0)"))
      }
    }, children);
  }
  function mapResponsiveProp(responsiveProp, callback) {
    if (typeof responsiveProp === "boolean") {
      return callback(responsiveProp);
    }
    return Object.fromEntries(Object.entries(responsiveProp).map(([breakpointsAlias, value]) => [breakpointsAlias, callback(value)]));
  }

  // node_modules/@shopify/polaris/build/esm/components/Box/Box.js
  var import_react61 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Box/Box.css.js
  var styles7 = {
    "listReset": "Polaris-Box--listReset",
    "Box": "Polaris-Box",
    "visuallyHidden": "Polaris-Box--visuallyHidden",
    "printHidden": "Polaris-Box--printHidden"
  };

  // node_modules/@shopify/polaris/build/esm/components/Box/Box.js
  var Box = /* @__PURE__ */ (0, import_react61.forwardRef)(({
    as = "div",
    background,
    borderColor,
    borderStyle,
    borderWidth,
    borderBlockStartWidth,
    borderBlockEndWidth,
    borderInlineStartWidth,
    borderInlineEndWidth,
    borderRadius,
    borderEndStartRadius,
    borderEndEndRadius,
    borderStartStartRadius,
    borderStartEndRadius,
    children,
    color,
    id,
    minHeight,
    minWidth,
    maxWidth,
    overflowX,
    overflowY,
    outlineColor,
    outlineStyle,
    outlineWidth,
    padding,
    paddingBlock,
    paddingBlockStart,
    paddingBlockEnd,
    paddingInline,
    paddingInlineStart,
    paddingInlineEnd,
    role,
    shadow: shadow2,
    tabIndex,
    width,
    printHidden,
    visuallyHidden,
    position,
    insetBlockStart,
    insetBlockEnd,
    insetInlineStart,
    insetInlineEnd,
    zIndex,
    opacity,
    ...restProps
  }, ref) => {
    const borderStyleValue = borderStyle ? borderStyle : borderColor || borderWidth || borderBlockStartWidth || borderBlockEndWidth || borderInlineStartWidth || borderInlineEndWidth ? "solid" : void 0;
    const outlineStyleValue = outlineStyle ? outlineStyle : outlineColor || outlineWidth ? "solid" : void 0;
    const style = {
      "--pc-box-color": color ? `var(--p-color-${color})` : void 0,
      "--pc-box-background": background ? `var(--p-color-${background})` : void 0,
      // eslint-disable-next-line no-nested-ternary
      "--pc-box-border-color": borderColor ? borderColor === "transparent" ? "transparent" : `var(--p-color-${borderColor})` : void 0,
      "--pc-box-border-style": borderStyleValue,
      "--pc-box-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
      "--pc-box-border-end-start-radius": borderEndStartRadius ? `var(--p-border-radius-${borderEndStartRadius})` : void 0,
      "--pc-box-border-end-end-radius": borderEndEndRadius ? `var(--p-border-radius-${borderEndEndRadius})` : void 0,
      "--pc-box-border-start-start-radius": borderStartStartRadius ? `var(--p-border-radius-${borderStartStartRadius})` : void 0,
      "--pc-box-border-start-end-radius": borderStartEndRadius ? `var(--p-border-radius-${borderStartEndRadius})` : void 0,
      "--pc-box-border-width": borderWidth ? `var(--p-border-width-${borderWidth})` : void 0,
      "--pc-box-border-block-start-width": borderBlockStartWidth ? `var(--p-border-width-${borderBlockStartWidth})` : void 0,
      "--pc-box-border-block-end-width": borderBlockEndWidth ? `var(--p-border-width-${borderBlockEndWidth})` : void 0,
      "--pc-box-border-inline-start-width": borderInlineStartWidth ? `var(--p-border-width-${borderInlineStartWidth})` : void 0,
      "--pc-box-border-inline-end-width": borderInlineEndWidth ? `var(--p-border-width-${borderInlineEndWidth})` : void 0,
      "--pc-box-min-height": minHeight,
      "--pc-box-min-width": minWidth,
      "--pc-box-max-width": maxWidth,
      "--pc-box-outline-color": outlineColor ? `var(--p-color-${outlineColor})` : void 0,
      "--pc-box-outline-style": outlineStyleValue,
      "--pc-box-outline-width": outlineWidth ? `var(--p-border-width-${outlineWidth})` : void 0,
      "--pc-box-overflow-x": overflowX,
      "--pc-box-overflow-y": overflowY,
      ...getResponsiveProps("box", "padding-block-start", "space", paddingBlockStart || paddingBlock || padding),
      ...getResponsiveProps("box", "padding-block-end", "space", paddingBlockEnd || paddingBlock || padding),
      ...getResponsiveProps("box", "padding-inline-start", "space", paddingInlineStart || paddingInline || padding),
      ...getResponsiveProps("box", "padding-inline-end", "space", paddingInlineEnd || paddingInline || padding),
      "--pc-box-shadow": shadow2 ? `var(--p-shadow-${shadow2})` : void 0,
      "--pc-box-width": width,
      position,
      "--pc-box-inset-block-start": insetBlockStart ? `var(--p-space-${insetBlockStart})` : void 0,
      "--pc-box-inset-block-end": insetBlockEnd ? `var(--p-space-${insetBlockEnd})` : void 0,
      "--pc-box-inset-inline-start": insetInlineStart ? `var(--p-space-${insetInlineStart})` : void 0,
      "--pc-box-inset-inline-end": insetInlineEnd ? `var(--p-space-${insetInlineEnd})` : void 0,
      zIndex,
      opacity
    };
    const className = classNames(styles7.Box, visuallyHidden && styles7.visuallyHidden, printHidden && styles7.printHidden, as === "ul" && styles7.listReset);
    return /* @__PURE__ */ import_react61.default.createElement(as, {
      className,
      id,
      ref,
      style: sanitizeCustomProperties(style),
      role,
      tabIndex,
      ...restProps
    }, children);
  });
  Box.displayName = "Box";

  // node_modules/@shopify/polaris/build/esm/components/Card/Card.js
  var Card = ({
    children,
    background = "bg-surface",
    padding = {
      xs: "400"
    },
    roundedAbove = "sm"
  }) => {
    const breakpoints = useBreakpoints();
    const defaultBorderRadius = "300";
    const hasBorderRadius = Boolean(breakpoints[`${roundedAbove}Up`]);
    return /* @__PURE__ */ import_react62.default.createElement(WithinContentContext.Provider, {
      value: true
    }, /* @__PURE__ */ import_react62.default.createElement(ShadowBevel, {
      boxShadow: "100",
      borderRadius: hasBorderRadius ? defaultBorderRadius : "0",
      zIndex: "32"
    }, /* @__PURE__ */ import_react62.default.createElement(Box, {
      background,
      padding,
      overflowX: "clip",
      overflowY: "clip",
      minHeight: "100%"
    }, children)));
  };

  // node_modules/@shopify/polaris/build/esm/components/InlineStack/InlineStack.js
  var import_react63 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/InlineStack/InlineStack.css.js
  var styles8 = {
    "InlineStack": "Polaris-InlineStack"
  };

  // node_modules/@shopify/polaris/build/esm/components/InlineStack/InlineStack.js
  var InlineStack = function InlineStack2({
    as: Element2 = "div",
    align,
    direction = "row",
    blockAlign,
    gap,
    wrap = true,
    children
  }) {
    const style = {
      "--pc-inline-stack-align": align,
      "--pc-inline-stack-block-align": blockAlign,
      "--pc-inline-stack-wrap": wrap ? "wrap" : "nowrap",
      ...getResponsiveProps("inline-stack", "gap", "space", gap),
      ...getResponsiveValue("inline-stack", "flex-direction", direction)
    };
    return /* @__PURE__ */ import_react63.default.createElement(Element2, {
      className: styles8.InlineStack,
      style
    }, children);
  };

  // node_modules/@shopify/polaris/build/esm/components/BlockStack/BlockStack.js
  var import_react64 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/BlockStack/BlockStack.css.js
  var styles9 = {
    "BlockStack": "Polaris-BlockStack",
    "listReset": "Polaris-BlockStack--listReset",
    "fieldsetReset": "Polaris-BlockStack--fieldsetReset"
  };

  // node_modules/@shopify/polaris/build/esm/components/BlockStack/BlockStack.js
  var BlockStack = ({
    as = "div",
    children,
    align,
    inlineAlign,
    gap,
    id,
    reverseOrder = false,
    ...restProps
  }) => {
    const className = classNames(styles9.BlockStack, (as === "ul" || as === "ol") && styles9.listReset, as === "fieldset" && styles9.fieldsetReset);
    const style = {
      "--pc-block-stack-align": align ? `${align}` : null,
      "--pc-block-stack-inline-align": inlineAlign ? `${inlineAlign}` : null,
      "--pc-block-stack-order": reverseOrder ? "column-reverse" : "column",
      ...getResponsiveProps("block-stack", "gap", "space", gap)
    };
    return /* @__PURE__ */ import_react64.default.createElement(as, {
      className,
      id,
      style: sanitizeCustomProperties(style),
      ...restProps
    }, children);
  };

  // node_modules/@shopify/polaris/build/esm/components/Avatar/Avatar.js
  var import_react66 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Avatar/Avatar.css.js
  var styles10 = {
    "Avatar": "Polaris-Avatar",
    "imageHasLoaded": "Polaris-Avatar--imageHasLoaded",
    "Text": "Polaris-Avatar__Text",
    "long": "Polaris-Avatar--long",
    "hidden": "Polaris-Avatar--hidden",
    "sizeXs": "Polaris-Avatar--sizeXs",
    "sizeSm": "Polaris-Avatar--sizeSm",
    "sizeMd": "Polaris-Avatar--sizeMd",
    "sizeLg": "Polaris-Avatar--sizeLg",
    "sizeXl": "Polaris-Avatar--sizeXl",
    "styleOne": "Polaris-Avatar--styleOne",
    "styleTwo": "Polaris-Avatar--styleTwo",
    "styleThree": "Polaris-Avatar--styleThree",
    "styleFour": "Polaris-Avatar--styleFour",
    "styleFive": "Polaris-Avatar--styleFive",
    "styleSix": "Polaris-Avatar--styleSix",
    "styleSeven": "Polaris-Avatar--styleSeven",
    "Image": "Polaris-Avatar__Image",
    "Initials": "Polaris-Avatar__Initials",
    "Svg": "Polaris-Avatar__Svg"
  };

  // node_modules/@shopify/polaris/build/esm/components/Image/Image.js
  var import_react65 = __toESM(require_react());
  var Image = /* @__PURE__ */ (0, import_react65.forwardRef)(({
    alt,
    sourceSet,
    source,
    crossOrigin,
    onLoad,
    className,
    ...rest
  }, ref) => {
    const finalSourceSet = sourceSet ? sourceSet.map(({
      source: subSource,
      descriptor
    }) => `${subSource} ${descriptor}`).join(",") : null;
    const handleLoad = (0, import_react65.useCallback)(() => {
      if (onLoad)
        onLoad();
    }, [onLoad]);
    return /* @__PURE__ */ import_react65.default.createElement("img", Object.assign({
      ref,
      alt,
      src: source,
      crossOrigin,
      className,
      onLoad: handleLoad
    }, finalSourceSet ? {
      srcSet: finalSourceSet
    } : {}, rest));
  });
  Image.displayName = "Image";

  // node_modules/@shopify/polaris/build/esm/components/Avatar/Avatar.js
  var Status = /* @__PURE__ */ function(Status2) {
    Status2["Pending"] = "PENDING";
    Status2["Loaded"] = "LOADED";
    Status2["Errored"] = "ERRORED";
    return Status2;
  }(Status || {});
  var STYLE_CLASSES = ["one", "two", "three", "four", "five", "six", "seven"];
  var avatarStrokeWidth = {
    xs: "3",
    sm: "2.5",
    md: "2.5",
    lg: "2.5",
    xl: "2"
  };
  function xorHash(str) {
    let hash = 0;
    for (const char of str) {
      hash ^= char.charCodeAt(0);
    }
    return hash;
  }
  function styleClass(name) {
    return name ? STYLE_CLASSES[xorHash(name) % STYLE_CLASSES.length] : STYLE_CLASSES[0];
  }
  function Avatar({
    name,
    source,
    onError,
    initials,
    customer,
    size = "md",
    accessibilityLabel
  }) {
    const i18n = useI18n();
    const isAfterInitialMount = useIsAfterInitialMount();
    const [status, setStatus] = (0, import_react66.useState)(Status.Pending);
    (0, import_react66.useEffect)(() => {
      setStatus(Status.Pending);
    }, [source]);
    const handleError = (0, import_react66.useCallback)(() => {
      setStatus(Status.Errored);
      if (onError) {
        onError();
      }
    }, [onError]);
    const handleLoad = (0, import_react66.useCallback)(() => {
      setStatus(Status.Loaded);
    }, []);
    const hasImage = source && status !== Status.Errored;
    const nameString = name || initials;
    let label;
    if (accessibilityLabel) {
      label = accessibilityLabel;
    } else if (name) {
      label = name;
    } else if (initials) {
      const splitInitials = initials.split("").join(" ");
      label = i18n.translate("Polaris.Avatar.labelWithInitials", {
        initials: splitInitials
      });
    }
    const className = classNames(styles10.Avatar, size && styles10[variationName("size", size)], hasImage && status === Status.Loaded && styles10.imageHasLoaded, !customer && !hasImage && styles10[variationName("style", styleClass(nameString))]);
    const textClassName = classNames(styles10.Text, (initials?.length || 0) > 2 && styles10.long);
    const imageClassName = classNames(styles10.Image, status !== Status.Loaded && styles10.hidden);
    const imageMarkUp = source && isAfterInitialMount && status !== Status.Errored ? /* @__PURE__ */ import_react66.default.createElement(Image, {
      className: imageClassName,
      source,
      alt: "",
      role: "presentation",
      onLoad: handleLoad,
      onError: handleError
    }) : null;
    const verticalOffset = "0.35em";
    const avatarPath = /* @__PURE__ */ import_react66.default.createElement(import_react66.default.Fragment, null, /* @__PURE__ */ import_react66.default.createElement("path", {
      fill: "none",
      d: "M25.5 13.5C25.5 16.5376 23.0376 19 20 19C16.9624 19 14.5 16.5376 14.5 13.5C14.5 10.4624 16.9624 8 20 8C23.0376 8 25.5 10.4624 25.5 13.5Z",
      stroke: "currentColor",
      strokeWidth: avatarStrokeWidth[size]
    }), /* @__PURE__ */ import_react66.default.createElement("path", {
      fill: "none",
      d: "M10.3433 29.682L9.47 31.254C9.03481 32.0373 9.60125 33 10.4974 33H29.5026C30.3988 33 30.9652 32.0373 30.53 31.254L29.6567 29.682C27.7084 26.175 24.0119 24 20 24C15.9882 24 12.2916 26.175 10.3433 29.682Z",
      stroke: "currentColor",
      strokeWidth: avatarStrokeWidth[size],
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }));
    const avatarBody = customer || !initials ? avatarPath : /* @__PURE__ */ import_react66.default.createElement("text", {
      className: textClassName,
      x: "50%",
      y: "50%",
      dy: verticalOffset,
      fill: "currentColor",
      textAnchor: "middle"
    }, initials);
    const svgMarkup = hasImage ? null : /* @__PURE__ */ import_react66.default.createElement("span", {
      className: styles10.Initials
    }, /* @__PURE__ */ import_react66.default.createElement("svg", {
      className: styles10.Svg,
      viewBox: "0 0 40 40"
    }, avatarBody));
    return /* @__PURE__ */ import_react66.default.createElement("span", {
      "aria-label": label,
      role: label ? "img" : "presentation",
      className
    }, svgMarkup, imageMarkUp);
  }

  // node_modules/@shopify/polaris/build/esm/components/ActionList/ActionList.js
  var import_react94 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/FilterActionsProvider/FilterActionsProvider.js
  var import_react67 = __toESM(require_react());
  var FilterActionsContext = /* @__PURE__ */ (0, import_react67.createContext)(false);

  // node_modules/@shopify/polaris/build/esm/components/ActionList/components/Section/Section.js
  var import_react84 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/ActionList/components/Item/Item.js
  var import_react83 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/ActionList/ActionList.css.js
  var styles11 = {
    "Item": "Polaris-ActionList__Item",
    "default": "Polaris-ActionList--default",
    "active": "Polaris-ActionList--active",
    "destructive": "Polaris-ActionList--destructive",
    "disabled": "Polaris-ActionList--disabled",
    "Prefix": "Polaris-ActionList__Prefix",
    "Suffix": "Polaris-ActionList__Suffix",
    "indented": "Polaris-ActionList--indented",
    "menu": "Polaris-ActionList--menu",
    "Text": "Polaris-ActionList__Text"
  };

  // node_modules/@shopify/polaris/build/esm/components/Badge/Badge.js
  var import_react70 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/within-filter-context.js
  var import_react68 = __toESM(require_react());
  var WithinFilterContext = /* @__PURE__ */ (0, import_react68.createContext)(false);

  // node_modules/@shopify/polaris/build/esm/components/Badge/Badge.css.js
  var styles12 = {
    "Badge": "Polaris-Badge",
    "toneSuccess": "Polaris-Badge--toneSuccess",
    "toneSuccess-strong": "Polaris-Badge__toneSuccess--strong",
    "toneInfo": "Polaris-Badge--toneInfo",
    "toneInfo-strong": "Polaris-Badge__toneInfo--strong",
    "toneAttention": "Polaris-Badge--toneAttention",
    "toneAttention-strong": "Polaris-Badge__toneAttention--strong",
    "toneWarning": "Polaris-Badge--toneWarning",
    "toneWarning-strong": "Polaris-Badge__toneWarning--strong",
    "toneCritical": "Polaris-Badge--toneCritical",
    "toneCritical-strong": "Polaris-Badge__toneCritical--strong",
    "toneNew": "Polaris-Badge--toneNew",
    "toneMagic": "Polaris-Badge--toneMagic",
    "toneRead-only": "Polaris-Badge__toneRead--only",
    "toneEnabled": "Polaris-Badge--toneEnabled",
    "sizeLarge": "Polaris-Badge--sizeLarge",
    "withinFilter": "Polaris-Badge--withinFilter",
    "Icon": "Polaris-Badge__Icon",
    "PipContainer": "Polaris-Badge__PipContainer"
  };

  // node_modules/@shopify/polaris/build/esm/components/Badge/types.js
  var ToneValue = /* @__PURE__ */ function(ToneValue2) {
    ToneValue2["Info"] = "info";
    ToneValue2["Success"] = "success";
    ToneValue2["Warning"] = "warning";
    ToneValue2["Critical"] = "critical";
    ToneValue2["Attention"] = "attention";
    ToneValue2["New"] = "new";
    ToneValue2["Magic"] = "magic";
    ToneValue2["InfoStrong"] = "info-strong";
    ToneValue2["SuccessStrong"] = "success-strong";
    ToneValue2["WarningStrong"] = "warning-strong";
    ToneValue2["CriticalStrong"] = "critical-strong";
    ToneValue2["AttentionStrong"] = "attention-strong";
    ToneValue2["ReadOnly"] = "read-only";
    ToneValue2["Enabled"] = "enabled";
    return ToneValue2;
  }({});
  var ProgressValue = /* @__PURE__ */ function(ProgressValue2) {
    ProgressValue2["Incomplete"] = "incomplete";
    ProgressValue2["PartiallyComplete"] = "partiallyComplete";
    ProgressValue2["Complete"] = "complete";
    return ProgressValue2;
  }({});

  // node_modules/@shopify/polaris/build/esm/components/Badge/utils.js
  function getDefaultAccessibilityLabel(i18n, progress, tone) {
    let progressLabel = "";
    let toneLabel = "";
    if (!progress && !tone) {
      return "";
    }
    switch (progress) {
      case ProgressValue.Incomplete:
        progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.incomplete");
        break;
      case ProgressValue.PartiallyComplete:
        progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.partiallyComplete");
        break;
      case ProgressValue.Complete:
        progressLabel = i18n.translate("Polaris.Badge.PROGRESS_LABELS.complete");
        break;
    }
    switch (tone) {
      case ToneValue.Info:
      case ToneValue.InfoStrong:
        toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.info");
        break;
      case ToneValue.Success:
      case ToneValue.SuccessStrong:
        toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.success");
        break;
      case ToneValue.Warning:
      case ToneValue.WarningStrong:
        toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.warning");
        break;
      case ToneValue.Critical:
      case ToneValue.CriticalStrong:
        toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.critical");
        break;
      case ToneValue.Attention:
      case ToneValue.AttentionStrong:
        toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.attention");
        break;
      case ToneValue.New:
        toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.new");
        break;
      case ToneValue.ReadOnly:
        toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.readOnly");
        break;
      case ToneValue.Enabled:
        toneLabel = i18n.translate("Polaris.Badge.TONE_LABELS.enabled");
        break;
    }
    if (!tone && progress) {
      return progressLabel;
    } else if (tone && !progress) {
      return toneLabel;
    } else {
      return i18n.translate("Polaris.Badge.progressAndTone", {
        progressLabel,
        toneLabel
      });
    }
  }

  // node_modules/@shopify/polaris/build/esm/components/Badge/components/Pip/Pip.js
  var import_react69 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Badge/components/Pip/Pip.css.js
  var styles13 = {
    "Pip": "Polaris-Badge-Pip",
    "toneInfo": "Polaris-Badge-Pip--toneInfo",
    "toneSuccess": "Polaris-Badge-Pip--toneSuccess",
    "toneNew": "Polaris-Badge-Pip--toneNew",
    "toneAttention": "Polaris-Badge-Pip--toneAttention",
    "toneWarning": "Polaris-Badge-Pip--toneWarning",
    "toneCritical": "Polaris-Badge-Pip--toneCritical",
    "progressIncomplete": "Polaris-Badge-Pip--progressIncomplete",
    "progressPartiallyComplete": "Polaris-Badge-Pip--progressPartiallyComplete",
    "progressComplete": "Polaris-Badge-Pip--progressComplete"
  };

  // node_modules/@shopify/polaris/build/esm/components/Badge/components/Pip/Pip.js
  function Pip({
    tone,
    progress = "complete",
    accessibilityLabelOverride
  }) {
    const i18n = useI18n();
    const className = classNames(styles13.Pip, tone && styles13[variationName("tone", tone)], progress && styles13[variationName("progress", progress)]);
    const accessibilityLabel = accessibilityLabelOverride ? accessibilityLabelOverride : getDefaultAccessibilityLabel(i18n, progress, tone);
    return /* @__PURE__ */ import_react69.default.createElement("span", {
      className
    }, /* @__PURE__ */ import_react69.default.createElement(Text, {
      as: "span",
      visuallyHidden: true
    }, accessibilityLabel));
  }

  // node_modules/@shopify/polaris/build/esm/components/Badge/Badge.js
  var DEFAULT_SIZE = "medium";
  var progressIconMap = {
    complete: () => /* @__PURE__ */ import_react70.default.createElement("svg", {
      viewBox: "0 0 20 20"
    }, /* @__PURE__ */ import_react70.default.createElement("path", {
      d: "M6 10c0-.93 0-1.395.102-1.776a3 3 0 0 1 2.121-2.122C8.605 6 9.07 6 10 6c.93 0 1.395 0 1.776.102a3 3 0 0 1 2.122 2.122C14 8.605 14 9.07 14 10s0 1.395-.102 1.777a3 3 0 0 1-2.122 2.12C11.395 14 10.93 14 10 14s-1.395 0-1.777-.102a3 3 0 0 1-2.12-2.121C6 11.395 6 10.93 6 10Z"
    })),
    partiallyComplete: () => /* @__PURE__ */ import_react70.default.createElement("svg", {
      viewBox: "0 0 20 20"
    }, /* @__PURE__ */ import_react70.default.createElement("path", {
      fillRule: "evenodd",
      d: "m8.888 6.014-.017-.018-.02.02c-.253.013-.45.038-.628.086a3 3 0 0 0-2.12 2.122C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.121 2.12C8.605 14 9.07 14 10 14c.93 0 1.395 0 1.776-.102a3 3 0 0 0 2.122-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.122-2.122C11.395 6 10.93 6 10 6c-.475 0-.829 0-1.112.014ZM8.446 7.34a1.75 1.75 0 0 0-1.041.94l4.314 4.315c.443-.2.786-.576.941-1.042L8.446 7.34Zm4.304 2.536L10.124 7.25c.908.001 1.154.013 1.329.06a1.75 1.75 0 0 1 1.237 1.237c.047.175.059.42.06 1.329ZM8.547 12.69c.182.05.442.06 1.453.06h.106L7.25 9.894V10c0 1.01.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237Z"
    })),
    incomplete: () => /* @__PURE__ */ import_react70.default.createElement("svg", {
      viewBox: "0 0 20 20"
    }, /* @__PURE__ */ import_react70.default.createElement("path", {
      fillRule: "evenodd",
      d: "M8.547 12.69c.183.05.443.06 1.453.06s1.27-.01 1.453-.06a1.75 1.75 0 0 0 1.237-1.237c.05-.182.06-.443.06-1.453s-.01-1.27-.06-1.453a1.75 1.75 0 0 0-1.237-1.237c-.182-.05-.443-.06-1.453-.06s-1.27.01-1.453.06A1.75 1.75 0 0 0 7.31 8.547c-.05.183-.06.443-.06 1.453s.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237ZM6.102 8.224C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.122 2.12C8.605 14 9.07 14 10 14s1.395 0 1.777-.102a3 3 0 0 0 2.12-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.121-2.122C11.395 6 10.93 6 10 6c-.93 0-1.395 0-1.776.102a3 3 0 0 0-2.122 2.122Z"
    }))
  };
  function Badge({
    children,
    tone,
    progress,
    icon,
    size = DEFAULT_SIZE,
    toneAndProgressLabelOverride
  }) {
    const i18n = useI18n();
    const withinFilter = (0, import_react70.useContext)(WithinFilterContext);
    const className = classNames(styles12.Badge, tone && styles12[variationName("tone", tone)], size && size !== DEFAULT_SIZE && styles12[variationName("size", size)], withinFilter && styles12.withinFilter);
    const accessibilityLabel = toneAndProgressLabelOverride ? toneAndProgressLabelOverride : getDefaultAccessibilityLabel(i18n, progress, tone);
    let accessibilityMarkup = Boolean(accessibilityLabel) && /* @__PURE__ */ import_react70.default.createElement(Text, {
      as: "span",
      visuallyHidden: true
    }, accessibilityLabel);
    if (progress && !icon) {
      accessibilityMarkup = /* @__PURE__ */ import_react70.default.createElement("span", {
        className: styles12.Icon
      }, /* @__PURE__ */ import_react70.default.createElement(Icon, {
        accessibilityLabel,
        source: progressIconMap[progress]
      }));
    }
    return /* @__PURE__ */ import_react70.default.createElement("span", {
      className
    }, accessibilityMarkup, icon && /* @__PURE__ */ import_react70.default.createElement("span", {
      className: styles12.Icon
    }, /* @__PURE__ */ import_react70.default.createElement(Icon, {
      source: icon
    })), children && /* @__PURE__ */ import_react70.default.createElement(Text, {
      as: "span",
      variant: "bodySm",
      fontWeight: tone === "new" ? "medium" : void 0
    }, children));
  }
  Badge.Pip = Pip;

  // node_modules/@shopify/polaris/build/esm/components/Tooltip/Tooltip.js
  var import_react82 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/use-toggle.js
  var import_react71 = __toESM(require_react());
  function useToggle(initialState) {
    const [value, setState] = (0, import_react71.useState)(initialState);
    return {
      value,
      toggle: (0, import_react71.useCallback)(() => setState((state) => !state), []),
      setTrue: (0, import_react71.useCallback)(() => setState(true), []),
      setFalse: (0, import_react71.useCallback)(() => setState(false), [])
    };
  }

  // node_modules/@shopify/polaris/build/esm/components/Tooltip/Tooltip.css.js
  var styles14 = {
    "TooltipContainer": "Polaris-Tooltip__TooltipContainer",
    "HasUnderline": "Polaris-Tooltip__HasUnderline"
  };

  // node_modules/@shopify/polaris/build/esm/utilities/ephemeral-presence-manager/hooks.js
  var import_react72 = __toESM(require_react());
  function useEphemeralPresenceManager() {
    const ephemeralPresenceManager = (0, import_react72.useContext)(EphemeralPresenceManagerContext);
    if (!ephemeralPresenceManager) {
      throw new Error("No ephemeral presence manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
    }
    return ephemeralPresenceManager;
  }

  // node_modules/@shopify/polaris/build/esm/components/Portal/Portal.js
  var import_react74 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/@shopify/polaris/build/esm/utilities/portals/hooks.js
  var import_react73 = __toESM(require_react());
  function usePortalsManager() {
    const portalsManager = (0, import_react73.useContext)(PortalsManagerContext);
    if (!portalsManager) {
      throw new Error("No portals manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.");
    }
    return portalsManager;
  }

  // node_modules/@shopify/polaris/build/esm/components/Portal/Portal.js
  function Portal({
    children,
    idPrefix = "",
    onPortalCreated = noop2
  }) {
    const themeName = useThemeName();
    const {
      container
    } = usePortalsManager();
    const uniqueId = (0, import_react74.useId)();
    const portalId = idPrefix !== "" ? `${idPrefix}-${uniqueId}` : uniqueId;
    (0, import_react74.useEffect)(() => {
      onPortalCreated();
    }, [onPortalCreated]);
    return container ? /* @__PURE__ */ (0, import_react_dom.createPortal)(/* @__PURE__ */ import_react74.default.createElement(ThemeProvider, {
      theme: isThemeNameLocal(themeName) ? themeName : themeNameDefault,
      "data-portal-id": portalId
    }, children), container) : null;
  }
  function noop2() {
  }

  // node_modules/@shopify/polaris/build/esm/components/Tooltip/components/TooltipOverlay/TooltipOverlay.js
  var import_react81 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Tooltip/components/TooltipOverlay/TooltipOverlay.css.js
  var styles15 = {
    "TooltipOverlay": "Polaris-Tooltip-TooltipOverlay",
    "Tail": "Polaris-Tooltip-TooltipOverlay__Tail",
    "positionedAbove": "Polaris-Tooltip-TooltipOverlay--positionedAbove",
    "measuring": "Polaris-Tooltip-TooltipOverlay--measuring",
    "measured": "Polaris-Tooltip-TooltipOverlay--measured",
    "instant": "Polaris-Tooltip-TooltipOverlay--instant",
    "Content": "Polaris-Tooltip-TooltipOverlay__Content",
    "default": "Polaris-Tooltip-TooltipOverlay--default",
    "wide": "Polaris-Tooltip-TooltipOverlay--wide"
  };

  // node_modules/@shopify/polaris/build/esm/components/PositionedOverlay/PositionedOverlay.js
  var import_react80 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/PositionedOverlay/utilities/math.js
  function calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset = 0) {
    const activatorTop = activatorRect.top;
    const activatorBottom = activatorTop + activatorRect.height;
    const spaceAbove = activatorRect.top - topBarOffset;
    const spaceBelow = containerRect.height - activatorRect.top - activatorRect.height;
    const desiredHeight = overlayRect.height;
    const verticalMargins = overlayMargins.activator + overlayMargins.container;
    const minimumSpaceToScroll = overlayMargins.container;
    const distanceToTopScroll = activatorRect.top - Math.max(scrollableContainerRect.top, 0);
    const distanceToBottomScroll = containerRect.top + Math.min(containerRect.height, scrollableContainerRect.top + scrollableContainerRect.height) - (activatorRect.top + activatorRect.height);
    const enoughSpaceFromTopScroll = distanceToTopScroll >= minimumSpaceToScroll;
    const enoughSpaceFromBottomScroll = distanceToBottomScroll >= minimumSpaceToScroll;
    const heightIfAbove = Math.min(spaceAbove, desiredHeight);
    const heightIfBelow = Math.min(spaceBelow, desiredHeight);
    const heightIfAboveCover = Math.min(spaceAbove + activatorRect.height, desiredHeight);
    const heightIfBelowCover = Math.min(spaceBelow + activatorRect.height, desiredHeight);
    const containerRectTop = fixed ? 0 : containerRect.top;
    const positionIfAbove = {
      height: heightIfAbove - verticalMargins,
      top: activatorTop + containerRectTop - heightIfAbove,
      positioning: "above"
    };
    const positionIfBelow = {
      height: heightIfBelow - verticalMargins,
      top: activatorBottom + containerRectTop,
      positioning: "below"
    };
    const positionIfCoverBelow = {
      height: heightIfBelowCover - verticalMargins,
      top: activatorTop + containerRectTop,
      positioning: "cover"
    };
    const positionIfCoverAbove = {
      height: heightIfAboveCover - verticalMargins,
      top: activatorTop + containerRectTop - heightIfAbove + activatorRect.height + verticalMargins,
      positioning: "cover"
    };
    if (preferredPosition === "above") {
      return (enoughSpaceFromTopScroll || distanceToTopScroll >= distanceToBottomScroll && !enoughSpaceFromBottomScroll) && (spaceAbove > desiredHeight || spaceAbove > spaceBelow) ? positionIfAbove : positionIfBelow;
    }
    if (preferredPosition === "below") {
      return (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow > desiredHeight || spaceBelow > spaceAbove) ? positionIfBelow : positionIfAbove;
    }
    if (preferredPosition === "cover") {
      return (enoughSpaceFromBottomScroll || distanceToBottomScroll >= distanceToTopScroll && !enoughSpaceFromTopScroll) && (spaceBelow + activatorRect.height > desiredHeight || spaceBelow > spaceAbove) ? positionIfCoverBelow : positionIfCoverAbove;
    }
    if (enoughSpaceFromTopScroll && enoughSpaceFromBottomScroll) {
      return spaceAbove > spaceBelow ? positionIfAbove : positionIfBelow;
    }
    return distanceToTopScroll > minimumSpaceToScroll ? positionIfAbove : positionIfBelow;
  }
  function calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment) {
    const maximum = containerRect.width - overlayRect.width;
    if (preferredAlignment === "left") {
      return Math.min(maximum, Math.max(0, activatorRect.left - overlayMargins.horizontal));
    } else if (preferredAlignment === "right") {
      const activatorRight = containerRect.width - (activatorRect.left + activatorRect.width);
      return Math.min(maximum, Math.max(0, activatorRight - overlayMargins.horizontal));
    }
    return Math.min(maximum, Math.max(0, activatorRect.center.x - overlayRect.width / 2));
  }
  function rectIsOutsideOfRect(inner, outer) {
    const {
      center
    } = inner;
    return center.y < outer.top || center.y > outer.top + outer.height;
  }
  function intersectionWithViewport(rect, viewport = windowRect()) {
    const top = Math.max(rect.top, 0);
    const left = Math.max(rect.left, 0);
    const bottom = Math.min(rect.top + rect.height, viewport.height);
    const right = Math.min(rect.left + rect.width, viewport.width);
    return new Rect({
      top,
      left,
      height: bottom - top,
      width: right - left
    });
  }
  function windowRect(node) {
    const document2 = node?.ownerDocument || globalThis.document;
    const window2 = document2.defaultView || globalThis.window;
    return new Rect({
      top: window2.scrollY,
      left: window2.scrollX,
      height: window2.innerHeight,
      width: document2.body.clientWidth
    });
  }

  // node_modules/@shopify/polaris/build/esm/components/PositionedOverlay/PositionedOverlay.css.js
  var styles16 = {
    "PositionedOverlay": "Polaris-PositionedOverlay",
    "fixed": "Polaris-PositionedOverlay--fixed",
    "calculating": "Polaris-PositionedOverlay--calculating",
    "preventInteraction": "Polaris-PositionedOverlay--preventInteraction"
  };

  // node_modules/@shopify/polaris/build/esm/components/Scrollable/Scrollable.js
  var import_react79 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/use-lazy-ref.js
  var import_react75 = __toESM(require_react());
  var UNIQUE_IDENTIFIER = Symbol("unique_identifier");
  function useLazyRef(initialValue) {
    const lazyRef = (0, import_react75.useRef)(UNIQUE_IDENTIFIER);
    if (lazyRef.current === UNIQUE_IDENTIFIER) {
      lazyRef.current = initialValue();
    }
    return lazyRef;
  }

  // node_modules/@shopify/polaris/build/esm/utilities/use-component-did-mount.js
  var import_react76 = __toESM(require_react());
  function useComponentDidMount(callback) {
    const isAfterInitialMount = useIsAfterInitialMount();
    const hasInvokedLifeCycle = (0, import_react76.useRef)(false);
    if (isAfterInitialMount && !hasInvokedLifeCycle.current) {
      hasInvokedLifeCycle.current = true;
      return callback();
    }
  }

  // node_modules/@shopify/polaris/build/esm/components/Scrollable/context.js
  var import_react77 = __toESM(require_react());
  var ScrollableContext = /* @__PURE__ */ (0, import_react77.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/components/Scrollable/Scrollable.css.js
  var styles17 = {
    "Scrollable": "Polaris-Scrollable",
    "hasTopShadow": "Polaris-Scrollable--hasTopShadow",
    "hasBottomShadow": "Polaris-Scrollable--hasBottomShadow",
    "horizontal": "Polaris-Scrollable--horizontal",
    "vertical": "Polaris-Scrollable--vertical",
    "scrollbarWidthThin": "Polaris-Scrollable--scrollbarWidthThin",
    "scrollbarWidthNone": "Polaris-Scrollable--scrollbarWidthNone",
    "scrollbarWidthAuto": "Polaris-Scrollable--scrollbarWidthAuto",
    "scrollbarGutterStable": "Polaris-Scrollable--scrollbarGutterStable",
    "scrollbarGutterStableboth-edges": "Polaris-Scrollable__scrollbarGutterStableboth--edges"
  };

  // node_modules/@shopify/polaris/build/esm/components/Scrollable/components/ScrollTo/ScrollTo.js
  var import_react78 = __toESM(require_react());
  function ScrollTo() {
    const anchorNode = (0, import_react78.useRef)(null);
    const scrollToPosition = (0, import_react78.useContext)(ScrollableContext);
    (0, import_react78.useEffect)(() => {
      if (!scrollToPosition || !anchorNode.current) {
        return;
      }
      scrollToPosition(anchorNode.current.offsetTop);
    }, [scrollToPosition]);
    const id = (0, import_react78.useId)();
    return /* @__PURE__ */ import_react78.default.createElement("a", {
      id,
      ref: anchorNode
    });
  }

  // node_modules/@shopify/polaris/build/esm/components/Scrollable/Scrollable.js
  var MAX_SCROLL_HINT_DISTANCE = 100;
  var LOW_RES_BUFFER = 2;
  var ScrollableComponent = /* @__PURE__ */ (0, import_react79.forwardRef)(({
    children,
    className,
    horizontal = true,
    vertical = true,
    shadow: shadow2,
    hint,
    focusable,
    scrollbarWidth = "thin",
    scrollbarGutter,
    onScrolledToBottom,
    ...rest
  }, forwardedRef) => {
    const [topShadow, setTopShadow] = (0, import_react79.useState)(false);
    const [bottomShadow, setBottomShadow] = (0, import_react79.useState)(false);
    const stickyManager = useLazyRef(() => new StickyManager());
    const scrollArea = (0, import_react79.useRef)(null);
    const scrollTo = (0, import_react79.useCallback)((scrollY, options = {}) => {
      const optionsBehavior = options.behavior || "smooth";
      const behavior = prefersReducedMotion() ? "auto" : optionsBehavior;
      scrollArea.current?.scrollTo({
        top: scrollY,
        behavior
      });
    }, []);
    const defaultRef = (0, import_react79.useRef)();
    (0, import_react79.useImperativeHandle)(forwardedRef || defaultRef, () => ({
      scrollTo
    }));
    const handleScroll = (0, import_react79.useCallback)(() => {
      const currentScrollArea = scrollArea.current;
      if (!currentScrollArea) {
        return;
      }
      requestAnimationFrame(() => {
        const {
          scrollTop,
          clientHeight,
          scrollHeight
        } = currentScrollArea;
        const canScroll = Boolean(scrollHeight > clientHeight);
        const isBelowTopOfScroll = Boolean(scrollTop > 0);
        const isAtBottomOfScroll = Boolean(scrollTop + clientHeight >= scrollHeight - LOW_RES_BUFFER);
        setTopShadow(isBelowTopOfScroll);
        setBottomShadow(!isAtBottomOfScroll);
        if (canScroll && isAtBottomOfScroll && onScrolledToBottom) {
          onScrolledToBottom();
        }
      });
    }, [onScrolledToBottom]);
    useComponentDidMount(() => {
      handleScroll();
      if (hint) {
        requestAnimationFrame(() => performScrollHint(scrollArea.current));
      }
    });
    (0, import_react79.useEffect)(() => {
      const currentScrollArea = scrollArea.current;
      if (!currentScrollArea) {
        return;
      }
      const handleResize = debounce(handleScroll, 50, {
        trailing: true
      });
      stickyManager.current?.setContainer(currentScrollArea);
      currentScrollArea.addEventListener("scroll", handleScroll);
      globalThis.addEventListener("resize", handleResize);
      return () => {
        currentScrollArea.removeEventListener("scroll", handleScroll);
        globalThis.removeEventListener("resize", handleResize);
      };
    }, [stickyManager, handleScroll]);
    const finalClassName = classNames(className, styles17.Scrollable, vertical && styles17.vertical, horizontal && styles17.horizontal, shadow2 && topShadow && styles17.hasTopShadow, shadow2 && bottomShadow && styles17.hasBottomShadow, scrollbarWidth && styles17[variationName("scrollbarWidth", scrollbarWidth)], scrollbarGutter && styles17[variationName("scrollbarGutter", scrollbarGutter.replace(" ", ""))]);
    return /* @__PURE__ */ import_react79.default.createElement(ScrollableContext.Provider, {
      value: scrollTo
    }, /* @__PURE__ */ import_react79.default.createElement(StickyManagerContext.Provider, {
      value: stickyManager.current
    }, /* @__PURE__ */ import_react79.default.createElement("div", Object.assign({
      className: finalClassName
    }, scrollable.props, rest, {
      ref: scrollArea,
      tabIndex: focusable ? 0 : void 0
    }), children)));
  });
  ScrollableComponent.displayName = "Scrollable";
  function prefersReducedMotion() {
    try {
      return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
    } catch (err) {
      return false;
    }
  }
  function performScrollHint(elem) {
    if (!elem || prefersReducedMotion()) {
      return;
    }
    const scrollableDistance = elem.scrollHeight - elem.clientHeight;
    const distanceToPeek = Math.min(MAX_SCROLL_HINT_DISTANCE, scrollableDistance) - LOW_RES_BUFFER;
    const goBackToTop = () => {
      requestAnimationFrame(() => {
        if (elem.scrollTop >= distanceToPeek) {
          elem.removeEventListener("scroll", goBackToTop);
          elem.scrollTo({
            top: 0,
            behavior: "smooth"
          });
        }
      });
    };
    elem.addEventListener("scroll", goBackToTop);
    elem.scrollTo({
      top: MAX_SCROLL_HINT_DISTANCE,
      behavior: "smooth"
    });
  }
  var forNode = (node) => {
    const closestElement = node.closest(scrollable.selector);
    return closestElement instanceof HTMLElement ? closestElement : document;
  };
  var Scrollable = ScrollableComponent;
  Scrollable.ScrollTo = ScrollTo;
  Scrollable.forNode = forNode;

  // node_modules/@shopify/polaris/build/esm/components/PositionedOverlay/PositionedOverlay.js
  var OBSERVER_CONFIG = {
    childList: true,
    subtree: true,
    characterData: true,
    attributeFilter: ["style"]
  };
  var PositionedOverlay = class extends import_react80.PureComponent {
    constructor(props) {
      super(props);
      this.state = {
        measuring: true,
        activatorRect: getRectForNode(this.props.activator),
        right: void 0,
        left: void 0,
        top: 0,
        height: 0,
        width: null,
        positioning: "below",
        zIndex: null,
        outsideScrollableContainer: false,
        lockPosition: false,
        chevronOffset: 0
      };
      this.overlay = null;
      this.scrollableContainers = [];
      this.overlayDetails = () => {
        const {
          measuring,
          left,
          right,
          positioning,
          height,
          activatorRect,
          chevronOffset
        } = this.state;
        return {
          measuring,
          left,
          right,
          desiredHeight: height,
          positioning,
          activatorRect,
          chevronOffset
        };
      };
      this.setOverlay = (node) => {
        this.overlay = node;
      };
      this.setScrollableContainers = () => {
        const containers = [];
        let scrollableContainer = Scrollable.forNode(this.props.activator);
        if (scrollableContainer) {
          containers.push(scrollableContainer);
          while (scrollableContainer?.parentElement) {
            scrollableContainer = Scrollable.forNode(scrollableContainer.parentElement);
            containers.push(scrollableContainer);
          }
        }
        this.scrollableContainers = containers;
      };
      this.registerScrollHandlers = () => {
        this.scrollableContainers.forEach((node) => {
          node.addEventListener("scroll", this.handleMeasurement);
        });
      };
      this.unregisterScrollHandlers = () => {
        this.scrollableContainers.forEach((node) => {
          node.removeEventListener("scroll", this.handleMeasurement);
        });
      };
      this.handleMeasurement = () => {
        const {
          lockPosition,
          top
        } = this.state;
        this.observer.disconnect();
        this.setState(({
          left,
          top: top2,
          right
        }) => ({
          left,
          right,
          top: top2,
          height: 0,
          positioning: "below",
          measuring: true
        }), () => {
          if (this.overlay == null || this.firstScrollableContainer == null) {
            return;
          }
          const {
            activator,
            preferredPosition = "below",
            preferredAlignment = "center",
            onScrollOut,
            fullWidth,
            fixed,
            preferInputActivator = true
          } = this.props;
          const document2 = activator.ownerDocument;
          const preferredActivator = preferInputActivator ? activator.querySelector("input") || activator : activator;
          const activatorRect = getRectForNode(preferredActivator);
          const currentOverlayRect = getRectForNode(this.overlay);
          const scrollableElement = isDocument2(this.firstScrollableContainer) ? document2.body : this.firstScrollableContainer;
          const scrollableContainerRect = getRectForNode(scrollableElement);
          const overlayRect = fullWidth || preferredPosition === "cover" ? new Rect({
            ...currentOverlayRect,
            width: activatorRect.width
          }) : currentOverlayRect;
          if (scrollableElement === document2.body) {
            scrollableContainerRect.height = document2.body.scrollHeight;
          }
          let topBarOffset = 0;
          const topBarElement = scrollableElement.querySelector(`${dataPolarisTopBar.selector}`);
          if (topBarElement) {
            topBarOffset = topBarElement.clientHeight;
          }
          let overlayMargins = {
            activator: 0,
            container: 0,
            horizontal: 0
          };
          if (this.overlay.firstElementChild) {
            const nodeMargins = getMarginsForNode(this.overlay.firstElementChild);
            overlayMargins = nodeMargins;
          }
          const containerRect = windowRect(activator);
          const zIndexForLayer = getZIndexForLayerFromNode(activator);
          const zIndex = zIndexForLayer == null ? zIndexForLayer : zIndexForLayer + 1;
          const verticalPosition = calculateVerticalPosition(activatorRect, overlayRect, overlayMargins, scrollableContainerRect, containerRect, preferredPosition, fixed, topBarOffset);
          const horizontalPosition = calculateHorizontalPosition(activatorRect, overlayRect, containerRect, overlayMargins, preferredAlignment);
          const chevronOffset = activatorRect.center.x - horizontalPosition + overlayMargins.horizontal * 2;
          this.setState({
            measuring: false,
            activatorRect: getRectForNode(activator),
            left: preferredAlignment !== "right" ? horizontalPosition : void 0,
            right: preferredAlignment === "right" ? horizontalPosition : void 0,
            top: lockPosition ? top : verticalPosition.top,
            lockPosition: Boolean(fixed),
            height: verticalPosition.height || 0,
            width: fullWidth || preferredPosition === "cover" ? overlayRect.width : null,
            positioning: verticalPosition.positioning,
            outsideScrollableContainer: onScrollOut != null && rectIsOutsideOfRect(activatorRect, intersectionWithViewport(scrollableContainerRect, containerRect)),
            zIndex,
            chevronOffset
          }, () => {
            if (!this.overlay)
              return;
            this.observer.observe(this.overlay, OBSERVER_CONFIG);
            this.observer.observe(activator, OBSERVER_CONFIG);
          });
        });
      };
      this.observer = new MutationObserver(this.handleMeasurement);
    }
    componentDidMount() {
      this.setScrollableContainers();
      if (this.scrollableContainers.length && !this.props.fixed) {
        this.registerScrollHandlers();
      }
      this.handleMeasurement();
    }
    componentWillUnmount() {
      this.observer.disconnect();
      if (this.scrollableContainers.length && !this.props.fixed) {
        this.unregisterScrollHandlers();
      }
    }
    componentDidUpdate() {
      const {
        outsideScrollableContainer,
        top
      } = this.state;
      const {
        onScrollOut,
        active
      } = this.props;
      if (active && onScrollOut != null && top !== 0 && outsideScrollableContainer) {
        onScrollOut();
      }
    }
    render() {
      const {
        left,
        right,
        top,
        zIndex,
        width
      } = this.state;
      const {
        render,
        fixed,
        preventInteraction,
        classNames: propClassNames,
        zIndexOverride
      } = this.props;
      const style = {
        top: top == null || isNaN(top) ? void 0 : top,
        left: left == null || isNaN(left) ? void 0 : left,
        right: right == null || isNaN(right) ? void 0 : right,
        width: width == null || isNaN(width) ? void 0 : width,
        zIndex: zIndexOverride || zIndex || void 0
      };
      const className = classNames(styles16.PositionedOverlay, fixed && styles16.fixed, preventInteraction && styles16.preventInteraction, propClassNames);
      return /* @__PURE__ */ import_react80.default.createElement("div", {
        className,
        style,
        ref: this.setOverlay
      }, /* @__PURE__ */ import_react80.default.createElement(EventListener2, {
        event: "resize",
        handler: this.handleMeasurement,
        window: this.overlay?.ownerDocument.defaultView
      }), render(this.overlayDetails()));
    }
    get firstScrollableContainer() {
      return this.scrollableContainers[0] ?? null;
    }
    forceUpdatePosition() {
      requestAnimationFrame(this.handleMeasurement);
    }
  };
  function getMarginsForNode(node) {
    const window2 = node.ownerDocument.defaultView || globalThis.window;
    const nodeStyles = window2.getComputedStyle(node);
    return {
      activator: parseFloat(nodeStyles.marginTop || "0"),
      container: parseFloat(nodeStyles.marginBottom || "0"),
      horizontal: parseFloat(nodeStyles.marginLeft || "0")
    };
  }
  function getZIndexForLayerFromNode(node) {
    const layerNode = node.closest(layer.selector) || node.ownerDocument.body;
    const zIndex = layerNode === node.ownerDocument.body ? "auto" : parseInt(window.getComputedStyle(layerNode).zIndex || "0", 10);
    return zIndex === "auto" || isNaN(zIndex) ? null : zIndex;
  }
  function isDocument2(node) {
    return node.ownerDocument === null;
  }

  // node_modules/@shopify/polaris/build/esm/components/Tooltip/components/TooltipOverlay/TooltipOverlay.js
  var tailUpPaths = /* @__PURE__ */ import_react81.default.createElement(import_react81.default.Fragment, null, /* @__PURE__ */ import_react81.default.createElement("path", {
    d: "M18.829 8.171 11.862.921A3 3 0 0 0 7.619.838L0 8.171h1.442l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557h1.387Z",
    fill: "var(--p-color-tooltip-tail-up-border)"
  }), /* @__PURE__ */ import_react81.default.createElement("path", {
    d: "M17.442 10.171h-16v-2l6.87-6.612a2 2 0 0 1 2.83.055l6.3 6.557v2Z",
    fill: "var(--p-color-bg-surface)"
  }));
  var tailDownPaths = /* @__PURE__ */ import_react81.default.createElement(import_react81.default.Fragment, null, /* @__PURE__ */ import_react81.default.createElement("path", {
    d: "m0 2 6.967 7.25a3 3 0 0 0 4.243.083L18.829 2h-1.442l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2H0Z",
    fill: "var(--p-color-tooltip-tail-down-border)"
  }), /* @__PURE__ */ import_react81.default.createElement("path", {
    d: "M1.387 0h16v2l-6.87 6.612a2 2 0 0 1-2.83-.055L1.387 2V0Z",
    fill: "var(--p-color-bg-surface)"
  }));
  function TooltipOverlay({
    active,
    activator,
    preferredPosition = "above",
    preventInteraction,
    id,
    children,
    accessibilityLabel,
    width,
    padding,
    borderRadius,
    zIndexOverride,
    instant
  }) {
    const i18n = useI18n();
    const markup = active ? /* @__PURE__ */ import_react81.default.createElement(PositionedOverlay, {
      active,
      activator,
      preferredPosition,
      preventInteraction,
      render: renderTooltip,
      zIndexOverride
    }) : null;
    return markup;
    function renderTooltip(overlayDetails) {
      const {
        measuring,
        desiredHeight,
        positioning,
        chevronOffset
      } = overlayDetails;
      const containerClassName = classNames(styles15.TooltipOverlay, measuring && styles15.measuring, !measuring && styles15.measured, instant && styles15.instant, positioning === "above" && styles15.positionedAbove);
      const contentClassName = classNames(styles15.Content, width && styles15[width]);
      const contentStyles = measuring ? void 0 : {
        minHeight: desiredHeight
      };
      const style = {
        "--pc-tooltip-chevron-x-pos": `${chevronOffset}px`,
        "--pc-tooltip-border-radius": borderRadius ? `var(--p-border-radius-${borderRadius})` : void 0,
        "--pc-tooltip-padding": padding && padding === "default" ? "var(--p-space-100) var(--p-space-200)" : `var(--p-space-${padding})`
      };
      return /* @__PURE__ */ import_react81.default.createElement("div", Object.assign({
        style,
        className: containerClassName
      }, layer.props), /* @__PURE__ */ import_react81.default.createElement("svg", {
        className: styles15.Tail,
        width: "19",
        height: "11",
        fill: "none"
      }, positioning === "above" ? tailDownPaths : tailUpPaths), /* @__PURE__ */ import_react81.default.createElement("div", {
        id,
        role: "tooltip",
        className: contentClassName,
        style: {
          ...contentStyles,
          ...style
        },
        "aria-label": accessibilityLabel ? i18n.translate("Polaris.TooltipOverlay.accessibilityLabel", {
          label: accessibilityLabel
        }) : void 0
      }, children));
    }
  }

  // node_modules/@shopify/polaris/build/esm/components/Tooltip/Tooltip.js
  var HOVER_OUT_TIMEOUT = 150;
  function Tooltip({
    children,
    content,
    dismissOnMouseOut,
    active: originalActive,
    hoverDelay,
    preferredPosition = "above",
    activatorWrapper = "span",
    accessibilityLabel,
    width = "default",
    padding = "default",
    borderRadius: borderRadiusProp,
    zIndexOverride,
    hasUnderline,
    persistOnClick,
    onOpen,
    onClose
  }) {
    const borderRadius = borderRadiusProp || "200";
    const WrapperComponent = activatorWrapper;
    const {
      value: active,
      setTrue: setActiveTrue,
      setFalse: handleBlur
    } = useToggle(Boolean(originalActive));
    const {
      value: persist,
      toggle: togglePersisting
    } = useToggle(Boolean(originalActive) && Boolean(persistOnClick));
    const [activatorNode, setActivatorNode] = (0, import_react82.useState)(null);
    const {
      presenceList,
      addPresence,
      removePresence
    } = useEphemeralPresenceManager();
    const id = (0, import_react82.useId)();
    const activatorContainer = (0, import_react82.useRef)(null);
    const mouseEntered = (0, import_react82.useRef)(false);
    const [shouldAnimate, setShouldAnimate] = (0, import_react82.useState)(Boolean(!originalActive));
    const hoverDelayTimeout = (0, import_react82.useRef)(null);
    const hoverOutTimeout = (0, import_react82.useRef)(null);
    const handleFocus = (0, import_react82.useCallback)(() => {
      if (originalActive !== false) {
        setActiveTrue();
      }
    }, [originalActive, setActiveTrue]);
    (0, import_react82.useEffect)(() => {
      const firstFocusable = activatorContainer.current ? findFirstFocusableNode(activatorContainer.current) : null;
      const accessibilityNode = firstFocusable || activatorContainer.current;
      if (!accessibilityNode)
        return;
      accessibilityNode.tabIndex = 0;
      accessibilityNode.setAttribute("aria-describedby", id);
      accessibilityNode.setAttribute("data-polaris-tooltip-activator", "true");
    }, [id, children]);
    (0, import_react82.useEffect)(() => {
      return () => {
        if (hoverDelayTimeout.current) {
          clearTimeout(hoverDelayTimeout.current);
        }
        if (hoverOutTimeout.current) {
          clearTimeout(hoverOutTimeout.current);
        }
      };
    }, []);
    const handleOpen = (0, import_react82.useCallback)(() => {
      setShouldAnimate(!presenceList.tooltip && !active);
      onOpen?.();
      addPresence("tooltip");
    }, [addPresence, presenceList.tooltip, onOpen, active]);
    const handleClose = (0, import_react82.useCallback)(() => {
      onClose?.();
      setShouldAnimate(false);
      hoverOutTimeout.current = setTimeout(() => {
        removePresence("tooltip");
      }, HOVER_OUT_TIMEOUT);
    }, [removePresence, onClose]);
    const handleKeyUp = (0, import_react82.useCallback)((event) => {
      if (event.key !== "Escape")
        return;
      handleClose?.();
      handleBlur();
      persistOnClick && togglePersisting();
    }, [handleBlur, handleClose, persistOnClick, togglePersisting]);
    (0, import_react82.useEffect)(() => {
      if (originalActive === false && active) {
        handleClose();
        handleBlur();
      }
    }, [originalActive, active, handleClose, handleBlur]);
    const portal2 = activatorNode ? /* @__PURE__ */ import_react82.default.createElement(Portal, {
      idPrefix: "tooltip"
    }, /* @__PURE__ */ import_react82.default.createElement(TooltipOverlay, {
      id,
      preferredPosition,
      activator: activatorNode,
      active,
      accessibilityLabel,
      onClose: noop3,
      preventInteraction: dismissOnMouseOut,
      width,
      padding,
      borderRadius,
      zIndexOverride,
      instant: !shouldAnimate
    }, /* @__PURE__ */ import_react82.default.createElement(Text, {
      as: "span",
      variant: "bodyMd"
    }, content))) : null;
    const wrapperClassNames = classNames(activatorWrapper === "div" && styles14.TooltipContainer, hasUnderline && styles14.HasUnderline);
    return /* @__PURE__ */ import_react82.default.createElement(WrapperComponent, {
      onFocus: () => {
        handleOpen();
        handleFocus();
      },
      onBlur: () => {
        handleClose();
        handleBlur();
        if (persistOnClick) {
          togglePersisting();
        }
      },
      onMouseLeave: handleMouseLeave,
      onMouseOver: handleMouseEnterFix,
      onMouseDown: persistOnClick ? togglePersisting : void 0,
      ref: setActivator,
      onKeyUp: handleKeyUp,
      className: wrapperClassNames
    }, children, portal2);
    function setActivator(node) {
      const activatorContainerRef = activatorContainer;
      if (node == null) {
        activatorContainerRef.current = null;
        setActivatorNode(null);
        return;
      }
      if (node.firstElementChild) {
        setActivatorNode(node.firstElementChild);
      }
      activatorContainerRef.current = node;
    }
    function handleMouseEnter() {
      mouseEntered.current = true;
      if (hoverDelay && !presenceList.tooltip) {
        hoverDelayTimeout.current = setTimeout(() => {
          handleOpen();
          handleFocus();
        }, hoverDelay);
      } else {
        handleOpen();
        handleFocus();
      }
    }
    function handleMouseLeave() {
      if (hoverDelayTimeout.current) {
        clearTimeout(hoverDelayTimeout.current);
        hoverDelayTimeout.current = null;
      }
      mouseEntered.current = false;
      handleClose();
      if (!persist) {
        handleBlur();
      }
    }
    function handleMouseEnterFix() {
      !mouseEntered.current && handleMouseEnter();
    }
  }
  function noop3() {
  }

  // node_modules/@shopify/polaris/build/esm/components/ActionList/components/Item/Item.js
  function Item({
    id,
    badge,
    content,
    accessibilityLabel,
    helpText,
    url,
    onAction,
    onMouseEnter,
    icon,
    image,
    prefix,
    suffix,
    disabled,
    external,
    destructive,
    ellipsis,
    truncate,
    active,
    role,
    variant = "default"
  }) {
    const className = classNames(styles11.Item, disabled && styles11.disabled, destructive && styles11.destructive, active && styles11.active, variant === "default" && styles11.default, variant === "indented" && styles11.indented, variant === "menu" && styles11.menu);
    let prefixMarkup = null;
    if (prefix) {
      prefixMarkup = /* @__PURE__ */ import_react83.default.createElement("span", {
        className: styles11.Prefix
      }, prefix);
    } else if (icon) {
      prefixMarkup = /* @__PURE__ */ import_react83.default.createElement("span", {
        className: styles11.Prefix
      }, /* @__PURE__ */ import_react83.default.createElement(Icon, {
        source: icon
      }));
    } else if (image) {
      prefixMarkup = /* @__PURE__ */ import_react83.default.createElement("span", {
        role: "presentation",
        className: styles11.Prefix,
        style: {
          backgroundImage: `url(${image}`
        }
      });
    }
    let contentText = content || "";
    if (truncate && content) {
      contentText = /* @__PURE__ */ import_react83.default.createElement(TruncateText, null, content);
    } else if (ellipsis) {
      contentText = `${content}\u2026`;
    }
    const contentMarkup = helpText ? /* @__PURE__ */ import_react83.default.createElement(import_react83.default.Fragment, null, /* @__PURE__ */ import_react83.default.createElement(Box, null, contentText), /* @__PURE__ */ import_react83.default.createElement(Text, {
      as: "span",
      variant: "bodySm",
      tone: active || disabled ? void 0 : "subdued"
    }, helpText)) : /* @__PURE__ */ import_react83.default.createElement(Text, {
      as: "span",
      variant: "bodyMd",
      fontWeight: active ? "semibold" : "regular"
    }, contentText);
    const badgeMarkup = badge && /* @__PURE__ */ import_react83.default.createElement("span", {
      className: styles11.Suffix
    }, /* @__PURE__ */ import_react83.default.createElement(Badge, {
      tone: badge.tone
    }, badge.content));
    const suffixMarkup = suffix && /* @__PURE__ */ import_react83.default.createElement(Box, null, /* @__PURE__ */ import_react83.default.createElement("span", {
      className: styles11.Suffix
    }, suffix));
    const textMarkup = /* @__PURE__ */ import_react83.default.createElement("span", {
      className: styles11.Text
    }, /* @__PURE__ */ import_react83.default.createElement(Text, {
      as: "span",
      variant: "bodyMd",
      fontWeight: active ? "semibold" : "regular"
    }, contentMarkup));
    const contentElement = /* @__PURE__ */ import_react83.default.createElement(InlineStack, {
      blockAlign: "center",
      gap: "150",
      wrap: false
    }, prefixMarkup, textMarkup, badgeMarkup, suffixMarkup);
    const contentWrapper = /* @__PURE__ */ import_react83.default.createElement(Box, {
      width: "100%"
    }, contentElement);
    const scrollMarkup = active ? /* @__PURE__ */ import_react83.default.createElement(Scrollable.ScrollTo, null) : null;
    const control = url ? /* @__PURE__ */ import_react83.default.createElement(UnstyledLink, {
      id,
      url: disabled ? null : url,
      className,
      external,
      "aria-label": accessibilityLabel,
      onClick: disabled ? null : onAction,
      role
    }, contentWrapper) : /* @__PURE__ */ import_react83.default.createElement("button", {
      id,
      type: "button",
      className,
      disabled,
      "aria-label": accessibilityLabel,
      onClick: onAction,
      onMouseUp: handleMouseUpByBlurring,
      role,
      onMouseEnter
    }, contentWrapper);
    return /* @__PURE__ */ import_react83.default.createElement(import_react83.default.Fragment, null, scrollMarkup, control);
  }
  var TruncateText = ({
    children
  }) => {
    const theme = useTheme();
    const textRef = (0, import_react83.useRef)(null);
    const [isOverflowing, setIsOverflowing] = (0, import_react83.useState)(false);
    useIsomorphicLayoutEffect2(() => {
      if (textRef.current) {
        setIsOverflowing(textRef.current.scrollWidth > textRef.current.offsetWidth);
      }
    }, [children]);
    const text = /* @__PURE__ */ import_react83.default.createElement(Text, {
      as: "span",
      truncate: true
    }, /* @__PURE__ */ import_react83.default.createElement(Box, {
      width: "100%",
      ref: textRef
    }, children));
    return isOverflowing ? /* @__PURE__ */ import_react83.default.createElement(Tooltip, {
      zIndexOverride: Number(theme.zIndex["z-index-11"]),
      preferredPosition: "above",
      hoverDelay: 1e3,
      content: children,
      dismissOnMouseOut: true
    }, /* @__PURE__ */ import_react83.default.createElement(Text, {
      as: "span",
      truncate: true
    }, children)) : text;
  };

  // node_modules/@shopify/polaris/build/esm/components/ActionList/components/Section/Section.js
  function Section({
    section,
    hasMultipleSections,
    isFirst,
    actionRole,
    onActionAnyItem
  }) {
    const handleAction = (itemOnAction) => {
      return () => {
        if (itemOnAction) {
          itemOnAction();
        }
        if (onActionAnyItem) {
          onActionAnyItem();
        }
      };
    };
    const actionMarkup = section.items.map(({
      content,
      helpText,
      onAction,
      ...item
    }, index) => {
      const itemMarkup = /* @__PURE__ */ import_react84.default.createElement(Item, Object.assign({
        content,
        helpText,
        role: actionRole,
        onAction: handleAction(onAction)
      }, item));
      return /* @__PURE__ */ import_react84.default.createElement(Box, {
        as: "li",
        key: `${content}-${index}`,
        role: actionRole === "menuitem" ? "presentation" : void 0
      }, /* @__PURE__ */ import_react84.default.createElement(InlineStack, {
        wrap: false
      }, itemMarkup));
    });
    let titleMarkup = null;
    if (section.title) {
      titleMarkup = typeof section.title === "string" ? /* @__PURE__ */ import_react84.default.createElement(Box, {
        paddingBlockStart: "300",
        paddingBlockEnd: "100",
        paddingInlineStart: "300",
        paddingInlineEnd: "300"
      }, /* @__PURE__ */ import_react84.default.createElement(Text, {
        as: "p",
        variant: "headingSm"
      }, section.title)) : /* @__PURE__ */ import_react84.default.createElement(Box, {
        padding: "200",
        paddingInlineEnd: "150"
      }, section.title);
    }
    let sectionRole;
    switch (actionRole) {
      case "option":
        sectionRole = "presentation";
        break;
      case "menuitem":
        sectionRole = !hasMultipleSections ? "menu" : "presentation";
        break;
      default:
        sectionRole = void 0;
        break;
    }
    const sectionMarkup = /* @__PURE__ */ import_react84.default.createElement(import_react84.default.Fragment, null, titleMarkup, /* @__PURE__ */ import_react84.default.createElement(Box, Object.assign({
      as: "div",
      padding: "150"
    }, hasMultipleSections && {
      paddingBlockStart: "0"
    }, {
      tabIndex: !hasMultipleSections ? -1 : void 0
    }), /* @__PURE__ */ import_react84.default.createElement(BlockStack, Object.assign({
      gap: "050",
      as: "ul"
    }, sectionRole && {
      role: sectionRole
    }), actionMarkup)));
    return hasMultipleSections ? /* @__PURE__ */ import_react84.default.createElement(Box, Object.assign({
      as: "li",
      role: "presentation",
      borderColor: "border-secondary"
    }, !isFirst && {
      borderBlockStartWidth: "025"
    }, !section.title && {
      paddingBlockStart: "150"
    }), sectionMarkup) : sectionMarkup;
  }

  // node_modules/@shopify/polaris/build/esm/components/KeypressListener/KeypressListener.js
  var import_react85 = __toESM(require_react());
  function KeypressListener({
    keyCode,
    handler,
    keyEvent = "keyup",
    options,
    useCapture,
    document: ownerDocument = globalThis.document
  }) {
    const tracked = (0, import_react85.useRef)({
      handler,
      keyCode
    });
    useIsomorphicLayoutEffect2(() => {
      tracked.current = {
        handler,
        keyCode
      };
    }, [handler, keyCode]);
    const handleKeyEvent = (0, import_react85.useCallback)((event) => {
      const {
        handler: handler2,
        keyCode: keyCode2
      } = tracked.current;
      if (event.keyCode === keyCode2) {
        handler2(event);
      }
    }, []);
    (0, import_react85.useEffect)(() => {
      ownerDocument.addEventListener(keyEvent, handleKeyEvent, useCapture || options);
      return () => {
        ownerDocument.removeEventListener(keyEvent, handleKeyEvent, useCapture || options);
      };
    }, [keyEvent, handleKeyEvent, useCapture, options, ownerDocument]);
    return null;
  }

  // node_modules/@shopify/polaris/build/esm/components/TextField/TextField.js
  var import_react93 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/TextField/TextField.css.js
  var styles18 = {
    "TextField": "Polaris-TextField",
    "ClearButton": "Polaris-TextField__ClearButton",
    "Loading": "Polaris-TextField__Loading",
    "disabled": "Polaris-TextField--disabled",
    "error": "Polaris-TextField--error",
    "readOnly": "Polaris-TextField--readOnly",
    "Input": "Polaris-TextField__Input",
    "Backdrop": "Polaris-TextField__Backdrop",
    "multiline": "Polaris-TextField--multiline",
    "hasValue": "Polaris-TextField--hasValue",
    "focus": "Polaris-TextField--focus",
    "VerticalContent": "Polaris-TextField__VerticalContent",
    "InputAndSuffixWrapper": "Polaris-TextField__InputAndSuffixWrapper",
    "toneMagic": "Polaris-TextField--toneMagic",
    "Prefix": "Polaris-TextField__Prefix",
    "Suffix": "Polaris-TextField__Suffix",
    "AutoSizeWrapper": "Polaris-TextField__AutoSizeWrapper",
    "AutoSizeWrapperWithSuffix": "Polaris-TextField__AutoSizeWrapperWithSuffix",
    "suggestion": "Polaris-TextField--suggestion",
    "borderless": "Polaris-TextField--borderless",
    "slim": "Polaris-TextField--slim",
    "Input-hasClearButton": "Polaris-TextField__Input--hasClearButton",
    "Input-suffixed": "Polaris-TextField__Input--suffixed",
    "Input-alignRight": "Polaris-TextField__Input--alignRight",
    "Input-alignLeft": "Polaris-TextField__Input--alignLeft",
    "Input-alignCenter": "Polaris-TextField__Input--alignCenter",
    "Input-autoSize": "Polaris-TextField__Input--autoSize",
    "PrefixIcon": "Polaris-TextField__PrefixIcon",
    "CharacterCount": "Polaris-TextField__CharacterCount",
    "AlignFieldBottom": "Polaris-TextField__AlignFieldBottom",
    "Spinner": "Polaris-TextField__Spinner",
    "SpinnerIcon": "Polaris-TextField__SpinnerIcon",
    "Resizer": "Polaris-TextField__Resizer",
    "DummyInput": "Polaris-TextField__DummyInput",
    "Segment": "Polaris-TextField__Segment",
    "monospaced": "Polaris-TextField--monospaced"
  };

  // node_modules/@shopify/polaris/build/esm/components/Labelled/Labelled.js
  var import_react88 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Labelled/Labelled.css.js
  var styles19 = {
    "hidden": "Polaris-Labelled--hidden",
    "LabelWrapper": "Polaris-Labelled__LabelWrapper",
    "disabled": "Polaris-Labelled--disabled",
    "HelpText": "Polaris-Labelled__HelpText",
    "readOnly": "Polaris-Labelled--readOnly",
    "Error": "Polaris-Labelled__Error",
    "Action": "Polaris-Labelled__Action"
  };

  // node_modules/@shopify/polaris/build/esm/components/InlineError/InlineError.js
  var import_react86 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/InlineError/InlineError.css.js
  var styles20 = {
    "InlineError": "Polaris-InlineError",
    "Icon": "Polaris-InlineError__Icon"
  };

  // node_modules/@shopify/polaris/build/esm/components/InlineError/InlineError.js
  function InlineError({
    message,
    fieldID
  }) {
    if (!message) {
      return null;
    }
    return /* @__PURE__ */ import_react86.default.createElement("div", {
      id: errorTextID(fieldID),
      className: styles20.InlineError
    }, /* @__PURE__ */ import_react86.default.createElement("div", {
      className: styles20.Icon
    }, /* @__PURE__ */ import_react86.default.createElement(Icon, {
      source: SvgAlertCircleIcon
    })), /* @__PURE__ */ import_react86.default.createElement(Text, {
      as: "span",
      variant: "bodyMd"
    }, message));
  }
  function errorTextID(id) {
    return `${id}Error`;
  }

  // node_modules/@shopify/polaris/build/esm/components/Label/Label.js
  var import_react87 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Label/Label.css.js
  var styles21 = {
    "Label": "Polaris-Label",
    "hidden": "Polaris-Label--hidden",
    "Text": "Polaris-Label__Text",
    "RequiredIndicator": "Polaris-Label__RequiredIndicator"
  };

  // node_modules/@shopify/polaris/build/esm/components/Label/Label.js
  function labelID(id) {
    return `${id}Label`;
  }
  function Label({
    children,
    id,
    hidden,
    requiredIndicator
  }) {
    const className = classNames(styles21.Label, hidden && styles21.hidden);
    return /* @__PURE__ */ import_react87.default.createElement("div", {
      className
    }, /* @__PURE__ */ import_react87.default.createElement("label", {
      id: labelID(id),
      htmlFor: id,
      className: classNames(styles21.Text, requiredIndicator && styles21.RequiredIndicator)
    }, /* @__PURE__ */ import_react87.default.createElement(Text, {
      as: "span",
      variant: "bodyMd"
    }, children)));
  }

  // node_modules/@shopify/polaris/build/esm/components/Labelled/Labelled.js
  function Labelled({
    id,
    label,
    error: error2,
    action,
    helpText,
    children,
    labelHidden,
    requiredIndicator,
    disabled,
    readOnly,
    ...rest
  }) {
    const className = classNames(labelHidden && styles19.hidden, disabled && styles19.disabled, readOnly && styles19.readOnly);
    const actionMarkup = action ? /* @__PURE__ */ import_react88.default.createElement("div", {
      className: styles19.Action
    }, buttonFrom(action, {
      variant: "plain"
    })) : null;
    const helpTextMarkup = helpText ? /* @__PURE__ */ import_react88.default.createElement("div", {
      className: styles19.HelpText,
      id: helpTextID(id),
      "aria-disabled": disabled
    }, /* @__PURE__ */ import_react88.default.createElement(Text, {
      as: "span",
      tone: "subdued",
      variant: "bodyMd",
      breakWord: true
    }, helpText)) : null;
    const errorMarkup = error2 && typeof error2 !== "boolean" && /* @__PURE__ */ import_react88.default.createElement("div", {
      className: styles19.Error
    }, /* @__PURE__ */ import_react88.default.createElement(InlineError, {
      message: error2,
      fieldID: id
    }));
    const labelMarkup = label ? /* @__PURE__ */ import_react88.default.createElement("div", {
      className: styles19.LabelWrapper
    }, /* @__PURE__ */ import_react88.default.createElement(Label, Object.assign({
      id,
      requiredIndicator
    }, rest, {
      hidden: false
    }), label), actionMarkup) : null;
    return /* @__PURE__ */ import_react88.default.createElement("div", {
      className
    }, labelMarkup, children, errorMarkup, helpTextMarkup);
  }
  function helpTextID(id) {
    return `${id}HelpText`;
  }

  // node_modules/@shopify/polaris/build/esm/components/Connected/Connected.js
  var import_react90 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Connected/Connected.css.js
  var styles22 = {
    "Connected": "Polaris-Connected",
    "Item": "Polaris-Connected__Item",
    "Item-primary": "Polaris-Connected__Item--primary",
    "Item-focused": "Polaris-Connected__Item--focused"
  };

  // node_modules/@shopify/polaris/build/esm/components/Connected/components/Item/Item.js
  var import_react89 = __toESM(require_react());
  function Item2({
    children,
    position
  }) {
    const {
      value: focused,
      setTrue: forceTrueFocused,
      setFalse: forceFalseFocused
    } = useToggle(false);
    const className = classNames(styles22.Item, focused && styles22["Item-focused"], position === "primary" ? styles22["Item-primary"] : styles22["Item-connection"]);
    return /* @__PURE__ */ import_react89.default.createElement("div", {
      onBlur: forceFalseFocused,
      onFocus: forceTrueFocused,
      className
    }, children);
  }

  // node_modules/@shopify/polaris/build/esm/components/Connected/Connected.js
  function Connected({
    children,
    left,
    right
  }) {
    const leftConnectionMarkup = left ? /* @__PURE__ */ import_react90.default.createElement(Item2, {
      position: "left"
    }, left) : null;
    const rightConnectionMarkup = right ? /* @__PURE__ */ import_react90.default.createElement(Item2, {
      position: "right"
    }, right) : null;
    return /* @__PURE__ */ import_react90.default.createElement("div", {
      className: styles22.Connected
    }, leftConnectionMarkup, /* @__PURE__ */ import_react90.default.createElement(Item2, {
      position: "primary"
    }, children), rightConnectionMarkup);
  }

  // node_modules/@shopify/polaris/build/esm/components/TextField/components/Spinner/Spinner.js
  var import_react91 = __toESM(require_react());
  var Spinner2 = /* @__PURE__ */ import_react91.default.forwardRef(function Spinner3({
    onChange,
    onClick,
    onMouseDown,
    onMouseUp,
    onBlur
  }, ref) {
    function handleStep(step) {
      return () => onChange(step);
    }
    function handleMouseDown(onChange2) {
      return (event) => {
        if (event.button !== 0)
          return;
        onMouseDown?.(onChange2);
      };
    }
    return /* @__PURE__ */ import_react91.default.createElement("div", {
      className: styles18.Spinner,
      onClick,
      "aria-hidden": true,
      ref
    }, /* @__PURE__ */ import_react91.default.createElement("div", {
      role: "button",
      className: styles18.Segment,
      tabIndex: -1,
      onClick: handleStep(1),
      onMouseDown: handleMouseDown(handleStep(1)),
      onMouseUp,
      onBlur
    }, /* @__PURE__ */ import_react91.default.createElement("div", {
      className: styles18.SpinnerIcon
    }, /* @__PURE__ */ import_react91.default.createElement(Icon, {
      source: SvgChevronUpIcon
    }))), /* @__PURE__ */ import_react91.default.createElement("div", {
      role: "button",
      className: styles18.Segment,
      tabIndex: -1,
      onClick: handleStep(-1),
      onMouseDown: handleMouseDown(handleStep(-1)),
      onMouseUp,
      onBlur
    }, /* @__PURE__ */ import_react91.default.createElement("div", {
      className: styles18.SpinnerIcon
    }, /* @__PURE__ */ import_react91.default.createElement(Icon, {
      source: SvgChevronDownIcon
    }))));
  });

  // node_modules/@shopify/polaris/build/esm/components/TextField/components/Resizer/Resizer.js
  var import_react92 = __toESM(require_react());
  function Resizer({
    contents,
    currentHeight: currentHeightProp = null,
    minimumLines,
    onHeightChange
  }) {
    const contentNode = (0, import_react92.useRef)(null);
    const minimumLinesNode = (0, import_react92.useRef)(null);
    const animationFrame = (0, import_react92.useRef)();
    const currentHeight = (0, import_react92.useRef)(currentHeightProp);
    if (currentHeightProp !== currentHeight.current) {
      currentHeight.current = currentHeightProp;
    }
    (0, import_react92.useEffect)(() => {
      return () => {
        if (animationFrame.current) {
          cancelAnimationFrame(animationFrame.current);
        }
      };
    }, []);
    const minimumLinesMarkup = minimumLines ? /* @__PURE__ */ import_react92.default.createElement("div", {
      ref: minimumLinesNode,
      className: styles18.DummyInput,
      dangerouslySetInnerHTML: {
        __html: getContentsForMinimumLines(minimumLines)
      }
    }) : null;
    const handleHeightCheck = (0, import_react92.useCallback)(() => {
      if (animationFrame.current) {
        cancelAnimationFrame(animationFrame.current);
      }
      animationFrame.current = requestAnimationFrame(() => {
        if (!contentNode.current || !minimumLinesNode.current) {
          return;
        }
        const newHeight = Math.max(contentNode.current.offsetHeight, minimumLinesNode.current.offsetHeight);
        if (newHeight !== currentHeight.current) {
          onHeightChange(newHeight);
        }
      });
    }, [onHeightChange]);
    useIsomorphicLayoutEffect2(() => {
      handleHeightCheck();
    });
    return /* @__PURE__ */ import_react92.default.createElement("div", {
      "aria-hidden": true,
      className: styles18.Resizer
    }, /* @__PURE__ */ import_react92.default.createElement(EventListener2, {
      event: "resize",
      handler: handleHeightCheck
    }), /* @__PURE__ */ import_react92.default.createElement("div", {
      ref: contentNode,
      className: styles18.DummyInput,
      dangerouslySetInnerHTML: {
        __html: getFinalContents(contents)
      }
    }), minimumLinesMarkup);
  }
  var ENTITIES_TO_REPLACE = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    "\n": "<br>",
    "\r": ""
  };
  var REPLACE_REGEX2 = new RegExp(`[${Object.keys(ENTITIES_TO_REPLACE).join()}]`, "g");
  function replaceEntity(entity) {
    return ENTITIES_TO_REPLACE[entity];
  }
  function getContentsForMinimumLines(minimumLines) {
    let content = "";
    for (let line = 0; line < minimumLines; line++) {
      content += "<br>";
    }
    return content;
  }
  function getFinalContents(contents) {
    return contents ? `${contents.replace(REPLACE_REGEX2, replaceEntity)}<br>` : "<br>";
  }

  // node_modules/@shopify/polaris/build/esm/components/TextField/TextField.js
  function TextField({
    prefix,
    suffix,
    verticalContent,
    placeholder,
    value = "",
    helpText,
    label,
    labelAction,
    labelHidden,
    disabled,
    clearButton,
    readOnly,
    autoFocus,
    focused,
    multiline,
    error: error2,
    connectedRight,
    connectedLeft,
    type = "text",
    name,
    id: idProp,
    role,
    step,
    largeStep,
    autoComplete,
    max,
    maxLength,
    maxHeight,
    min,
    minLength,
    pattern,
    inputMode,
    spellCheck,
    ariaOwns,
    ariaControls,
    ariaExpanded,
    ariaActiveDescendant,
    ariaAutocomplete,
    showCharacterCount,
    align,
    requiredIndicator,
    monospaced,
    selectTextOnFocus,
    suggestion,
    variant = "inherit",
    size = "medium",
    onClearButtonClick,
    onChange,
    onSpinnerChange,
    onFocus,
    onBlur,
    tone,
    autoSize,
    loading
  }) {
    const i18n = useI18n();
    const [height, setHeight] = (0, import_react93.useState)(null);
    const [focus, setFocus] = (0, import_react93.useState)(Boolean(focused));
    const isAfterInitial = useIsAfterInitialMount();
    const uniqId = (0, import_react93.useId)();
    const id = idProp ?? uniqId;
    const textFieldRef = (0, import_react93.useRef)(null);
    const inputRef = (0, import_react93.useRef)(null);
    const textAreaRef = (0, import_react93.useRef)(null);
    const prefixRef = (0, import_react93.useRef)(null);
    const suffixRef = (0, import_react93.useRef)(null);
    const loadingRef = (0, import_react93.useRef)(null);
    const verticalContentRef = (0, import_react93.useRef)(null);
    const buttonPressTimer = (0, import_react93.useRef)();
    const spinnerRef = (0, import_react93.useRef)(null);
    const getInputRef = (0, import_react93.useCallback)(() => {
      return multiline ? textAreaRef.current : inputRef.current;
    }, [multiline]);
    (0, import_react93.useEffect)(() => {
      const input2 = getInputRef();
      if (!input2 || focused === void 0)
        return;
      focused ? input2.focus() : input2.blur();
    }, [focused, verticalContent, getInputRef]);
    (0, import_react93.useEffect)(() => {
      const input2 = inputRef.current;
      const isSupportedInputType = type === "text" || type === "tel" || type === "search" || type === "url" || type === "password";
      if (!input2 || !isSupportedInputType || !suggestion) {
        return;
      }
      input2.setSelectionRange(value.length, suggestion.length);
    }, [focus, value, type, suggestion]);
    const normalizedValue = suggestion ? suggestion : value;
    const normalizedStep = step != null ? step : 1;
    const normalizedMax = max != null ? max : Infinity;
    const normalizedMin = min != null ? min : -Infinity;
    const className = classNames(styles18.TextField, Boolean(normalizedValue) && styles18.hasValue, disabled && styles18.disabled, readOnly && styles18.readOnly, error2 && styles18.error, tone && styles18[variationName("tone", tone)], multiline && styles18.multiline, focus && !disabled && styles18.focus, variant !== "inherit" && styles18[variant], size === "slim" && styles18.slim);
    const inputType = type === "currency" ? "text" : type;
    const isNumericType = type === "number" || type === "integer";
    const iconPrefix = /* @__PURE__ */ import_react93.default.isValidElement(prefix) && prefix.type === Icon;
    const prefixMarkup = prefix ? /* @__PURE__ */ import_react93.default.createElement("div", {
      className: classNames(styles18.Prefix, iconPrefix && styles18.PrefixIcon),
      id: `${id}-Prefix`,
      ref: prefixRef
    }, /* @__PURE__ */ import_react93.default.createElement(Text, {
      as: "span",
      variant: "bodyMd"
    }, prefix)) : null;
    const suffixMarkup = suffix ? /* @__PURE__ */ import_react93.default.createElement("div", {
      className: styles18.Suffix,
      id: `${id}-Suffix`,
      ref: suffixRef
    }, /* @__PURE__ */ import_react93.default.createElement(Text, {
      as: "span",
      variant: "bodyMd"
    }, suffix)) : null;
    const loadingMarkup = loading ? /* @__PURE__ */ import_react93.default.createElement("div", {
      className: styles18.Loading,
      id: `${id}-Loading`,
      ref: loadingRef
    }, /* @__PURE__ */ import_react93.default.createElement(Spinner, {
      size: "small"
    })) : null;
    let characterCountMarkup = null;
    if (showCharacterCount) {
      const characterCount = normalizedValue.length;
      const characterCountLabel = maxLength ? i18n.translate("Polaris.TextField.characterCountWithMaxLength", {
        count: characterCount,
        limit: maxLength
      }) : i18n.translate("Polaris.TextField.characterCount", {
        count: characterCount
      });
      const characterCountClassName = classNames(styles18.CharacterCount, multiline && styles18.AlignFieldBottom);
      const characterCountText = !maxLength ? characterCount : `${characterCount}/${maxLength}`;
      characterCountMarkup = /* @__PURE__ */ import_react93.default.createElement("div", {
        id: `${id}-CharacterCounter`,
        className: characterCountClassName,
        "aria-label": characterCountLabel,
        "aria-live": focus ? "polite" : "off",
        "aria-atomic": "true",
        onClick: handleClickChild
      }, /* @__PURE__ */ import_react93.default.createElement(Text, {
        as: "span",
        variant: "bodyMd"
      }, characterCountText));
    }
    const clearButtonVisible = normalizedValue !== "";
    const clearButtonMarkup = clearButton && clearButtonVisible ? /* @__PURE__ */ import_react93.default.createElement("button", {
      type: "button",
      className: styles18.ClearButton,
      onClick: handleClearButtonPress,
      disabled
    }, /* @__PURE__ */ import_react93.default.createElement(Text, {
      as: "span",
      visuallyHidden: true
    }, i18n.translate("Polaris.Common.clear")), /* @__PURE__ */ import_react93.default.createElement(Icon, {
      source: SvgXCircleIcon,
      tone: "base"
    })) : null;
    const handleNumberChange = (0, import_react93.useCallback)((steps, stepAmount = normalizedStep) => {
      if (onChange == null && onSpinnerChange == null) {
        return;
      }
      const dpl = (num) => (num.toString().split(".")[1] || []).length;
      const numericValue = value ? parseFloat(value) : 0;
      if (isNaN(numericValue)) {
        return;
      }
      const decimalPlaces = type === "integer" ? 0 : Math.max(dpl(numericValue), dpl(stepAmount));
      const newValue = Math.min(Number(normalizedMax), Math.max(numericValue + steps * stepAmount, Number(normalizedMin)));
      if (onSpinnerChange != null) {
        onSpinnerChange(String(newValue.toFixed(decimalPlaces)), id);
      } else if (onChange != null) {
        onChange(String(newValue.toFixed(decimalPlaces)), id);
      }
    }, [id, normalizedMax, normalizedMin, onChange, onSpinnerChange, normalizedStep, type, value]);
    const handleSpinnerButtonRelease = (0, import_react93.useCallback)(() => {
      clearTimeout(buttonPressTimer.current);
    }, []);
    const handleSpinnerButtonPress = (0, import_react93.useCallback)((onChange2) => {
      const minInterval = 50;
      const decrementBy = 10;
      let interval = 200;
      const onChangeInterval = () => {
        if (interval > minInterval)
          interval -= decrementBy;
        onChange2(0);
        buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
      };
      buttonPressTimer.current = window.setTimeout(onChangeInterval, interval);
      document.addEventListener("mouseup", handleSpinnerButtonRelease, {
        once: true
      });
    }, [handleSpinnerButtonRelease]);
    const spinnerMarkup = isNumericType && step !== 0 && !disabled && !readOnly ? /* @__PURE__ */ import_react93.default.createElement(Spinner2, {
      onClick: handleClickChild,
      onChange: handleNumberChange,
      onMouseDown: handleSpinnerButtonPress,
      onMouseUp: handleSpinnerButtonRelease,
      ref: spinnerRef,
      onBlur: handleOnBlur
    }) : null;
    const style = multiline && height ? {
      height,
      maxHeight
    } : null;
    const handleExpandingResize = (0, import_react93.useCallback)((height2) => {
      setHeight(height2);
    }, []);
    const resizer = multiline && isAfterInitial ? /* @__PURE__ */ import_react93.default.createElement(Resizer, {
      contents: normalizedValue || placeholder,
      currentHeight: height,
      minimumLines: typeof multiline === "number" ? multiline : 1,
      onHeightChange: handleExpandingResize
    }) : null;
    const describedBy = [];
    if (error2) {
      describedBy.push(`${id}Error`);
    }
    if (helpText) {
      describedBy.push(helpTextID(id));
    }
    if (showCharacterCount) {
      describedBy.push(`${id}-CharacterCounter`);
    }
    const labelledBy = [];
    if (prefix) {
      labelledBy.push(`${id}-Prefix`);
    }
    if (suffix) {
      labelledBy.push(`${id}-Suffix`);
    }
    if (verticalContent) {
      labelledBy.push(`${id}-VerticalContent`);
    }
    labelledBy.unshift(labelID(id));
    const inputClassName = classNames(styles18.Input, align && styles18[variationName("Input-align", align)], suffix && styles18["Input-suffixed"], clearButton && styles18["Input-hasClearButton"], monospaced && styles18.monospaced, suggestion && styles18.suggestion, autoSize && styles18["Input-autoSize"]);
    const handleOnFocus = (event) => {
      setFocus(true);
      if (selectTextOnFocus && !suggestion) {
        const input2 = getInputRef();
        input2?.select();
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    useEventListener("wheel", handleOnWheel, inputRef);
    function handleOnWheel(event) {
      if (document.activeElement === event.target && isNumericType) {
        event.stopPropagation();
      }
    }
    const input = /* @__PURE__ */ (0, import_react93.createElement)(multiline ? "textarea" : "input", {
      name,
      id,
      disabled,
      readOnly,
      role,
      autoFocus,
      value: normalizedValue,
      placeholder,
      style,
      autoComplete,
      className: inputClassName,
      ref: multiline ? textAreaRef : inputRef,
      min,
      max,
      step,
      minLength,
      maxLength,
      spellCheck,
      pattern,
      inputMode,
      type: inputType,
      rows: getRows(multiline),
      size: autoSize ? 1 : void 0,
      "aria-describedby": describedBy.length ? describedBy.join(" ") : void 0,
      "aria-labelledby": labelledBy.join(" "),
      "aria-invalid": Boolean(error2),
      "aria-owns": ariaOwns,
      "aria-activedescendant": ariaActiveDescendant,
      "aria-autocomplete": ariaAutocomplete,
      "aria-controls": ariaControls,
      "aria-expanded": ariaExpanded,
      "aria-required": requiredIndicator,
      ...normalizeAriaMultiline(multiline),
      onFocus: handleOnFocus,
      onBlur: handleOnBlur,
      onClick: handleClickChild,
      onKeyPress: handleKeyPress,
      onKeyDown: handleKeyDown2,
      onChange: !suggestion ? handleChange : void 0,
      onInput: suggestion ? handleChange : void 0,
      // 1Password disable data attribute
      "data-1p-ignore": autoComplete === "off" || void 0,
      // LastPass disable data attribute
      "data-lpignore": autoComplete === "off" || void 0,
      // Dashlane disable data attribute
      "data-form-type": autoComplete === "off" ? "other" : void 0
    });
    const inputWithVerticalContentMarkup = verticalContent ? /* @__PURE__ */ import_react93.default.createElement("div", {
      className: styles18.VerticalContent,
      id: `${id}-VerticalContent`,
      ref: verticalContentRef,
      onClick: handleClickChild
    }, verticalContent, input) : null;
    const inputMarkup = verticalContent ? inputWithVerticalContentMarkup : input;
    const backdropMarkup = /* @__PURE__ */ import_react93.default.createElement("div", {
      className: classNames(styles18.Backdrop, connectedLeft && styles18["Backdrop-connectedLeft"], connectedRight && styles18["Backdrop-connectedRight"])
    });
    const inputAndSuffixMarkup = autoSize ? /* @__PURE__ */ import_react93.default.createElement("div", {
      className: styles18.InputAndSuffixWrapper
    }, /* @__PURE__ */ import_react93.default.createElement("div", {
      className: classNames(styles18.AutoSizeWrapper, suffix && styles18.AutoSizeWrapperWithSuffix),
      "data-auto-size-value": value || placeholder
    }, inputMarkup), suffixMarkup) : /* @__PURE__ */ import_react93.default.createElement(import_react93.default.Fragment, null, inputMarkup, suffixMarkup);
    return /* @__PURE__ */ import_react93.default.createElement(Labelled, {
      label,
      id,
      error: error2,
      action: labelAction,
      labelHidden,
      helpText,
      requiredIndicator,
      disabled,
      readOnly
    }, /* @__PURE__ */ import_react93.default.createElement(Connected, {
      left: connectedLeft,
      right: connectedRight
    }, /* @__PURE__ */ import_react93.default.createElement("div", {
      className,
      onClick: handleClick,
      ref: textFieldRef
    }, prefixMarkup, inputAndSuffixMarkup, characterCountMarkup, loadingMarkup, clearButtonMarkup, spinnerMarkup, backdropMarkup, resizer)));
    function handleChange(event) {
      onChange && onChange(event.currentTarget.value, id);
    }
    function handleClick(event) {
      const {
        target
      } = event;
      const inputRefRole = inputRef?.current?.getAttribute("role");
      if (target === inputRef.current && inputRefRole === "combobox") {
        inputRef.current?.focus();
        handleOnFocus(event);
        return;
      }
      if (isPrefixOrSuffix(target) || isVerticalContent(target) || isInput(target) || isSpinner(target) || isLoadingSpinner(target) || focus) {
        return;
      }
      getInputRef()?.focus();
    }
    function handleClickChild(event) {
      if (!isSpinner(event.target) && !isInput(event.target)) {
        event.stopPropagation();
      }
      if (isPrefixOrSuffix(event.target) || isVerticalContent(event.target) || isInput(event.target) || isLoadingSpinner(event.target) || focus) {
        return;
      }
      setFocus(true);
      getInputRef()?.focus();
    }
    function handleClearButtonPress() {
      onClearButtonClick && onClearButtonClick(id);
    }
    function handleKeyPress(event) {
      const {
        key,
        which
      } = event;
      const numbersSpec = /[\d.,eE+-]$/;
      const integerSpec = /[\deE+-]$/;
      if (!isNumericType || which === Key.Enter || type === "number" && numbersSpec.test(key) || type === "integer" && integerSpec.test(key)) {
        return;
      }
      event.preventDefault();
    }
    function handleKeyDown2(event) {
      if (!isNumericType) {
        return;
      }
      const {
        key,
        which
      } = event;
      if (type === "integer" && (key === "ArrowUp" || which === Key.UpArrow)) {
        handleNumberChange(1);
        event.preventDefault();
      }
      if (type === "integer" && (key === "ArrowDown" || which === Key.DownArrow)) {
        handleNumberChange(-1);
        event.preventDefault();
      }
      if ((which === Key.Home || key === "Home") && min !== void 0) {
        if (onSpinnerChange != null) {
          onSpinnerChange(String(min), id);
        } else if (onChange != null) {
          onChange(String(min), id);
        }
      }
      if ((which === Key.End || key === "End") && max !== void 0) {
        if (onSpinnerChange != null) {
          onSpinnerChange(String(max), id);
        } else if (onChange != null) {
          onChange(String(max), id);
        }
      }
      if ((which === Key.PageUp || key === "PageUp") && largeStep !== void 0) {
        handleNumberChange(1, largeStep);
      }
      if ((which === Key.PageDown || key === "PageDown") && largeStep !== void 0) {
        handleNumberChange(-1, largeStep);
      }
    }
    function handleOnBlur(event) {
      setFocus(false);
      if (textFieldRef.current?.contains(event?.relatedTarget)) {
        return;
      }
      if (onBlur) {
        onBlur(event);
      }
    }
    function isInput(target) {
      const input2 = getInputRef();
      return target instanceof HTMLElement && input2 && (input2.contains(target) || input2.contains(document.activeElement));
    }
    function isPrefixOrSuffix(target) {
      return target instanceof Element && (prefixRef.current && prefixRef.current.contains(target) || suffixRef.current && suffixRef.current.contains(target));
    }
    function isSpinner(target) {
      return target instanceof Element && spinnerRef.current && spinnerRef.current.contains(target);
    }
    function isLoadingSpinner(target) {
      return target instanceof Element && loadingRef.current && loadingRef.current.contains(target);
    }
    function isVerticalContent(target) {
      return target instanceof Element && verticalContentRef.current && (verticalContentRef.current.contains(target) || verticalContentRef.current.contains(document.activeElement));
    }
  }
  function getRows(multiline) {
    if (!multiline)
      return void 0;
    return typeof multiline === "number" ? multiline : 1;
  }
  function normalizeAriaMultiline(multiline) {
    if (!multiline)
      return void 0;
    return Boolean(multiline) || typeof multiline === "number" && multiline > 0 ? {
      "aria-multiline": true
    } : void 0;
  }

  // node_modules/@shopify/polaris/build/esm/components/ActionList/ActionList.js
  var FILTER_ACTIONS_THRESHOLD = 8;
  function ActionList({
    items,
    sections = [],
    actionRole,
    allowFiltering,
    onActionAnyItem,
    filterLabel
  }) {
    const i18n = useI18n();
    const filterActions = (0, import_react94.useContext)(FilterActionsContext);
    let finalSections = [];
    const actionListRef = (0, import_react94.useRef)(null);
    const [searchText, setSearchText] = (0, import_react94.useState)("");
    if (items) {
      finalSections = [{
        items
      }, ...sections];
    } else if (sections) {
      finalSections = sections;
    }
    const isFilterable = finalSections?.some((section) => section.items.some((item) => typeof item.content === "string"));
    const hasMultipleSections = finalSections.length > 1;
    const elementRole = hasMultipleSections && actionRole === "menuitem" ? "menu" : void 0;
    const elementTabIndex = hasMultipleSections && actionRole === "menuitem" ? -1 : void 0;
    const filteredSections = finalSections?.map((section) => ({
      ...section,
      items: section.items.filter(({
        content
      }) => typeof content === "string" ? content?.toLowerCase().includes(searchText.toLowerCase()) : content)
    }));
    const sectionMarkup = filteredSections.map((section, index) => {
      return section.items.length > 0 ? /* @__PURE__ */ import_react94.default.createElement(Section, {
        key: typeof section.title === "string" ? section.title : index,
        section,
        hasMultipleSections,
        actionRole,
        onActionAnyItem,
        isFirst: index === 0
      }) : null;
    });
    const handleFocusPreviousItem = (evt) => {
      evt.preventDefault();
      if (actionListRef.current && evt.target) {
        if (actionListRef.current.contains(evt.target)) {
          wrapFocusPreviousFocusableMenuItem(actionListRef.current, evt.target);
        }
      }
    };
    const handleFocusNextItem = (evt) => {
      evt.preventDefault();
      if (actionListRef.current && evt.target) {
        if (actionListRef.current.contains(evt.target)) {
          wrapFocusNextFocusableMenuItem(actionListRef.current, evt.target);
        }
      }
    };
    const listeners = actionRole === "menuitem" ? /* @__PURE__ */ import_react94.default.createElement(import_react94.default.Fragment, null, /* @__PURE__ */ import_react94.default.createElement(KeypressListener, {
      keyEvent: "keydown",
      keyCode: Key.DownArrow,
      handler: handleFocusNextItem
    }), /* @__PURE__ */ import_react94.default.createElement(KeypressListener, {
      keyEvent: "keydown",
      keyCode: Key.UpArrow,
      handler: handleFocusPreviousItem
    })) : null;
    const totalFilteredActions = (0, import_react94.useMemo)(() => {
      const totalSectionItems = filteredSections?.reduce((acc, section) => acc + section.items.length, 0) || 0;
      return totalSectionItems;
    }, [filteredSections]);
    const totalActions = finalSections?.reduce((acc, section) => acc + section.items.length, 0) || 0;
    const hasManyActions = totalActions >= FILTER_ACTIONS_THRESHOLD;
    return /* @__PURE__ */ import_react94.default.createElement(import_react94.default.Fragment, null, (allowFiltering || filterActions) && hasManyActions && isFilterable && /* @__PURE__ */ import_react94.default.createElement(Box, {
      padding: "200",
      paddingBlockEnd: totalFilteredActions > 0 ? "0" : "200"
    }, /* @__PURE__ */ import_react94.default.createElement(TextField, {
      clearButton: true,
      labelHidden: true,
      label: filterLabel ? filterLabel : i18n.translate("Polaris.ActionList.SearchField.placeholder"),
      placeholder: filterLabel ? filterLabel : i18n.translate("Polaris.ActionList.SearchField.placeholder"),
      autoComplete: "off",
      value: searchText,
      onChange: (value) => setSearchText(value),
      prefix: /* @__PURE__ */ import_react94.default.createElement(Icon, {
        source: SvgSearchIcon
      }),
      onClearButtonClick: () => setSearchText("")
    })), /* @__PURE__ */ import_react94.default.createElement(Box, {
      as: hasMultipleSections ? "ul" : "div",
      ref: actionListRef,
      role: elementRole,
      tabIndex: elementTabIndex
    }, listeners, sectionMarkup));
  }
  ActionList.Item = Item;

  // node_modules/@shopify/polaris/build/esm/components/Popover/Popover.js
  var import_react99 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Popover/set-activator-attributes.js
  function setActivatorAttributes(activator, {
    id,
    active = false,
    ariaHaspopup,
    activatorDisabled = false
  }) {
    if (!activatorDisabled) {
      activator.tabIndex = activator.tabIndex || 0;
    }
    activator.setAttribute("aria-controls", id);
    activator.setAttribute("aria-owns", id);
    activator.setAttribute("aria-expanded", String(active));
    activator.setAttribute("data-state", active ? "open" : "closed");
    if (ariaHaspopup != null) {
      activator.setAttribute("aria-haspopup", String(ariaHaspopup));
    }
  }

  // node_modules/@shopify/polaris/build/esm/components/Popover/components/PopoverOverlay/PopoverOverlay.js
  var import_react98 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/components.js
  var import_react95 = __toESM(require_react());
  function wrapWithComponent(element, Component7, props) {
    if (element == null) {
      return null;
    }
    return isElementOfType(element, Component7) ? element : /* @__PURE__ */ import_react95.default.createElement(Component7, props, element);
  }
  var isComponent = true ? hotReloadComponentCheck : (AComponent, AnotherComponent) => AComponent === AnotherComponent;
  function isElementOfType(element, Component7) {
    if (element == null || !/* @__PURE__ */ (0, import_react95.isValidElement)(element) || typeof element.type === "string") {
      return false;
    }
    const {
      type: defaultType
    } = element;
    const overrideType = element.props?.__type__;
    const type = overrideType || defaultType;
    const Components = Array.isArray(Component7) ? Component7 : [Component7];
    return Components.some((AComponent) => typeof type !== "string" && isComponent(AComponent, type));
  }
  function elementChildren(children, predicate = () => true) {
    return import_react95.Children.toArray(children).filter((child) => /* @__PURE__ */ (0, import_react95.isValidElement)(child) && predicate(child));
  }
  function hotReloadComponentCheck(AComponent, AnotherComponent) {
    const componentName = AComponent.name;
    const anotherComponentName = AnotherComponent.displayName;
    return AComponent === AnotherComponent || Boolean(componentName) && componentName === anotherComponentName;
  }

  // node_modules/@shopify/polaris/build/esm/components/Popover/Popover.css.js
  var styles23 = {
    "Popover": "Polaris-Popover",
    "PopoverOverlay": "Polaris-Popover__PopoverOverlay",
    "PopoverOverlay-noAnimation": "Polaris-Popover__PopoverOverlay--noAnimation",
    "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
    "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
    "measuring": "Polaris-Popover--measuring",
    "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
    "fullWidth": "Polaris-Popover--fullWidth",
    "Content": "Polaris-Popover__Content",
    "positionedAbove": "Polaris-Popover--positionedAbove",
    "positionedCover": "Polaris-Popover--positionedCover",
    "ContentContainer": "Polaris-Popover__ContentContainer",
    "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
    "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
    "Pane": "Polaris-Popover__Pane",
    "Pane-fixed": "Polaris-Popover__Pane--fixed",
    "Pane-subdued": "Polaris-Popover__Pane--subdued",
    "Pane-captureOverscroll": "Polaris-Popover__Pane--captureOverscroll",
    "Section": "Polaris-Popover__Section",
    "FocusTracker": "Polaris-Popover__FocusTracker",
    "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint"
  };

  // node_modules/@shopify/polaris/build/esm/components/Popover/components/Pane/Pane.js
  var import_react97 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Popover/components/Section/Section.js
  var import_react96 = __toESM(require_react());
  function Section2({
    children
  }) {
    return /* @__PURE__ */ import_react96.default.createElement("div", {
      className: styles23.Section
    }, /* @__PURE__ */ import_react96.default.createElement(Box, {
      paddingInlineStart: "300",
      paddingInlineEnd: "300",
      paddingBlockStart: "200",
      paddingBlockEnd: "150"
    }, children));
  }

  // node_modules/@shopify/polaris/build/esm/components/Popover/components/Pane/Pane.js
  function Pane({
    captureOverscroll = false,
    fixed,
    sectioned,
    children,
    height,
    maxHeight,
    minHeight,
    subdued,
    onScrolledToBottom
  }) {
    const className = classNames(styles23.Pane, fixed && styles23["Pane-fixed"], subdued && styles23["Pane-subdued"], captureOverscroll && styles23["Pane-captureOverscroll"]);
    const content = sectioned ? wrapWithComponent(children, Section2, {}) : children;
    const style = {
      height,
      maxHeight,
      minHeight
    };
    return fixed ? /* @__PURE__ */ import_react97.default.createElement("div", {
      style,
      className
    }, content) : /* @__PURE__ */ import_react97.default.createElement(Scrollable, {
      shadow: true,
      className,
      style,
      onScrolledToBottom,
      scrollbarWidth: "thin"
    }, content);
  }

  // node_modules/@shopify/polaris/build/esm/components/Popover/components/PopoverOverlay/PopoverOverlay.js
  var PopoverCloseSource = /* @__PURE__ */ function(PopoverCloseSource2) {
    PopoverCloseSource2[PopoverCloseSource2["Click"] = 0] = "Click";
    PopoverCloseSource2[PopoverCloseSource2["EscapeKeypress"] = 1] = "EscapeKeypress";
    PopoverCloseSource2[PopoverCloseSource2["FocusOut"] = 2] = "FocusOut";
    PopoverCloseSource2[PopoverCloseSource2["ScrollOut"] = 3] = "ScrollOut";
    return PopoverCloseSource2;
  }({});
  var TransitionStatus = /* @__PURE__ */ function(TransitionStatus2) {
    TransitionStatus2["Entering"] = "entering";
    TransitionStatus2["Entered"] = "entered";
    TransitionStatus2["Exiting"] = "exiting";
    TransitionStatus2["Exited"] = "exited";
    return TransitionStatus2;
  }(TransitionStatus || {});
  var PopoverOverlay = class extends import_react98.PureComponent {
    constructor(props) {
      super(props);
      this.state = {
        transitionStatus: this.props.active ? TransitionStatus.Entering : TransitionStatus.Exited
      };
      this.contentNode = /* @__PURE__ */ (0, import_react98.createRef)();
      this.renderPopover = (overlayDetails) => {
        const {
          measuring,
          desiredHeight,
          positioning
        } = overlayDetails;
        const {
          id,
          children,
          sectioned,
          fullWidth,
          fullHeight,
          fluidContent,
          hideOnPrint,
          autofocusTarget,
          captureOverscroll
        } = this.props;
        const isCovering = positioning === "cover";
        const className = classNames(styles23.Popover, measuring && styles23.measuring, (fullWidth || isCovering) && styles23.fullWidth, hideOnPrint && styles23["PopoverOverlay-hideOnPrint"], positioning && styles23[variationName("positioned", positioning)]);
        const contentStyles = measuring ? void 0 : {
          height: desiredHeight
        };
        const contentClassNames = classNames(styles23.Content, fullHeight && styles23["Content-fullHeight"], fluidContent && styles23["Content-fluidContent"]);
        const {
          window: window2
        } = this.state;
        return /* @__PURE__ */ import_react98.default.createElement("div", Object.assign({
          className
        }, overlay.props), /* @__PURE__ */ import_react98.default.createElement(EventListener2, {
          event: "click",
          handler: this.handleClick,
          window: window2
        }), /* @__PURE__ */ import_react98.default.createElement(EventListener2, {
          event: "touchstart",
          handler: this.handleClick,
          window: window2
        }), /* @__PURE__ */ import_react98.default.createElement(KeypressListener, {
          keyCode: Key.Escape,
          handler: this.handleEscape,
          document: window2?.document
        }), /* @__PURE__ */ import_react98.default.createElement("div", {
          className: styles23.FocusTracker,
          tabIndex: 0,
          onFocus: this.handleFocusFirstItem
        }), /* @__PURE__ */ import_react98.default.createElement("div", {
          className: styles23.ContentContainer
        }, /* @__PURE__ */ import_react98.default.createElement("div", {
          id,
          tabIndex: autofocusTarget === "none" ? void 0 : -1,
          className: contentClassNames,
          style: contentStyles,
          ref: this.contentNode
        }, renderPopoverContent(children, {
          captureOverscroll,
          sectioned
        }))), /* @__PURE__ */ import_react98.default.createElement("div", {
          className: styles23.FocusTracker,
          tabIndex: 0,
          onFocus: this.handleFocusLastItem
        }));
      };
      this.handleClick = (event) => {
        const target = event.target;
        const {
          contentNode,
          props: {
            activator,
            onClose,
            preventCloseOnChildOverlayClick
          }
        } = this;
        const composedPath = event.composedPath();
        const wasDescendant = preventCloseOnChildOverlayClick ? wasPolarisPortalDescendant(composedPath, this.context.container) : wasContentNodeDescendant(composedPath, contentNode);
        const isActivatorDescendant = nodeContainsDescendant(activator, target);
        if (wasDescendant || isActivatorDescendant || this.state.transitionStatus !== TransitionStatus.Entered) {
          return;
        }
        onClose(PopoverCloseSource.Click);
      };
      this.handleScrollOut = () => {
        this.props.onClose(PopoverCloseSource.ScrollOut);
      };
      this.handleEscape = (event) => {
        const target = event.target;
        const {
          contentNode,
          props: {
            activator
          }
        } = this;
        const composedPath = event.composedPath();
        const wasDescendant = wasContentNodeDescendant(composedPath, contentNode);
        const isActivatorDescendant = nodeContainsDescendant(activator, target);
        if (wasDescendant || isActivatorDescendant) {
          this.props.onClose(PopoverCloseSource.EscapeKeypress);
        }
      };
      this.handleFocusFirstItem = () => {
        this.props.onClose(PopoverCloseSource.FocusOut);
      };
      this.handleFocusLastItem = () => {
        this.props.onClose(PopoverCloseSource.FocusOut);
      };
      this.overlayRef = /* @__PURE__ */ (0, import_react98.createRef)();
    }
    forceUpdatePosition() {
      this.overlayRef.current?.forceUpdatePosition();
    }
    changeTransitionStatus(transitionStatus, cb) {
      this.setState({
        transitionStatus
      }, cb);
      this.contentNode.current && this.contentNode.current.getBoundingClientRect();
    }
    componentDidMount() {
      if (this.props.active) {
        this.focusContent();
        this.changeTransitionStatus(TransitionStatus.Entered);
      }
      this.observer = new ResizeObserver(() => {
        this.setState({
          /**
           * This is a workaround to enable event listeners to be
           * re-attached when moving from one document to another
           * when using a React portal across iframes.
           * Using a resize observer works because when the clientWidth
           * will go from 0 to the real width after the activator
           * gets rendered in its new place.
           */
          window: this.props.activator.ownerDocument.defaultView
        });
      });
      this.observer.observe(this.props.activator);
    }
    componentDidUpdate(oldProps) {
      if (this.props.active && !oldProps.active) {
        this.focusContent();
        this.changeTransitionStatus(TransitionStatus.Entering, () => {
          this.clearTransitionTimeout();
          this.enteringTimer = window.setTimeout(() => {
            this.setState({
              transitionStatus: TransitionStatus.Entered
            });
          }, parseInt(themeDefault.motion["motion-duration-100"], 10));
        });
      }
      if (!this.props.active && oldProps.active) {
        this.clearTransitionTimeout();
        this.setState({
          transitionStatus: TransitionStatus.Exited
        });
      }
      if (this.props.activator !== oldProps.activator) {
        this.observer?.unobserve(oldProps.activator);
        this.observer?.observe(this.props.activator);
      }
    }
    componentWillUnmount() {
      this.clearTransitionTimeout();
      this.observer?.disconnect();
    }
    render() {
      const {
        active,
        activator,
        fullWidth,
        preferredPosition = "below",
        preferredAlignment = "center",
        preferInputActivator = true,
        fixed,
        zIndexOverride
      } = this.props;
      const {
        transitionStatus
      } = this.state;
      if (transitionStatus === TransitionStatus.Exited && !active)
        return null;
      const className = classNames(styles23.PopoverOverlay, transitionStatus === TransitionStatus.Entering && styles23["PopoverOverlay-entering"], transitionStatus === TransitionStatus.Entered && styles23["PopoverOverlay-open"], transitionStatus === TransitionStatus.Exiting && styles23["PopoverOverlay-exiting"], preferredPosition === "cover" && styles23["PopoverOverlay-noAnimation"]);
      return /* @__PURE__ */ import_react98.default.createElement(PositionedOverlay, {
        ref: this.overlayRef,
        fullWidth,
        active,
        activator,
        preferInputActivator,
        preferredPosition,
        preferredAlignment,
        render: this.renderPopover.bind(this),
        fixed,
        onScrollOut: this.handleScrollOut,
        classNames: className,
        zIndexOverride
      });
    }
    clearTransitionTimeout() {
      if (this.enteringTimer) {
        window.clearTimeout(this.enteringTimer);
      }
    }
    focusContent() {
      const {
        autofocusTarget = "container"
      } = this.props;
      if (autofocusTarget === "none" || this.contentNode == null) {
        return;
      }
      requestAnimationFrame(() => {
        if (this.contentNode.current == null) {
          return;
        }
        const focusableChild = findFirstKeyboardFocusableNode(this.contentNode.current);
        if (focusableChild && autofocusTarget === "first-node") {
          focusableChild.focus({
            preventScroll: true
          });
        } else {
          this.contentNode.current.focus({
            preventScroll: true
          });
        }
      });
    }
  };
  PopoverOverlay.contextType = PortalsManagerContext;
  function renderPopoverContent(children, props) {
    const childrenArray = import_react98.Children.toArray(children);
    if (isElementOfType(childrenArray[0], Pane)) {
      return childrenArray;
    }
    return wrapWithComponent(childrenArray, Pane, props);
  }
  function nodeContainsDescendant(rootNode, descendant) {
    if (rootNode === descendant) {
      return true;
    }
    let parent = descendant.parentNode;
    while (parent != null) {
      if (parent === rootNode) {
        return true;
      }
      parent = parent.parentNode;
    }
    return false;
  }
  function wasContentNodeDescendant(composedPath, contentNode) {
    return contentNode.current != null && composedPath.includes(contentNode.current);
  }
  function wasPolarisPortalDescendant(composedPath, portalsContainerElement) {
    return composedPath.some((eventTarget) => eventTarget instanceof Node && portalsContainerElement?.contains(eventTarget));
  }

  // node_modules/@shopify/polaris/build/esm/components/Popover/Popover.js
  var PopoverComponent = /* @__PURE__ */ (0, import_react99.forwardRef)(function Popover({
    activatorWrapper = "div",
    children,
    onClose,
    activator,
    preventFocusOnClose,
    active,
    fixed,
    ariaHaspopup,
    preferInputActivator = true,
    zIndexOverride,
    ...rest
  }, ref) {
    const [isDisplayed, setIsDisplay] = (0, import_react99.useState)(false);
    const [activatorNode, setActivatorNode] = (0, import_react99.useState)();
    const overlayRef = (0, import_react99.useRef)(null);
    const activatorContainer = (0, import_react99.useRef)(null);
    const WrapperComponent = activatorWrapper;
    const id = (0, import_react99.useId)();
    function forceUpdatePosition() {
      overlayRef.current?.forceUpdatePosition();
    }
    const handleClose = (source) => {
      onClose(source);
      if (activatorContainer.current == null || preventFocusOnClose) {
        return;
      }
      if (source === PopoverCloseSource.FocusOut && activatorNode) {
        const focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode) || findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
        if (!focusNextFocusableNode(focusableActivator, isInPortal)) {
          focusableActivator.focus();
        }
      } else if (source === PopoverCloseSource.EscapeKeypress && activatorNode) {
        const focusableActivator = findFirstFocusableNodeIncludingDisabled(activatorNode) || findFirstFocusableNodeIncludingDisabled(activatorContainer.current) || activatorContainer.current;
        if (focusableActivator) {
          focusableActivator.focus();
        } else {
          focusNextFocusableNode(focusableActivator, isInPortal);
        }
      }
    };
    (0, import_react99.useImperativeHandle)(ref, () => {
      return {
        forceUpdatePosition,
        close: (target = "activator") => {
          const source = target === "activator" ? PopoverCloseSource.EscapeKeypress : PopoverCloseSource.FocusOut;
          handleClose(source);
        }
      };
    });
    const setAccessibilityAttributes = (0, import_react99.useCallback)(() => {
      if (activatorContainer.current == null) {
        return;
      }
      const firstFocusable = findFirstFocusableNodeIncludingDisabled(activatorContainer.current);
      const focusableActivator = firstFocusable || activatorContainer.current;
      const activatorDisabled = "disabled" in focusableActivator && Boolean(focusableActivator.disabled);
      setActivatorAttributes(focusableActivator, {
        id,
        active,
        ariaHaspopup,
        activatorDisabled
      });
    }, [id, active, ariaHaspopup]);
    (0, import_react99.useEffect)(() => {
      function setDisplayState() {
        setIsDisplay(Boolean(activatorContainer.current && (activatorContainer.current.offsetParent !== null || activatorContainer.current === activatorContainer.current.ownerDocument.body && activatorContainer.current.clientWidth > 0)));
      }
      if (!activatorContainer.current) {
        return;
      }
      const observer = new ResizeObserver(setDisplayState);
      observer.observe(activatorContainer.current);
      setDisplayState();
      return () => {
        observer.disconnect();
      };
    }, []);
    (0, import_react99.useEffect)(() => {
      if (!activatorNode && activatorContainer.current) {
        setActivatorNode(activatorContainer.current.firstElementChild);
      } else if (activatorNode && activatorContainer.current && !activatorContainer.current.contains(activatorNode)) {
        setActivatorNode(activatorContainer.current.firstElementChild);
      }
      setAccessibilityAttributes();
    }, [activatorNode, setAccessibilityAttributes]);
    (0, import_react99.useEffect)(() => {
      if (activatorNode && activatorContainer.current) {
        setActivatorNode(activatorContainer.current.firstElementChild);
      }
      setAccessibilityAttributes();
    }, [activatorNode, setAccessibilityAttributes]);
    const portal2 = activatorNode && isDisplayed ? /* @__PURE__ */ import_react99.default.createElement(Portal, {
      idPrefix: "popover"
    }, /* @__PURE__ */ import_react99.default.createElement(PopoverOverlay, Object.assign({
      ref: overlayRef,
      id,
      activator: activatorNode,
      preferInputActivator,
      onClose: handleClose,
      active,
      fixed,
      zIndexOverride
    }, rest), children)) : null;
    return /* @__PURE__ */ import_react99.default.createElement(WrapperComponent, {
      ref: activatorContainer
    }, import_react99.Children.only(activator), portal2);
  });
  function isInPortal(element) {
    let parentElement = element.parentElement;
    while (parentElement) {
      if (parentElement.matches(portal.selector))
        return false;
      parentElement = parentElement.parentElement;
    }
    return true;
  }
  var Popover2 = Object.assign(PopoverComponent, {
    Pane,
    Section: Section2
  });

  // node_modules/@shopify/polaris/build/esm/utilities/listbox/context.js
  var import_react100 = __toESM(require_react());
  var WithinListboxContext = /* @__PURE__ */ (0, import_react100.createContext)(false);

  // node_modules/@shopify/polaris/build/esm/components/Checkbox/Checkbox.js
  var import_react102 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Checkbox/Checkbox.css.js
  var styles24 = {
    "Checkbox": "Polaris-Checkbox",
    "ChoiceLabel": "Polaris-Checkbox__ChoiceLabel",
    "Backdrop": "Polaris-Checkbox__Backdrop",
    "Input": "Polaris-Checkbox__Input",
    "Input-indeterminate": "Polaris-Checkbox__Input--indeterminate",
    "Icon": "Polaris-Checkbox__Icon",
    "animated": "Polaris-Checkbox--animated",
    "toneMagic": "Polaris-Checkbox--toneMagic",
    "hover": "Polaris-Checkbox--hover",
    "error": "Polaris-Checkbox--error",
    "checked": "Polaris-Checkbox--checked",
    "pathAnimation": "Polaris-Checkbox--pathAnimation"
  };

  // node_modules/@shopify/polaris/build/esm/components/Choice/Choice.js
  var import_react101 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Choice/Choice.css.js
  var styles25 = {
    "Choice": "Polaris-Choice",
    "labelHidden": "Polaris-Choice--labelHidden",
    "Label": "Polaris-Choice__Label",
    "Control": "Polaris-Choice__Control",
    "disabled": "Polaris-Choice--disabled",
    "toneMagic": "Polaris-Choice--toneMagic",
    "Descriptions": "Polaris-Choice__Descriptions",
    "HelpText": "Polaris-Choice__HelpText"
  };

  // node_modules/@shopify/polaris/build/esm/components/Choice/Choice.js
  function Choice({
    id,
    label,
    disabled,
    error: error2,
    children,
    labelHidden,
    helpText,
    onClick,
    labelClassName,
    fill,
    bleed,
    bleedBlockStart,
    bleedBlockEnd,
    bleedInlineStart,
    bleedInlineEnd,
    tone
  }) {
    const className = classNames(styles25.Choice, labelHidden && styles25.labelHidden, disabled && styles25.disabled, tone && styles25[variationName("tone", tone)], labelClassName);
    const labelStyle = {
      // Pass through overrides for bleed values if they're set by the prop
      ...getResponsiveProps("choice", "bleed-block-end", "space", bleedBlockEnd || bleed),
      ...getResponsiveProps("choice", "bleed-block-start", "space", bleedBlockStart || bleed),
      ...getResponsiveProps("choice", "bleed-inline-start", "space", bleedInlineStart || bleed),
      ...getResponsiveProps("choice", "bleed-inline-end", "space", bleedInlineEnd || bleed),
      ...Object.fromEntries(Object.entries(getResponsiveValue("choice", "fill", fill)).map(
        // Map "true" => "100%" and "false" => "auto" for use in
        // inline/block-size calc()
        ([key, value]) => [key, value ? "100%" : "auto"]
      ))
    };
    const labelMarkup = (
      // NOTE: Can't use a Box here for a few reasons:
      // - as="label" fails `Element` typecheck (even though the JS works)
      // - Can't pass hard coded values to padding (forced to tokens)
      // - Can't pass negative values to padding
      // - Can't pass margins at all
      /* @__PURE__ */ import_react101.default.createElement("label", {
        className,
        htmlFor: id,
        onClick,
        style: sanitizeCustomProperties(labelStyle)
      }, /* @__PURE__ */ import_react101.default.createElement("span", {
        className: styles25.Control
      }, children), /* @__PURE__ */ import_react101.default.createElement("span", {
        className: styles25.Label
      }, /* @__PURE__ */ import_react101.default.createElement(Text, {
        as: "span",
        variant: "bodyMd"
      }, label)))
    );
    const helpTextMarkup = helpText ? /* @__PURE__ */ import_react101.default.createElement("div", {
      className: styles25.HelpText,
      id: helpTextID2(id)
    }, /* @__PURE__ */ import_react101.default.createElement(Text, {
      as: "span",
      tone: disabled ? void 0 : "subdued"
    }, helpText)) : null;
    const errorMarkup = error2 && typeof error2 !== "boolean" && /* @__PURE__ */ import_react101.default.createElement("div", {
      className: styles25.Error
    }, /* @__PURE__ */ import_react101.default.createElement(InlineError, {
      message: error2,
      fieldID: id
    }));
    const descriptionMarkup = helpTextMarkup || errorMarkup ? /* @__PURE__ */ import_react101.default.createElement("div", {
      className: styles25.Descriptions
    }, errorMarkup, helpTextMarkup) : null;
    return descriptionMarkup ? /* @__PURE__ */ import_react101.default.createElement("div", null, labelMarkup, descriptionMarkup) : labelMarkup;
  }
  function helpTextID2(id) {
    return `${id}HelpText`;
  }

  // node_modules/@shopify/polaris/build/esm/components/Checkbox/Checkbox.js
  var Checkbox = /* @__PURE__ */ (0, import_react102.forwardRef)(function Checkbox2({
    ariaControls,
    ariaDescribedBy: ariaDescribedByProp,
    label,
    labelHidden,
    checked = false,
    helpText,
    disabled,
    id: idProp,
    name,
    value,
    error: error2,
    onChange,
    onFocus,
    onBlur,
    labelClassName,
    fill,
    bleed,
    bleedBlockStart,
    bleedBlockEnd,
    bleedInlineStart,
    bleedInlineEnd,
    tone
  }, ref) {
    const inputNode = (0, import_react102.useRef)(null);
    const uniqId = (0, import_react102.useId)();
    const id = idProp ?? uniqId;
    const isWithinListbox = (0, import_react102.useContext)(WithinListboxContext);
    (0, import_react102.useImperativeHandle)(ref, () => ({
      focus: () => {
        if (inputNode.current) {
          inputNode.current.focus();
        }
      }
    }));
    const handleBlur = () => {
      onBlur && onBlur();
    };
    const handleOnClick = () => {
      if (onChange == null || inputNode.current == null || disabled) {
        return;
      }
      onChange(inputNode.current.checked, id);
      inputNode.current.focus();
    };
    const describedBy = [];
    if (error2 && typeof error2 !== "boolean") {
      describedBy.push(errorTextID(id));
    }
    if (helpText) {
      describedBy.push(helpTextID2(id));
    }
    if (ariaDescribedByProp) {
      describedBy.push(ariaDescribedByProp);
    }
    const ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0;
    const wrapperClassName = classNames(styles24.Checkbox, error2 && styles24.error);
    const isIndeterminate = checked === "indeterminate";
    const isChecked = !isIndeterminate && Boolean(checked);
    const indeterminateAttributes = isIndeterminate ? {
      indeterminate: "true",
      "aria-checked": "mixed"
    } : {
      "aria-checked": isChecked
    };
    const iconSource = /* @__PURE__ */ import_react102.default.createElement("svg", {
      viewBox: "0 0 16 16",
      shapeRendering: "geometricPrecision",
      textRendering: "geometricPrecision"
    }, /* @__PURE__ */ import_react102.default.createElement("path", {
      className: classNames(checked && styles24.checked),
      d: "M1.5,5.5L3.44655,8.22517C3.72862,8.62007,4.30578,8.64717,4.62362,8.28044L10.5,1.5",
      transform: "translate(2 2.980376)",
      opacity: "0",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: "2",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      pathLength: "1"
    }));
    const inputClassName = classNames(styles24.Input, isIndeterminate && styles24["Input-indeterminate"], tone && styles24[variationName("tone", tone)]);
    const extraChoiceProps = {
      helpText,
      error: error2,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd
    };
    return /* @__PURE__ */ import_react102.default.createElement(Choice, Object.assign({
      id,
      label,
      labelHidden,
      disabled,
      labelClassName: classNames(styles24.ChoiceLabel, labelClassName),
      fill,
      tone
    }, extraChoiceProps), /* @__PURE__ */ import_react102.default.createElement("span", {
      className: wrapperClassName
    }, /* @__PURE__ */ import_react102.default.createElement("input", Object.assign({
      ref: inputNode,
      id,
      name,
      value,
      type: "checkbox",
      checked: isChecked,
      disabled,
      className: inputClassName,
      onBlur: handleBlur,
      onChange: noop4,
      onClick: handleOnClick,
      onFocus,
      "aria-invalid": error2 != null,
      "aria-controls": ariaControls,
      "aria-describedby": ariaDescribedBy,
      role: isWithinListbox ? "presentation" : "checkbox"
    }, indeterminateAttributes)), /* @__PURE__ */ import_react102.default.createElement("span", {
      className: styles24.Backdrop,
      onClick: stopPropagation,
      onKeyUp: stopPropagation
    }), /* @__PURE__ */ import_react102.default.createElement("span", {
      className: classNames(styles24.Icon, !isIndeterminate && styles24.animated)
    }, isIndeterminate ? /* @__PURE__ */ import_react102.default.createElement(Icon, {
      source: SvgMinusIcon
    }) : iconSource)));
  });
  function noop4() {
  }
  function stopPropagation(event) {
    event.stopPropagation();
  }

  // node_modules/@shopify/polaris/build/esm/components/Backdrop/Backdrop.js
  var import_react105 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Backdrop/Backdrop.css.js
  var styles26 = {
    "Backdrop": "Polaris-Backdrop",
    "transparent": "Polaris-Backdrop--transparent",
    "belowNavigation": "Polaris-Backdrop--belowNavigation"
  };

  // node_modules/@shopify/polaris/build/esm/components/ScrollLock/ScrollLock.js
  var import_react104 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/scroll-lock-manager/hooks.js
  var import_react103 = __toESM(require_react());
  function useScrollLockManager() {
    const scrollLockManager = (0, import_react103.useContext)(ScrollLockManagerContext);
    if (!scrollLockManager) {
      throw new MissingAppProviderError("No ScrollLockManager was provided.");
    }
    return scrollLockManager;
  }

  // node_modules/@shopify/polaris/build/esm/components/ScrollLock/ScrollLock.js
  function ScrollLock(_) {
    const scrollLockManager = useScrollLockManager();
    (0, import_react104.useEffect)(() => {
      scrollLockManager.registerScrollLock();
      return () => {
        scrollLockManager.unregisterScrollLock();
      };
    }, [scrollLockManager]);
    return null;
  }

  // node_modules/@shopify/polaris/build/esm/components/Backdrop/Backdrop.js
  function Backdrop(props) {
    const {
      onClick,
      onTouchStart,
      belowNavigation,
      transparent,
      setClosing
    } = props;
    const className = classNames(styles26.Backdrop, belowNavigation && styles26.belowNavigation, transparent && styles26.transparent);
    const handleMouseDown = () => {
      if (setClosing) {
        setClosing(true);
      }
    };
    const handleClick = () => {
      if (setClosing) {
        setClosing(false);
      }
      if (onClick) {
        onClick();
      }
    };
    return /* @__PURE__ */ import_react105.default.createElement(import_react105.default.Fragment, null, /* @__PURE__ */ import_react105.default.createElement(ScrollLock, null), /* @__PURE__ */ import_react105.default.createElement("div", {
      className,
      onClick: handleClick,
      onTouchStart,
      onMouseDown: handleMouseDown
    }));
  }

  // node_modules/@shopify/polaris/build/esm/components/ButtonGroup/ButtonGroup.js
  var import_react107 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/ButtonGroup/ButtonGroup.css.js
  var styles27 = {
    "ButtonGroup": "Polaris-ButtonGroup",
    "Item": "Polaris-ButtonGroup__Item",
    "Item-plain": "Polaris-ButtonGroup__Item--plain",
    "variantSegmented": "Polaris-ButtonGroup--variantSegmented",
    "Item-focused": "Polaris-ButtonGroup__Item--focused",
    "fullWidth": "Polaris-ButtonGroup--fullWidth",
    "extraTight": "Polaris-ButtonGroup--extraTight",
    "tight": "Polaris-ButtonGroup--tight",
    "loose": "Polaris-ButtonGroup--loose",
    "noWrap": "Polaris-ButtonGroup--noWrap"
  };

  // node_modules/@shopify/polaris/build/esm/components/ButtonGroup/components/Item/Item.js
  var import_react106 = __toESM(require_react());
  function Item3({
    button
  }) {
    const {
      value: focused,
      setTrue: forceTrueFocused,
      setFalse: forceFalseFocused
    } = useToggle(false);
    const className = classNames(styles27.Item, focused && styles27["Item-focused"], button.props.variant === "plain" && styles27["Item-plain"]);
    return /* @__PURE__ */ import_react106.default.createElement("div", {
      className,
      onFocus: forceTrueFocused,
      onBlur: forceFalseFocused
    }, button);
  }

  // node_modules/@shopify/polaris/build/esm/components/ButtonGroup/ButtonGroup.js
  function ButtonGroup({
    children,
    gap,
    variant,
    fullWidth,
    connectedTop,
    noWrap
  }) {
    const className = classNames(styles27.ButtonGroup, gap && styles27[gap], variant && styles27[variationName("variant", variant)], fullWidth && styles27.fullWidth, noWrap && styles27.noWrap);
    const contents = elementChildren(children).map((child, index) => /* @__PURE__ */ import_react107.default.createElement(Item3, {
      button: child,
      key: index
    }));
    return /* @__PURE__ */ import_react107.default.createElement("div", {
      className,
      "data-buttongroup-variant": variant,
      "data-buttongroup-connected-top": connectedTop,
      "data-buttongroup-full-width": fullWidth,
      "data-buttongroup-no-wrap": noWrap
    }, contents);
  }

  // node_modules/@shopify/polaris/build/esm/components/Bleed/Bleed.js
  var import_react108 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Bleed/Bleed.css.js
  var styles28 = {
    "Bleed": "Polaris-Bleed"
  };

  // node_modules/@shopify/polaris/build/esm/components/Bleed/Bleed.js
  var Bleed = ({
    marginInline,
    marginBlock,
    marginBlockStart,
    marginBlockEnd,
    marginInlineStart,
    marginInlineEnd,
    children
  }) => {
    const getNegativeMargins = (direction) => {
      const xAxis = ["marginInlineStart", "marginInlineEnd"];
      const yAxis = ["marginBlockStart", "marginBlockEnd"];
      const directionValues = {
        marginBlockStart,
        marginBlockEnd,
        marginInlineStart,
        marginInlineEnd,
        marginInline,
        marginBlock
      };
      if (directionValues[direction]) {
        return directionValues[direction];
      } else if (xAxis.includes(direction) && marginInline) {
        return directionValues.marginInline;
      } else if (yAxis.includes(direction) && marginBlock) {
        return directionValues.marginBlock;
      }
    };
    const negativeMarginBlockStart = getNegativeMargins("marginBlockStart");
    const negativeMarginBlockEnd = getNegativeMargins("marginBlockEnd");
    const negativeMarginInlineStart = getNegativeMargins("marginInlineStart");
    const negativeMarginInlineEnd = getNegativeMargins("marginInlineEnd");
    const style = {
      ...getResponsiveProps("bleed", "margin-block-start", "space", negativeMarginBlockStart),
      ...getResponsiveProps("bleed", "margin-block-end", "space", negativeMarginBlockEnd),
      ...getResponsiveProps("bleed", "margin-inline-start", "space", negativeMarginInlineStart),
      ...getResponsiveProps("bleed", "margin-inline-end", "space", negativeMarginInlineEnd)
    };
    return /* @__PURE__ */ import_react108.default.createElement("div", {
      className: styles28.Bleed,
      style: sanitizeCustomProperties(style)
    }, children);
  };

  // node_modules/@shopify/polaris/build/esm/components/BulkActions/BulkActions.js
  var import_react114 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/BulkActions/utilities.js
  function getVisibleAndHiddenActionsIndices(promotedActions = [], disclosureWidth, actionsWidths, containerWidth) {
    const sumTabWidths = actionsWidths.reduce((sum, width) => sum + width, 0);
    const arrayOfPromotedActionsIndices = promotedActions.map((_, index) => {
      return index;
    });
    const visiblePromotedActions = [];
    const hiddenPromotedActions = [];
    if (containerWidth > sumTabWidths) {
      visiblePromotedActions.push(...arrayOfPromotedActionsIndices);
    } else {
      let accumulatedWidth = 0;
      let hasReturned = false;
      arrayOfPromotedActionsIndices.forEach((currentPromotedActionsIndex) => {
        const currentActionsWidth = actionsWidths[currentPromotedActionsIndex];
        const notEnoughSpace = accumulatedWidth + currentActionsWidth >= containerWidth - disclosureWidth;
        if (notEnoughSpace || hasReturned) {
          hiddenPromotedActions.push(currentPromotedActionsIndex);
          hasReturned = true;
          return;
        }
        visiblePromotedActions.push(currentPromotedActionsIndex);
        accumulatedWidth += currentActionsWidth;
      });
    }
    return {
      visiblePromotedActions,
      hiddenPromotedActions
    };
  }
  function instanceOfBulkActionListSectionArray(actions) {
    const validList = actions.filter((action) => {
      return action.items;
    });
    return actions.length === validList.length;
  }
  function instanceOfBulkActionArray(actions) {
    const validList = actions.filter((action) => {
      return !action.items;
    });
    return actions.length === validList.length;
  }
  function instanceOfMenuGroupDescriptor(action) {
    return "title" in action && "actions" in action;
  }
  function instanceOfBulkActionListSection(action) {
    return "items" in action;
  }
  function getActionSections(actions) {
    if (!actions || actions.length === 0) {
      return;
    }
    if (instanceOfBulkActionListSectionArray(actions)) {
      return actions;
    }
    if (instanceOfBulkActionArray(actions)) {
      return [{
        items: actions
      }];
    }
  }
  function isNewBadgeInBadgeActions(actionSections) {
    if (!actionSections)
      return false;
    for (const action of actionSections) {
      for (const item of action.items) {
        if (item.badge?.tone === "new")
          return true;
      }
    }
    return false;
  }

  // node_modules/@shopify/polaris/build/esm/components/BulkActions/BulkActions.css.js
  var styles29 = {
    "BulkActionsOuterLayout": "Polaris-BulkActions__BulkActionsOuterLayout",
    "BulkActionsSelectAllWrapper": "Polaris-BulkActions__BulkActionsSelectAllWrapper",
    "BulkActionsPromotedActionsWrapper": "Polaris-BulkActions__BulkActionsPromotedActionsWrapper",
    "BulkActionsLayout": "Polaris-BulkActions__BulkActionsLayout",
    "BulkActionsLayout--measuring": "Polaris-BulkActions--bulkActionsLayoutMeasuring",
    "BulkActionsMeasurerLayout": "Polaris-BulkActions__BulkActionsMeasurerLayout",
    "BulkActionButton": "Polaris-BulkActions__BulkActionButton",
    "disabled": "Polaris-BulkActions--disabled",
    "AllAction": "Polaris-BulkActions__AllAction"
  };

  // node_modules/@shopify/polaris/build/esm/components/BulkActions/components/BulkActionMenu/BulkActionMenu.js
  var import_react111 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/BulkActions/components/BulkActionButton/BulkActionButton.js
  var import_react110 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Indicator/Indicator.js
  var import_react109 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Indicator/Indicator.css.js
  var styles30 = {
    "Indicator": "Polaris-Indicator",
    "pulseIndicator": "Polaris-Indicator--pulseIndicator"
  };

  // node_modules/@shopify/polaris/build/esm/components/Indicator/Indicator.js
  function Indicator({
    pulse = true
  }) {
    const className = classNames(styles30.Indicator, pulse && styles30.pulseIndicator);
    return /* @__PURE__ */ import_react109.default.createElement("span", {
      className
    });
  }

  // node_modules/@shopify/polaris/build/esm/components/BulkActions/components/BulkActionButton/BulkActionButton.js
  function BulkActionButton({
    handleMeasurement,
    url,
    external,
    onAction,
    content,
    disclosure,
    accessibilityLabel,
    disabled,
    destructive,
    indicator,
    showContentInButton,
    size
  }) {
    const bulkActionButton = (0, import_react110.useRef)(null);
    useComponentDidMount(() => {
      if (handleMeasurement && bulkActionButton.current) {
        const width = bulkActionButton.current.getBoundingClientRect().width;
        handleMeasurement(width);
      }
    });
    const isActivatorForMoreActionsPopover = disclosure && !showContentInButton;
    const buttonContent = isActivatorForMoreActionsPopover ? void 0 : content;
    const buttonMarkup = /* @__PURE__ */ import_react110.default.createElement(Button, {
      external,
      url,
      accessibilityLabel: isActivatorForMoreActionsPopover ? content : accessibilityLabel,
      tone: destructive ? "critical" : void 0,
      disclosure: disclosure && showContentInButton,
      onClick: onAction,
      disabled,
      size,
      icon: isActivatorForMoreActionsPopover ? /* @__PURE__ */ import_react110.default.createElement(Icon, {
        source: SvgMenuHorizontalIcon,
        tone: "base"
      }) : void 0
    }, buttonContent);
    return /* @__PURE__ */ import_react110.default.createElement("div", {
      className: styles29.BulkActionButton,
      ref: bulkActionButton
    }, isActivatorForMoreActionsPopover ? /* @__PURE__ */ import_react110.default.createElement(Tooltip, {
      content,
      preferredPosition: "below"
    }, buttonMarkup) : buttonMarkup, indicator && /* @__PURE__ */ import_react110.default.createElement(Indicator, null));
  }

  // node_modules/@shopify/polaris/build/esm/components/BulkActions/components/BulkActionMenu/BulkActionMenu.js
  function BulkActionMenu({
    title,
    actions,
    isNewBadgeInBadgeActions: isNewBadgeInBadgeActions2,
    size
  }) {
    const {
      value: isVisible,
      toggle: toggleMenuVisibility
    } = useToggle(false);
    return /* @__PURE__ */ import_react111.default.createElement(import_react111.default.Fragment, null, /* @__PURE__ */ import_react111.default.createElement(Popover2, {
      active: isVisible,
      activator: /* @__PURE__ */ import_react111.default.createElement(BulkActionButton, {
        disclosure: true,
        showContentInButton: true,
        onAction: toggleMenuVisibility,
        content: title,
        indicator: isNewBadgeInBadgeActions2,
        size
      }),
      onClose: toggleMenuVisibility,
      preferInputActivator: true
    }, /* @__PURE__ */ import_react111.default.createElement(ActionList, {
      items: actions,
      onActionAnyItem: toggleMenuVisibility
    })));
  }

  // node_modules/@shopify/polaris/build/esm/components/CheckableButton/CheckableButton.js
  var import_react112 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/CheckableButton/CheckableButton.css.js
  var styles31 = {
    "CheckableButton": "Polaris-CheckableButton",
    "Checkbox": "Polaris-CheckableButton__Checkbox",
    "Label": "Polaris-CheckableButton__Label"
  };

  // node_modules/@shopify/polaris/build/esm/components/CheckableButton/CheckableButton.js
  var CheckableButton = /* @__PURE__ */ (0, import_react112.forwardRef)(function CheckableButton2({
    accessibilityLabel,
    label = "",
    onToggleAll,
    selected,
    disabled,
    ariaLive
  }, ref) {
    const checkBoxRef = (0, import_react112.useRef)(null);
    function focus() {
      checkBoxRef?.current?.focus();
    }
    (0, import_react112.useImperativeHandle)(ref, () => {
      return {
        focus
      };
    });
    return /* @__PURE__ */ import_react112.default.createElement("div", {
      className: styles31.CheckableButton,
      onClick: onToggleAll
    }, /* @__PURE__ */ import_react112.default.createElement("div", {
      className: styles31.Checkbox
    }, /* @__PURE__ */ import_react112.default.createElement(Checkbox, {
      label: accessibilityLabel,
      labelHidden: true,
      checked: selected,
      disabled,
      onChange: onToggleAll,
      ref: checkBoxRef
    })), label ? /* @__PURE__ */ import_react112.default.createElement("span", {
      className: styles31.Label,
      "aria-live": ariaLive
    }, /* @__PURE__ */ import_react112.default.createElement(Text, {
      as: "span",
      variant: "bodySm",
      fontWeight: "medium"
    }, label)) : null);
  });

  // node_modules/@shopify/polaris/build/esm/components/BulkActions/components/BulkActionsMeasurer/BulkActionsMeasurer.js
  var import_react113 = __toESM(require_react());
  var ACTION_SPACING = 4;
  function BulkActionsMeasurer({
    promotedActions = [],
    disabled,
    buttonSize,
    handleMeasurement: handleMeasurementProp
  }) {
    const i18n = useI18n();
    const containerNode = (0, import_react113.useRef)(null);
    const activatorLabel = i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel");
    const activator = /* @__PURE__ */ import_react113.default.createElement(BulkActionButton, {
      disclosure: true,
      content: activatorLabel
    });
    const handleMeasurement = (0, import_react113.useCallback)(() => {
      if (!containerNode.current) {
        return;
      }
      const containerWidth = containerNode.current.offsetWidth;
      const hiddenActionNodes = containerNode.current.children;
      const hiddenActionNodesArray = Array.from(hiddenActionNodes);
      const hiddenActionsWidths = hiddenActionNodesArray.map((node) => {
        const buttonWidth = Math.ceil(node.getBoundingClientRect().width);
        return buttonWidth + ACTION_SPACING;
      });
      const disclosureWidth = hiddenActionsWidths.pop() || 0;
      handleMeasurementProp({
        containerWidth,
        disclosureWidth,
        hiddenActionsWidths
      });
    }, [handleMeasurementProp]);
    (0, import_react113.useEffect)(() => {
      handleMeasurement();
    }, [handleMeasurement, promotedActions]);
    const promotedActionsMarkup = promotedActions.map((action, index) => {
      if (instanceOfMenuGroupDescriptor(action)) {
        return /* @__PURE__ */ import_react113.default.createElement(BulkActionButton, {
          key: index,
          disclosure: true,
          showContentInButton: true,
          content: action.title,
          size: buttonSize
        });
      }
      return /* @__PURE__ */ import_react113.default.createElement(BulkActionButton, Object.assign({
        key: index,
        disabled
      }, action, {
        size: buttonSize
      }));
    });
    useEventListener("resize", handleMeasurement);
    return /* @__PURE__ */ import_react113.default.createElement("div", {
      className: styles29.BulkActionsMeasurerLayout,
      ref: containerNode
    }, promotedActionsMarkup, activator);
  }

  // node_modules/@shopify/polaris/build/esm/components/BulkActions/BulkActions.js
  var BulkActions = /* @__PURE__ */ (0, import_react114.forwardRef)(function BulkActions2({
    promotedActions,
    actions,
    disabled,
    buttonSize,
    paginatedSelectAllAction,
    paginatedSelectAllText,
    label,
    accessibilityLabel,
    selected,
    onToggleAll,
    onMoreActionPopoverToggle,
    width,
    selectMode
  }, ref) {
    const i18n = useI18n();
    const [popoverActive, setPopoverActive] = (0, import_react114.useState)(false);
    const [state, setState] = (0, import_react114.useReducer)((data2, partialData) => {
      return {
        ...data2,
        ...partialData
      };
    }, {
      disclosureWidth: 0,
      containerWidth: Infinity,
      actionsWidths: [],
      visiblePromotedActions: [],
      hiddenPromotedActions: [],
      hasMeasured: false
    });
    const {
      visiblePromotedActions,
      hiddenPromotedActions,
      containerWidth,
      disclosureWidth,
      actionsWidths,
      hasMeasured
    } = state;
    (0, import_react114.useEffect)(() => {
      if (containerWidth === 0 || !promotedActions || promotedActions.length === 0) {
        return;
      }
      const {
        visiblePromotedActions: visiblePromotedActions2,
        hiddenPromotedActions: hiddenPromotedActions2
      } = getVisibleAndHiddenActionsIndices(promotedActions, disclosureWidth, actionsWidths, containerWidth);
      setState({
        visiblePromotedActions: visiblePromotedActions2,
        hiddenPromotedActions: hiddenPromotedActions2,
        hasMeasured: containerWidth !== Infinity
      });
    }, [containerWidth, disclosureWidth, promotedActions, actionsWidths]);
    const activatorLabel = !promotedActions || promotedActions && visiblePromotedActions.length === 0 ? i18n.translate("Polaris.ResourceList.BulkActions.actionsActivatorLabel") : i18n.translate("Polaris.ResourceList.BulkActions.moreActionsActivatorLabel");
    const paginatedSelectAllMarkup = paginatedSelectAllAction ? /* @__PURE__ */ import_react114.default.createElement(UnstyledButton, {
      className: styles29.AllAction,
      onClick: paginatedSelectAllAction.onAction,
      size: "slim",
      disabled
    }, /* @__PURE__ */ import_react114.default.createElement(Text, {
      as: "span",
      variant: "bodySm",
      fontWeight: "medium"
    }, paginatedSelectAllAction.content)) : null;
    const hasTextAndAction = paginatedSelectAllText && paginatedSelectAllAction;
    const ariaLive = hasTextAndAction ? "polite" : void 0;
    const checkableButtonProps = {
      accessibilityLabel,
      label: hasTextAndAction ? paginatedSelectAllText : label,
      selected,
      onToggleAll,
      disabled,
      ariaLive,
      ref
    };
    const togglePopover = (0, import_react114.useCallback)(() => {
      onMoreActionPopoverToggle?.(popoverActive);
      setPopoverActive((popoverActive2) => !popoverActive2);
    }, [onMoreActionPopoverToggle, popoverActive]);
    const handleMeasurement = (0, import_react114.useCallback)((measurements) => {
      const {
        hiddenActionsWidths: actionsWidths2,
        containerWidth: containerWidth2,
        disclosureWidth: disclosureWidth2
      } = measurements;
      if (!promotedActions || promotedActions.length === 0) {
        return;
      }
      const {
        visiblePromotedActions: visiblePromotedActions2,
        hiddenPromotedActions: hiddenPromotedActions2
      } = getVisibleAndHiddenActionsIndices(promotedActions, disclosureWidth2, actionsWidths2, containerWidth2);
      setState({
        visiblePromotedActions: visiblePromotedActions2,
        hiddenPromotedActions: hiddenPromotedActions2,
        actionsWidths: actionsWidths2,
        containerWidth: containerWidth2,
        disclosureWidth: disclosureWidth2,
        hasMeasured: true
      });
    }, [promotedActions]);
    const actionSections = getActionSections(actions);
    const promotedActionsMarkup = promotedActions ? promotedActions.filter((_, index) => {
      if (!visiblePromotedActions.includes(index)) {
        return false;
      }
      return true;
    }).map((action, index) => {
      if (instanceOfMenuGroupDescriptor(action)) {
        return /* @__PURE__ */ import_react114.default.createElement(BulkActionMenu, Object.assign({
          key: index
        }, action, {
          isNewBadgeInBadgeActions: isNewBadgeInBadgeActions(actionSections),
          size: buttonSize
        }));
      }
      return /* @__PURE__ */ import_react114.default.createElement(BulkActionButton, Object.assign({
        key: index,
        disabled
      }, action, {
        size: buttonSize
      }));
    }) : null;
    const hiddenPromotedActionObjects = hiddenPromotedActions.map((index) => promotedActions?.[index]);
    const mergedHiddenPromotedActions = hiddenPromotedActionObjects.reduce((memo11, action) => {
      if (!action)
        return memo11;
      if (instanceOfMenuGroupDescriptor(action)) {
        return memo11.concat(action.actions);
      }
      return memo11.concat(action);
    }, []);
    const hiddenPromotedSection = {
      items: mergedHiddenPromotedActions
    };
    const allHiddenActions = (0, import_react114.useMemo)(() => {
      if (actionSections) {
        return actionSections;
      }
      if (!actions) {
        return [];
      }
      let isAFlatArray = true;
      return actions.filter((action) => action).reduce((memo11, action) => {
        if (instanceOfBulkActionListSection(action)) {
          isAFlatArray = false;
          return memo11.concat(action);
        }
        if (isAFlatArray) {
          if (memo11.length === 0) {
            return [{
              items: [action]
            }];
          }
          const lastItem = memo11[memo11.length - 1];
          memo11.splice(memo11.length - 1, 1, {
            items: [...lastItem.items, action]
          });
          return memo11;
        }
        isAFlatArray = true;
        return memo11.concat({
          items: [action]
        });
      }, []);
    }, [actions, actionSections]);
    const activator = /* @__PURE__ */ import_react114.default.createElement(BulkActionButton, {
      disclosure: true,
      showContentInButton: !promotedActionsMarkup,
      onAction: togglePopover,
      content: activatorLabel,
      disabled,
      indicator: isNewBadgeInBadgeActions(actionSections),
      size: buttonSize
    });
    const actionsMarkup = allHiddenActions.length > 0 ? /* @__PURE__ */ import_react114.default.createElement(Popover2, {
      active: popoverActive,
      activator,
      preferredAlignment: "right",
      onClose: togglePopover
    }, /* @__PURE__ */ import_react114.default.createElement(ActionList, {
      sections: hiddenPromotedSection.items.length > 0 ? [hiddenPromotedSection, ...allHiddenActions] : allHiddenActions,
      onActionAnyItem: togglePopover
    })) : null;
    const measurerMarkup = /* @__PURE__ */ import_react114.default.createElement(BulkActionsMeasurer, {
      promotedActions,
      disabled,
      buttonSize,
      handleMeasurement
    });
    return /* @__PURE__ */ import_react114.default.createElement("div", {
      className: styles29.BulkActions,
      style: width ? {
        width
      } : void 0
    }, /* @__PURE__ */ import_react114.default.createElement(InlineStack, {
      gap: "400",
      blockAlign: "center"
    }, /* @__PURE__ */ import_react114.default.createElement("div", {
      className: styles29.BulkActionsSelectAllWrapper
    }, /* @__PURE__ */ import_react114.default.createElement(CheckableButton, checkableButtonProps), paginatedSelectAllMarkup), selectMode ? /* @__PURE__ */ import_react114.default.createElement("div", {
      className: styles29.BulkActionsPromotedActionsWrapper
    }, /* @__PURE__ */ import_react114.default.createElement(InlineStack, {
      gap: "100",
      blockAlign: "center"
    }, /* @__PURE__ */ import_react114.default.createElement("div", {
      className: styles29.BulkActionsOuterLayout
    }, measurerMarkup, /* @__PURE__ */ import_react114.default.createElement("div", {
      className: classNames(styles29.BulkActionsLayout, !hasMeasured && styles29["BulkActionsLayout--measuring"])
    }, promotedActionsMarkup)), actionsMarkup)) : null));
  });

  // node_modules/@shopify/polaris/build/esm/components/LegacyCard/LegacyCard.js
  var import_react120 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/LegacyCard/LegacyCard.css.js
  var styles32 = {
    "LegacyCard": "Polaris-LegacyCard",
    "Section": "Polaris-LegacyCard__Section",
    "subdued": "Polaris-LegacyCard--subdued",
    "Section-hideOnPrint": "Polaris-LegacyCard__Section--hideOnPrint",
    "hideOnPrint": "Polaris-LegacyCard--hideOnPrint",
    "Header": "Polaris-LegacyCard__Header",
    "Section-fullWidth": "Polaris-LegacyCard__Section--fullWidth",
    "Section-flush": "Polaris-LegacyCard__Section--flush",
    "Section-subdued": "Polaris-LegacyCard__Section--subdued",
    "SectionHeader": "Polaris-LegacyCard__SectionHeader",
    "Subsection": "Polaris-LegacyCard__Subsection",
    "Footer": "Polaris-LegacyCard__Footer",
    "LeftJustified": "Polaris-LegacyCard__LeftJustified",
    "FirstSectionPadding": "Polaris-LegacyCard__FirstSectionPadding",
    "LastSectionPadding": "Polaris-LegacyCard__LastSectionPadding"
  };

  // node_modules/@shopify/polaris/build/esm/components/LegacyCard/components/Header/Header.js
  var import_react115 = __toESM(require_react());
  function Header({
    children,
    title,
    actions
  }) {
    const actionMarkup = actions ? /* @__PURE__ */ import_react115.default.createElement(ButtonGroup, null, buttonsFrom(actions, {
      variant: "plain"
    })) : null;
    const titleMarkup = /* @__PURE__ */ (0, import_react115.isValidElement)(title) ? title : /* @__PURE__ */ import_react115.default.createElement(Text, {
      variant: "headingSm",
      as: "h2"
    }, title);
    const headingMarkup = actionMarkup || children ? /* @__PURE__ */ import_react115.default.createElement(InlineStack, {
      wrap: false,
      gap: "200",
      align: "space-between",
      blockAlign: "center"
    }, titleMarkup, /* @__PURE__ */ import_react115.default.createElement(InlineStack, {
      wrap: false,
      gap: "400",
      blockAlign: "center"
    }, actionMarkup, children)) : titleMarkup;
    return /* @__PURE__ */ import_react115.default.createElement("div", {
      className: styles32.Header
    }, headingMarkup);
  }

  // node_modules/@shopify/polaris/build/esm/components/LegacyCard/components/Section/Section.js
  var import_react118 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/LegacyStack/LegacyStack.js
  var import_react117 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/LegacyStack/LegacyStack.css.js
  var styles33 = {
    "LegacyStack": "Polaris-LegacyStack",
    "Item": "Polaris-LegacyStack__Item",
    "noWrap": "Polaris-LegacyStack--noWrap",
    "spacingNone": "Polaris-LegacyStack--spacingNone",
    "spacingExtraTight": "Polaris-LegacyStack--spacingExtraTight",
    "spacingTight": "Polaris-LegacyStack--spacingTight",
    "spacingBaseTight": "Polaris-LegacyStack--spacingBaseTight",
    "spacingLoose": "Polaris-LegacyStack--spacingLoose",
    "spacingExtraLoose": "Polaris-LegacyStack--spacingExtraLoose",
    "distributionLeading": "Polaris-LegacyStack--distributionLeading",
    "distributionTrailing": "Polaris-LegacyStack--distributionTrailing",
    "distributionCenter": "Polaris-LegacyStack--distributionCenter",
    "distributionEqualSpacing": "Polaris-LegacyStack--distributionEqualSpacing",
    "distributionFill": "Polaris-LegacyStack--distributionFill",
    "distributionFillEvenly": "Polaris-LegacyStack--distributionFillEvenly",
    "alignmentLeading": "Polaris-LegacyStack--alignmentLeading",
    "alignmentTrailing": "Polaris-LegacyStack--alignmentTrailing",
    "alignmentCenter": "Polaris-LegacyStack--alignmentCenter",
    "alignmentFill": "Polaris-LegacyStack--alignmentFill",
    "alignmentBaseline": "Polaris-LegacyStack--alignmentBaseline",
    "vertical": "Polaris-LegacyStack--vertical",
    "Item-fill": "Polaris-LegacyStack__Item--fill"
  };

  // node_modules/@shopify/polaris/build/esm/components/LegacyStack/components/Item/Item.js
  var import_react116 = __toESM(require_react());
  function Item4({
    children,
    fill
  }) {
    const className = classNames(styles33.Item, fill && styles33["Item-fill"]);
    return /* @__PURE__ */ import_react116.default.createElement("div", {
      className
    }, children);
  }

  // node_modules/@shopify/polaris/build/esm/components/LegacyStack/LegacyStack.js
  var LegacyStack = /* @__PURE__ */ (0, import_react117.memo)(function Stack({
    children,
    vertical,
    spacing,
    distribution,
    alignment,
    wrap
  }) {
    const className = classNames(styles33.LegacyStack, vertical && styles33.vertical, spacing && styles33[variationName("spacing", spacing)], distribution && styles33[variationName("distribution", distribution)], alignment && styles33[variationName("alignment", alignment)], wrap === false && styles33.noWrap);
    const itemMarkup = elementChildren(children).map((child, index) => {
      const props = {
        key: index
      };
      return wrapWithComponent(child, Item4, props);
    });
    return /* @__PURE__ */ import_react117.default.createElement("div", {
      className
    }, itemMarkup);
  });
  LegacyStack.Item = Item4;

  // node_modules/@shopify/polaris/build/esm/components/LegacyCard/components/Section/Section.js
  function Section3({
    children,
    title,
    subdued,
    flush,
    fullWidth,
    actions,
    hideOnPrint
  }) {
    const className = classNames(styles32.Section, flush && styles32["Section-flush"], subdued && styles32["Section-subdued"], fullWidth && styles32["Section-fullWidth"], hideOnPrint && styles32["Section-hideOnPrint"]);
    const actionMarkup = actions ? /* @__PURE__ */ import_react118.default.createElement(ButtonGroup, null, buttonsFrom(actions, {
      variant: "plain"
    })) : null;
    const titleMarkup = typeof title === "string" ? /* @__PURE__ */ import_react118.default.createElement(Text, {
      variant: "headingSm",
      as: "h3",
      fontWeight: "medium"
    }, title) : title;
    const titleAreaMarkup = titleMarkup || actionMarkup ? /* @__PURE__ */ import_react118.default.createElement("div", {
      className: styles32.SectionHeader
    }, actionMarkup ? /* @__PURE__ */ import_react118.default.createElement(LegacyStack, {
      alignment: "baseline"
    }, /* @__PURE__ */ import_react118.default.createElement(LegacyStack.Item, {
      fill: true
    }, titleMarkup), actionMarkup) : titleMarkup) : null;
    return /* @__PURE__ */ import_react118.default.createElement("div", {
      className
    }, titleAreaMarkup, children);
  }

  // node_modules/@shopify/polaris/build/esm/components/LegacyCard/components/Subsection/Subsection.js
  var import_react119 = __toESM(require_react());
  function Subsection({
    children
  }) {
    return /* @__PURE__ */ import_react119.default.createElement("div", {
      className: styles32.Subsection
    }, children);
  }

  // node_modules/@shopify/polaris/build/esm/components/LegacyCard/LegacyCard.js
  var LegacyCard = function LegacyCard2({
    children,
    hideOnPrint,
    title,
    subdued,
    sectioned,
    actions,
    primaryFooterAction,
    secondaryFooterActions,
    secondaryFooterActionsDisclosureText,
    footerActionAlignment = "right"
  }) {
    const i18n = useI18n();
    const {
      value: secondaryActionsPopoverOpen,
      toggle: toggleSecondaryActionsPopoverOpen
    } = useToggle(false);
    const legacyCard = useLegacyCardPaddingObserverRef();
    const className = classNames(styles32.LegacyCard, subdued && styles32.subdued, hideOnPrint && styles32.hideOnPrint);
    const headerMarkup = title || actions ? /* @__PURE__ */ import_react120.default.createElement(Header, {
      actions,
      title
    }) : null;
    const content = sectioned ? /* @__PURE__ */ import_react120.default.createElement(Section3, null, children) : children;
    const primaryFooterActionMarkup = primaryFooterAction ? buttonFrom(primaryFooterAction, {
      variant: "primary"
    }) : null;
    let secondaryFooterActionsMarkup = null;
    if (secondaryFooterActions && secondaryFooterActions.length) {
      if (secondaryFooterActions.length === 1) {
        secondaryFooterActionsMarkup = buttonFrom(secondaryFooterActions[0]);
      } else {
        secondaryFooterActionsMarkup = /* @__PURE__ */ import_react120.default.createElement(import_react120.default.Fragment, null, /* @__PURE__ */ import_react120.default.createElement(Popover2, {
          active: secondaryActionsPopoverOpen,
          activator: /* @__PURE__ */ import_react120.default.createElement(Button, {
            disclosure: true,
            onClick: toggleSecondaryActionsPopoverOpen
          }, secondaryFooterActionsDisclosureText || i18n.translate("Polaris.Common.more")),
          onClose: toggleSecondaryActionsPopoverOpen
        }, /* @__PURE__ */ import_react120.default.createElement(ActionList, {
          items: secondaryFooterActions
        })));
      }
    }
    const footerMarkup = primaryFooterActionMarkup || secondaryFooterActionsMarkup ? /* @__PURE__ */ import_react120.default.createElement("div", {
      className: classNames(styles32.Footer, footerActionAlignment === "left" && styles32.LeftJustified)
    }, footerActionAlignment === "right" ? /* @__PURE__ */ import_react120.default.createElement(ButtonGroup, null, secondaryFooterActionsMarkup, primaryFooterActionMarkup) : /* @__PURE__ */ import_react120.default.createElement(ButtonGroup, null, primaryFooterActionMarkup, secondaryFooterActionsMarkup)) : null;
    return /* @__PURE__ */ import_react120.default.createElement(WithinContentContext.Provider, {
      value: true
    }, /* @__PURE__ */ import_react120.default.createElement("div", {
      className,
      ref: legacyCard
    }, headerMarkup, content, footerMarkup));
  };
  LegacyCard.Header = Header;
  LegacyCard.Section = Section3;
  LegacyCard.Subsection = Subsection;
  function useLegacyCardPaddingObserverRef() {
    const legacyCard = (0, import_react120.useRef)(null);
    (0, import_react120.useEffect)(() => {
      const legacyCardNode = legacyCard.current;
      let firstSection;
      let lastSection;
      if (legacyCardNode) {
        const updateFirstAndLastSectionPadding = () => {
          updatePadding(firstSection, "top", false);
          updatePadding(lastSection, "bottom", false);
          const currentElements = legacyCardNode.querySelectorAll(`.${styles32.Section}, .${styles32.Header}, .${styles32.Footer}`);
          if (!currentElements?.length)
            return;
          const firstElement = currentElements[0];
          const lastElement = getMostSeniorLastElement(currentElements);
          if (legacyCardNode.firstChild?.contains(firstElement)) {
            firstSection = firstElement;
            updatePadding(firstSection, "top", true);
          }
          if (legacyCardNode.lastChild?.contains(lastElement)) {
            lastSection = lastElement;
            updatePadding(lastSection, "bottom", true);
          }
        };
        updateFirstAndLastSectionPadding();
        const observer = new MutationObserver(updateFirstAndLastSectionPadding);
        observer.observe(legacyCardNode, {
          childList: true,
          subtree: true
        });
        return () => {
          updatePadding(firstSection, "top", false);
          updatePadding(lastSection, "bottom", false);
          observer.disconnect();
        };
      }
    }, []);
    return legacyCard;
  }
  function updatePadding(element, area, add2) {
    if (!element || element.className.includes(styles32["Section-flush"]))
      return;
    switch (area) {
      case "top":
        element.classList.toggle(styles32.FirstSectionPadding, add2);
        return;
      case "bottom":
        element.classList.toggle(styles32.LastSectionPadding, add2);
    }
  }
  function getMostSeniorLastElement(elements) {
    let lastElement = elements[0];
    elements.forEach((element) => {
      if (!lastElement.contains(element)) {
        lastElement = element;
      }
    });
    return lastElement;
  }

  // node_modules/@shopify/polaris/build/esm/components/ChoiceList/ChoiceList.js
  var import_react122 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/ChoiceList/ChoiceList.css.js
  var styles34 = {
    "ChoiceChildren": "Polaris-ChoiceList__ChoiceChildren"
  };

  // node_modules/@shopify/polaris/build/esm/components/RadioButton/RadioButton.js
  var import_react121 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/RadioButton/RadioButton.css.js
  var styles35 = {
    "RadioButton": "Polaris-RadioButton",
    "Input": "Polaris-RadioButton__Input",
    "Backdrop": "Polaris-RadioButton__Backdrop",
    "ChoiceLabel": "Polaris-RadioButton__ChoiceLabel",
    "toneMagic": "Polaris-RadioButton--toneMagic"
  };

  // node_modules/@shopify/polaris/build/esm/components/RadioButton/RadioButton.js
  function RadioButton({
    ariaDescribedBy: ariaDescribedByProp,
    label,
    labelHidden,
    helpText,
    checked,
    disabled,
    onChange,
    onFocus,
    onBlur,
    id: idProp,
    name: nameProp,
    value,
    fill,
    bleed,
    bleedBlockStart,
    bleedBlockEnd,
    bleedInlineStart,
    bleedInlineEnd,
    tone
  }) {
    const uniqId = (0, import_react121.useId)();
    const id = idProp ?? uniqId;
    const name = nameProp || id;
    const inputNode = (0, import_react121.useRef)(null);
    const handleBlur = () => {
      onBlur && onBlur();
    };
    function handleChange({
      currentTarget
    }) {
      onChange && onChange(currentTarget.checked, id);
    }
    const describedBy = [];
    if (helpText) {
      describedBy.push(helpTextID2(id));
    }
    if (ariaDescribedByProp) {
      describedBy.push(ariaDescribedByProp);
    }
    const ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0;
    const inputClassName = classNames(styles35.Input, tone && styles35[variationName("tone", tone)]);
    const extraChoiceProps = {
      helpText,
      bleed,
      bleedBlockStart,
      bleedBlockEnd,
      bleedInlineStart,
      bleedInlineEnd
    };
    return /* @__PURE__ */ import_react121.default.createElement(Choice, Object.assign({
      label,
      labelHidden,
      disabled,
      id,
      labelClassName: styles35.ChoiceLabel,
      fill
    }, extraChoiceProps, checked ? {
      tone
    } : {}), /* @__PURE__ */ import_react121.default.createElement("span", {
      className: styles35.RadioButton
    }, /* @__PURE__ */ import_react121.default.createElement("input", {
      id,
      name,
      value,
      type: "radio",
      checked,
      disabled,
      className: inputClassName,
      onChange: handleChange,
      onFocus,
      onBlur: handleBlur,
      "aria-describedby": ariaDescribedBy,
      ref: inputNode
    }), /* @__PURE__ */ import_react121.default.createElement("span", {
      className: styles35.Backdrop
    })));
  }

  // node_modules/@shopify/polaris/build/esm/components/ChoiceList/ChoiceList.js
  function ChoiceList({
    title,
    titleHidden,
    allowMultiple,
    choices,
    selected,
    onChange = noop5,
    error: error2,
    disabled = false,
    name: nameProp,
    tone
  }) {
    const ControlComponent = allowMultiple ? Checkbox : RadioButton;
    const uniqName = (0, import_react122.useId)();
    const name = nameProp ?? uniqName;
    const finalName = allowMultiple ? `${name}[]` : name;
    const titleMarkup = title ? /* @__PURE__ */ import_react122.default.createElement(Box, {
      as: "legend",
      paddingBlockEnd: {
        xs: "0",
        md: "100"
      }
    }, /* @__PURE__ */ import_react122.default.createElement(Text, {
      as: "span",
      variant: "bodyMd",
      visuallyHidden: titleHidden
    }, title)) : null;
    const choicesMarkup = choices.map((choice) => {
      const {
        value,
        id,
        label,
        helpText,
        disabled: choiceDisabled,
        describedByError
      } = choice;
      function handleChange(checked) {
        onChange(updateSelectedChoices(choice, checked, selected, allowMultiple), name);
      }
      const isSelected = choiceIsSelected(choice, selected);
      const renderedChildren = choice.renderChildren ? choice.renderChildren(isSelected) : null;
      const children = renderedChildren ? /* @__PURE__ */ import_react122.default.createElement("div", {
        className: styles34.ChoiceChildren
      }, /* @__PURE__ */ import_react122.default.createElement(Box, {
        paddingBlockStart: {
          xs: "400",
          md: "0"
        }
      }, renderedChildren)) : null;
      return /* @__PURE__ */ import_react122.default.createElement("li", {
        key: value
      }, /* @__PURE__ */ import_react122.default.createElement(Bleed, {
        marginBlockEnd: helpText ? {
          xs: "100",
          md: "0"
        } : {
          xs: "0"
        }
      }, /* @__PURE__ */ import_react122.default.createElement(ControlComponent, {
        name: finalName,
        value,
        id,
        label,
        disabled: choiceDisabled || disabled,
        fill: {
          xs: true,
          sm: false
        },
        checked: choiceIsSelected(choice, selected),
        helpText,
        onChange: handleChange,
        ariaDescribedBy: error2 && describedByError ? errorTextID(finalName) : null,
        tone
      }), children));
    });
    const errorMarkup = error2 && /* @__PURE__ */ import_react122.default.createElement(Box, {
      paddingBlockStart: {
        xs: "0",
        md: "100"
      },
      paddingBlockEnd: "200"
    }, /* @__PURE__ */ import_react122.default.createElement(InlineError, {
      message: error2,
      fieldID: finalName
    }));
    return /* @__PURE__ */ import_react122.default.createElement(BlockStack, {
      as: "fieldset",
      gap: {
        xs: "400",
        md: "0"
      },
      "aria-invalid": error2 != null,
      id: finalName
    }, titleMarkup, /* @__PURE__ */ import_react122.default.createElement(BlockStack, {
      as: "ul",
      gap: {
        xs: "400",
        md: "0"
      }
    }, choicesMarkup), errorMarkup);
  }
  function noop5() {
  }
  function choiceIsSelected({
    value
  }, selected) {
    return selected.includes(value);
  }
  function updateSelectedChoices({
    value
  }, checked, selected, allowMultiple = false) {
    if (checked) {
      return allowMultiple ? [...selected, value] : [value];
    }
    return selected.filter((selectedChoice) => selectedChoice !== value);
  }

  // node_modules/@shopify/polaris/build/esm/components/InlineGrid/InlineGrid.js
  var import_react123 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/InlineGrid/InlineGrid.css.js
  var styles36 = {
    "InlineGrid": "Polaris-InlineGrid"
  };

  // node_modules/@shopify/polaris/build/esm/components/InlineGrid/InlineGrid.js
  function InlineGrid({
    children,
    columns,
    gap,
    alignItems
  }) {
    const style = {
      ...getResponsiveValue("inline-grid", "grid-template-columns", formatInlineGrid(columns)),
      ...getResponsiveProps("inline-grid", "gap", "space", gap),
      "--pc-inline-grid-align-items": alignItems
    };
    return /* @__PURE__ */ import_react123.default.createElement("div", {
      className: styles36.InlineGrid,
      style: sanitizeCustomProperties(style)
    }, children);
  }
  function formatInlineGrid(columns) {
    if (typeof columns === "object" && columns !== null && !Array.isArray(columns)) {
      return Object.fromEntries(Object.entries(columns).map(([breakpointAlias, breakpointInlineGrid]) => [breakpointAlias, getColumnValue(breakpointInlineGrid)]));
    }
    return getColumnValue(columns);
  }
  function getColumnValue(columns) {
    if (!columns)
      return void 0;
    if (typeof columns === "number" || !isNaN(Number(columns))) {
      return `repeat(${Number(columns)}, minmax(0, 1fr))`;
    }
    if (typeof columns === "string")
      return columns;
    return columns.map((column) => {
      switch (column) {
        case "oneThird":
          return "minmax(0, 1fr)";
        case "oneHalf":
          return "minmax(0, 1fr)";
        case "twoThirds":
          return "minmax(0, 2fr)";
      }
    }).join(" ");
  }

  // node_modules/@shopify/polaris/build/esm/utilities/frame/context.js
  var import_react124 = __toESM(require_react());
  var FrameContext = /* @__PURE__ */ (0, import_react124.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/components/Pagination/Pagination.js
  var import_react125 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/is-input-focused.js
  var EditableTarget = /* @__PURE__ */ function(EditableTarget2) {
    EditableTarget2["Input"] = "INPUT";
    EditableTarget2["Textarea"] = "TEXTAREA";
    EditableTarget2["Select"] = "SELECT";
    EditableTarget2["ContentEditable"] = "contenteditable";
    return EditableTarget2;
  }(EditableTarget || {});
  function isInputFocused() {
    if (document == null || document.activeElement == null) {
      return false;
    }
    const {
      tagName
    } = document.activeElement;
    return tagName === EditableTarget.Input || tagName === EditableTarget.Textarea || tagName === EditableTarget.Select || document.activeElement.hasAttribute(EditableTarget.ContentEditable);
  }

  // node_modules/@shopify/polaris/build/esm/components/Pagination/Pagination.css.js
  var styles37 = {
    "Pagination": "Polaris-Pagination",
    "table": "Polaris-Pagination--table",
    "TablePaginationActions": "Polaris-Pagination__TablePaginationActions"
  };

  // node_modules/@shopify/polaris/build/esm/components/Pagination/Pagination.js
  function Pagination({
    hasNext,
    hasPrevious,
    nextURL,
    previousURL,
    onNext,
    onPrevious,
    nextTooltip,
    previousTooltip,
    nextKeys,
    previousKeys,
    accessibilityLabel,
    accessibilityLabels,
    label,
    type = "page"
  }) {
    const i18n = useI18n();
    const node = /* @__PURE__ */ (0, import_react125.createRef)();
    const navLabel = accessibilityLabel || i18n.translate("Polaris.Pagination.pagination");
    const previousLabel = accessibilityLabels?.previous || i18n.translate("Polaris.Pagination.previous");
    const nextLabel = accessibilityLabels?.next || i18n.translate("Polaris.Pagination.next");
    const prev = /* @__PURE__ */ import_react125.default.createElement(Button, {
      icon: SvgChevronLeftIcon,
      accessibilityLabel: previousLabel,
      url: previousURL,
      onClick: onPrevious,
      disabled: !hasPrevious,
      id: "previousURL"
    });
    const constructedPrevious = previousTooltip && hasPrevious ? /* @__PURE__ */ import_react125.default.createElement(Tooltip, {
      activatorWrapper: "span",
      content: previousTooltip,
      preferredPosition: "below"
    }, prev) : prev;
    const next = /* @__PURE__ */ import_react125.default.createElement(Button, {
      icon: SvgChevronRightIcon,
      accessibilityLabel: nextLabel,
      url: nextURL,
      onClick: onNext,
      disabled: !hasNext,
      id: "nextURL"
    });
    const constructedNext = nextTooltip && hasNext ? /* @__PURE__ */ import_react125.default.createElement(Tooltip, {
      activatorWrapper: "span",
      content: nextTooltip,
      preferredPosition: "below"
    }, next) : next;
    const previousHandler = onPrevious || noop6;
    const previousButtonEvents = previousKeys && (previousURL || onPrevious) && hasPrevious && previousKeys.map((key) => /* @__PURE__ */ import_react125.default.createElement(KeypressListener, {
      key,
      keyCode: key,
      handler: previousURL ? handleCallback(clickPaginationLink("previousURL", node)) : handleCallback(previousHandler)
    }));
    const nextHandler = onNext || noop6;
    const nextButtonEvents = nextKeys && (nextURL || onNext) && hasNext && nextKeys.map((key) => /* @__PURE__ */ import_react125.default.createElement(KeypressListener, {
      key,
      keyCode: key,
      handler: nextURL ? handleCallback(clickPaginationLink("nextURL", node)) : handleCallback(nextHandler)
    }));
    if (type === "table") {
      const labelMarkup2 = label ? /* @__PURE__ */ import_react125.default.createElement(Box, {
        padding: "300",
        paddingBlockStart: "0",
        paddingBlockEnd: "0"
      }, /* @__PURE__ */ import_react125.default.createElement(Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium"
      }, label)) : null;
      return /* @__PURE__ */ import_react125.default.createElement("nav", {
        "aria-label": navLabel,
        ref: node,
        className: classNames(styles37.Pagination, styles37.table)
      }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ import_react125.default.createElement(Box, {
        background: "bg-surface-secondary",
        paddingBlockStart: "150",
        paddingBlockEnd: "150",
        paddingInlineStart: "300",
        paddingInlineEnd: "200"
      }, /* @__PURE__ */ import_react125.default.createElement(InlineStack, {
        align: "center",
        blockAlign: "center"
      }, /* @__PURE__ */ import_react125.default.createElement("div", {
        className: styles37.TablePaginationActions,
        "data-buttongroup-variant": "segmented"
      }, /* @__PURE__ */ import_react125.default.createElement("div", null, constructedPrevious), labelMarkup2, /* @__PURE__ */ import_react125.default.createElement("div", null, constructedNext)))));
    }
    const labelTextMarkup = hasNext && hasPrevious ? /* @__PURE__ */ import_react125.default.createElement("span", null, label) : /* @__PURE__ */ import_react125.default.createElement(Text, {
      tone: "subdued",
      as: "span"
    }, label);
    const labelMarkup = label ? /* @__PURE__ */ import_react125.default.createElement(Box, {
      padding: "300",
      paddingBlockStart: "0",
      paddingBlockEnd: "0"
    }, /* @__PURE__ */ import_react125.default.createElement("div", {
      "aria-live": "polite"
    }, labelTextMarkup)) : null;
    return /* @__PURE__ */ import_react125.default.createElement("nav", {
      "aria-label": navLabel,
      ref: node,
      className: styles37.Pagination
    }, previousButtonEvents, nextButtonEvents, /* @__PURE__ */ import_react125.default.createElement(ButtonGroup, {
      variant: "segmented"
    }, constructedPrevious, labelMarkup, constructedNext));
  }
  function clickPaginationLink(id, node) {
    return () => {
      if (node.current == null) {
        return;
      }
      const link = node.current.querySelector(`#${id}`);
      if (link) {
        link.click();
      }
    };
  }
  function handleCallback(fn) {
    return () => {
      if (isInputFocused()) {
        return;
      }
      fn();
    };
  }
  function noop6() {
  }

  // node_modules/@shopify/polaris/build/esm/components/AfterInitialMount/AfterInitialMount.js
  var import_react126 = __toESM(require_react());
  function AfterInitialMount({
    children,
    onMount,
    fallback = null
  }) {
    const isMounted = useIsAfterInitialMount();
    const content = isMounted ? children : fallback;
    (0, import_react126.useEffect)(() => {
      if (isMounted && onMount) {
        onMount();
      }
    }, [isMounted, onMount]);
    return /* @__PURE__ */ import_react126.default.createElement(import_react126.default.Fragment, null, content);
  }

  // node_modules/@shopify/polaris/build/esm/components/Sticky/Sticky.js
  var import_react128 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/sticky-manager/hooks.js
  var import_react127 = __toESM(require_react());
  function useStickyManager() {
    const stickyManager = (0, import_react127.useContext)(StickyManagerContext);
    if (!stickyManager) {
      throw new MissingAppProviderError("No StickyManager was provided.");
    }
    return stickyManager;
  }

  // node_modules/@shopify/polaris/build/esm/components/Sticky/Sticky.js
  var StickyInner = class extends import_react128.Component {
    constructor(...args) {
      super(...args);
      this.state = {
        isSticky: false,
        style: {}
      };
      this.placeHolderNode = null;
      this.stickyNode = null;
      this.setPlaceHolderNode = (node) => {
        this.placeHolderNode = node;
      };
      this.setStickyNode = (node) => {
        this.stickyNode = node;
      };
      this.handlePositioning = (stick, top = 0, left = 0, width = 0) => {
        const {
          isSticky
        } = this.state;
        if (stick && !isSticky || !stick && isSticky) {
          this.adjustPlaceHolderNode(stick);
          this.setState({
            isSticky: !isSticky
          }, () => {
            if (this.props.onStickyChange == null) {
              return null;
            }
            this.props.onStickyChange(!isSticky);
            if (this.props.boundingElement == null) {
              return null;
            }
            this.props.boundingElement.toggleAttribute("data-sticky-active");
          });
        }
        const style = stick ? {
          position: "fixed",
          top,
          left,
          width
        } : {};
        this.setState({
          style
        });
      };
      this.adjustPlaceHolderNode = (add2) => {
        if (this.placeHolderNode && this.stickyNode) {
          this.placeHolderNode.style.paddingBottom = add2 ? `${getRectForNode(this.stickyNode).height}px` : "0px";
        }
      };
    }
    componentDidMount() {
      const {
        boundingElement,
        offset = false,
        disableWhenStacked = false,
        stickyManager
      } = this.props;
      if (!this.stickyNode || !this.placeHolderNode)
        return;
      stickyManager.registerStickyItem({
        stickyNode: this.stickyNode,
        placeHolderNode: this.placeHolderNode,
        handlePositioning: this.handlePositioning,
        offset,
        boundingElement,
        disableWhenStacked
      });
    }
    componentDidUpdate() {
      const {
        boundingElement,
        offset = false,
        disableWhenStacked = false,
        stickyManager
      } = this.props;
      if (!this.stickyNode || !this.placeHolderNode)
        return;
      const stickyManagerItem = stickyManager.getStickyItem(this.stickyNode);
      const didPropsChange = !stickyManagerItem || boundingElement !== stickyManagerItem.boundingElement || offset !== stickyManagerItem.offset || disableWhenStacked !== stickyManagerItem.disableWhenStacked;
      if (!didPropsChange)
        return;
      stickyManager.unregisterStickyItem(this.stickyNode);
      stickyManager.registerStickyItem({
        stickyNode: this.stickyNode,
        placeHolderNode: this.placeHolderNode,
        handlePositioning: this.handlePositioning,
        offset,
        boundingElement,
        disableWhenStacked
      });
    }
    componentWillUnmount() {
      const {
        stickyManager
      } = this.props;
      if (!this.stickyNode)
        return;
      stickyManager.unregisterStickyItem(this.stickyNode);
    }
    render() {
      const {
        style,
        isSticky
      } = this.state;
      const {
        children
      } = this.props;
      const childrenContent = isFunction(children) ? children(isSticky) : children;
      return /* @__PURE__ */ import_react128.default.createElement("div", null, /* @__PURE__ */ import_react128.default.createElement("div", {
        ref: this.setPlaceHolderNode
      }), /* @__PURE__ */ import_react128.default.createElement("div", {
        ref: this.setStickyNode,
        style
      }, childrenContent));
    }
  };
  function isFunction(arg) {
    return typeof arg === "function";
  }
  function Sticky(props) {
    const stickyManager = useStickyManager();
    return /* @__PURE__ */ import_react128.default.createElement(StickyInner, Object.assign({}, props, {
      stickyManager
    }));
  }

  // node_modules/@shopify/polaris/build/esm/components/EmptySearchResult/EmptySearchResult.js
  var import_react129 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/EmptySearchResult/illustrations/empty-search.svg.js
  var img = "data:image/svg+xml,%3csvg width='60' height='60' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill-rule='evenodd' d='M41.87 24a17.87 17.87 0 11-35.74 0 17.87 17.87 0 0135.74 0zm-3.15 18.96a24 24 0 114.24-4.24L59.04 54.8a3 3 0 11-4.24 4.24L38.72 42.96z' fill='%238C9196'/%3e%3c/svg%3e";
  var emptySearch = img;

  // node_modules/@shopify/polaris/build/esm/components/EmptySearchResult/EmptySearchResult.js
  function EmptySearchResult({
    title,
    description,
    withIllustration
  }) {
    const i18n = useI18n();
    const altText = i18n.translate("Polaris.EmptySearchResult.altText");
    const descriptionMarkup = description ? /* @__PURE__ */ import_react129.default.createElement("p", null, description) : null;
    const illustrationMarkup = withIllustration ? /* @__PURE__ */ import_react129.default.createElement(Image, {
      alt: altText,
      source: emptySearch,
      draggable: false
    }) : null;
    return /* @__PURE__ */ import_react129.default.createElement(LegacyStack, {
      alignment: "center",
      vertical: true
    }, illustrationMarkup, /* @__PURE__ */ import_react129.default.createElement(Text, {
      variant: "headingLg",
      as: "p"
    }, title), /* @__PURE__ */ import_react129.default.createElement(Text, {
      tone: "subdued",
      as: "span"
    }, descriptionMarkup));
  }

  // node_modules/@shopify/polaris/build/esm/components/Filters/Filters.js
  var import_react134 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Filters/Filters.css.js
  var styles38 = {
    "Container": "Polaris-Filters__Container",
    "SearchField": "Polaris-Filters__SearchField",
    "FiltersWrapper": "Polaris-Filters__FiltersWrapper",
    "hideQueryField": "Polaris-Filters--hideQueryField",
    "FiltersInner": "Polaris-Filters__FiltersInner",
    "AddFilter": "Polaris-Filters__AddFilter",
    "FiltersWrapperWithAddButton": "Polaris-Filters__FiltersWrapperWithAddButton",
    "AddFilterActivatorMultiple": "Polaris-Filters__AddFilterActivatorMultiple",
    "FiltersStickyArea": "Polaris-Filters__FiltersStickyArea",
    "ClearAll": "Polaris-Filters__ClearAll",
    "MultiplePinnedFilterClearAll": "Polaris-Filters__MultiplePinnedFilterClearAll"
  };

  // node_modules/@shopify/polaris/build/esm/components/Filters/components/SearchField/SearchField.js
  var import_react130 = __toESM(require_react());
  function SearchField({
    onChange,
    onClear,
    onFocus,
    onBlur,
    focused,
    value,
    placeholder,
    disabled,
    borderlessQueryField,
    loading,
    selectedViewName
  }) {
    const i18n = useI18n();
    const id = (0, import_react130.useId)();
    const {
      mdUp
    } = useBreakpoints();
    const suffix = value && selectedViewName && mdUp ? /* @__PURE__ */ import_react130.default.createElement(Text, {
      as: "span",
      variant: "bodyMd",
      tone: "subdued"
    }, i18n.translate("Polaris.Filters.searchInView", {
      viewName: selectedViewName
    })) : null;
    function handleChange(eventValue) {
      onChange(eventValue ?? value);
    }
    function handleClear() {
      if (onClear) {
        onClear();
      } else {
        onChange("");
      }
    }
    return /* @__PURE__ */ import_react130.default.createElement(TextField, {
      id,
      value,
      onChange: handleChange,
      onFocus,
      onBlur,
      onClearButtonClick: handleClear,
      autoComplete: "off",
      placeholder,
      disabled,
      variant: borderlessQueryField ? "borderless" : "inherit",
      size: "slim",
      prefix: mdUp ? /* @__PURE__ */ import_react130.default.createElement(Icon, {
        source: SvgSearchIcon
      }) : void 0,
      suffix,
      focused,
      label: placeholder,
      labelHidden: true,
      clearButton: true,
      autoSize: Boolean(suffix),
      loading
    });
  }

  // node_modules/@shopify/polaris/build/esm/components/Filters/components/FiltersBar/FiltersBar.js
  var import_react133 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/use-on-value-change.js
  var import_react131 = __toESM(require_react());
  function useOnValueChange(value, onChange) {
    const tracked = import_react131.default.useRef(value);
    (0, import_react131.useEffect)(() => {
      const oldValue = tracked.current;
      if (value !== tracked.current) {
        tracked.current = value;
        onChange(value, oldValue);
      }
    }, [value, onChange]);
  }

  // node_modules/@shopify/polaris/build/esm/components/Filters/components/FilterPill/FilterPill.js
  var import_react132 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Filters/components/FilterPill/FilterPill.css.js
  var styles39 = {
    "FilterButton": "Polaris-Filters-FilterPill__FilterButton",
    "focusedFilterButton": "Polaris-Filters-FilterPill--focusedFilterButton",
    "ActiveFilterButton": "Polaris-Filters-FilterPill__ActiveFilterButton",
    "PlainButton": "Polaris-Filters-FilterPill__PlainButton",
    "ToggleButton": "Polaris-Filters-FilterPill__ToggleButton",
    "clearButton": "Polaris-Filters-FilterPill--clearButton",
    "IconWrapper": "Polaris-Filters-FilterPill__IconWrapper",
    "PopoverWrapper": "Polaris-Filters-FilterPill__PopoverWrapper",
    "ClearButtonWrapper": "Polaris-Filters-FilterPill__ClearButtonWrapper"
  };

  // node_modules/@shopify/polaris/build/esm/components/Filters/components/FilterPill/FilterPill.js
  function FilterPill({
    unsavedChanges = false,
    filterKey,
    label,
    filter: filter2,
    disabled,
    hideClearButton,
    selected,
    initialActive,
    disclosureZIndexOverride,
    closeOnChildOverlayClick,
    onRemove,
    onClick
  }) {
    const i18n = useI18n();
    const elementRef = (0, import_react132.useRef)(null);
    const {
      value: focused,
      setTrue: setFocusedTrue,
      setFalse: setFocusedFalse
    } = useToggle(false);
    const [popoverActive, setPopoverActive] = (0, import_react132.useState)(initialActive);
    (0, import_react132.useEffect)(() => {
      const node = elementRef.current;
      if (!node || !popoverActive) {
        return;
      }
      const parent = node.parentElement?.parentElement;
      if (!parent) {
        return;
      }
      parent.scroll?.({
        left: node.offsetLeft
      });
    }, [elementRef, popoverActive]);
    const togglePopoverActive = (0, import_react132.useCallback)(() => {
      if (filter2) {
        setPopoverActive((popoverActive2) => !popoverActive2);
      }
      if (onClick) {
        onClick(filterKey);
      }
    }, [filter2, filterKey, onClick]);
    const handlePopoverClose = (0, import_react132.useCallback)(() => {
      togglePopoverActive();
      if (!selected) {
        onRemove?.(filterKey);
      }
    }, [onRemove, selected, filterKey, togglePopoverActive]);
    const handleClear = () => {
      if (onRemove)
        onRemove(filterKey);
      setPopoverActive(false);
    };
    const buttonClasses = classNames(styles39.FilterButton, selected && styles39.ActiveFilterButton, popoverActive && styles39.FocusFilterButton, focused && styles39.focusedFilterButton);
    const clearButtonClassNames = classNames(styles39.PlainButton, styles39.clearButton);
    const toggleButtonClassNames = classNames(styles39.PlainButton, styles39.ToggleButton);
    const disclosureMarkup = !selected ? /* @__PURE__ */ import_react132.default.createElement("div", {
      className: styles39.IconWrapper
    }, /* @__PURE__ */ import_react132.default.createElement(Icon, {
      source: SvgChevronDownIcon,
      tone: "base"
    })) : null;
    const labelMarkup = /* @__PURE__ */ import_react132.default.createElement(Box, {
      paddingInlineStart: unsavedChanges ? "0" : "050"
    }, /* @__PURE__ */ import_react132.default.createElement(InlineStack, null, /* @__PURE__ */ import_react132.default.createElement(Text, {
      variant: "bodySm",
      as: "span"
    }, label)));
    const unsavedPip = unsavedChanges ? /* @__PURE__ */ import_react132.default.createElement(Box, {
      paddingInlineEnd: "150"
    }, /* @__PURE__ */ import_react132.default.createElement(Box, {
      background: "bg-fill-emphasis",
      borderRadius: "050",
      width: "6px",
      minHeight: "6px"
    })) : null;
    const removeFilterButtonMarkup = selected ? /* @__PURE__ */ import_react132.default.createElement(UnstyledButton, {
      onClick: handleClear,
      className: clearButtonClassNames,
      type: "button",
      "aria-label": i18n.translate("Polaris.FilterPill.clear")
    }, /* @__PURE__ */ import_react132.default.createElement("div", {
      className: styles39.IconWrapper
    }, /* @__PURE__ */ import_react132.default.createElement(Icon, {
      source: SvgXSmallIcon,
      tone: "base"
    }))) : null;
    const activator = /* @__PURE__ */ import_react132.default.createElement("div", {
      className: buttonClasses
    }, /* @__PURE__ */ import_react132.default.createElement(InlineStack, {
      gap: "0",
      wrap: false
    }, /* @__PURE__ */ import_react132.default.createElement(UnstyledButton, {
      onFocus: setFocusedTrue,
      onBlur: setFocusedFalse,
      onClick: togglePopoverActive,
      className: toggleButtonClassNames,
      type: "button",
      accessibilityLabel: unsavedChanges ? i18n.translate("Polaris.FilterPill.unsavedChanges", {
        label
      }) : label
    }, /* @__PURE__ */ import_react132.default.createElement(InlineStack, {
      wrap: false,
      align: "center",
      blockAlign: "center",
      gap: "0"
    }, unsavedPip, labelMarkup, disclosureMarkup)), removeFilterButtonMarkup));
    const clearButtonMarkup = !hideClearButton && /* @__PURE__ */ import_react132.default.createElement("div", {
      className: styles39.ClearButtonWrapper
    }, /* @__PURE__ */ import_react132.default.createElement(Button, {
      onClick: handleClear,
      variant: "plain",
      disabled: !selected,
      textAlign: "left"
    }, i18n.translate("Polaris.FilterPill.clear")));
    if (disabled) {
      return null;
    }
    return /* @__PURE__ */ import_react132.default.createElement("div", {
      ref: elementRef
    }, /* @__PURE__ */ import_react132.default.createElement(Popover2, {
      active: popoverActive,
      activator,
      key: filterKey,
      onClose: handlePopoverClose,
      preferredAlignment: "left",
      zIndexOverride: disclosureZIndexOverride,
      preventCloseOnChildOverlayClick: !closeOnChildOverlayClick
    }, /* @__PURE__ */ import_react132.default.createElement("div", {
      className: styles39.PopoverWrapper
    }, /* @__PURE__ */ import_react132.default.createElement(Popover2.Section, null, /* @__PURE__ */ import_react132.default.createElement(BlockStack, {
      gap: "100"
    }, filter2, clearButtonMarkup)))));
  }

  // node_modules/@shopify/polaris/build/esm/components/Filters/components/FiltersBar/FiltersBar.js
  function FiltersBar({
    filters,
    appliedFilters,
    onClearAll,
    disabled,
    hideQueryField,
    disableFilters,
    mountedStateStyles,
    onAddFilterClick,
    closeOnChildOverlayClick,
    children
  }) {
    const i18n = useI18n();
    const [popoverActive, setPopoverActive] = (0, import_react133.useState)(false);
    const hasMounted = (0, import_react133.useRef)(false);
    (0, import_react133.useEffect)(() => {
      hasMounted.current = true;
    });
    const togglePopoverActive = () => setPopoverActive((popoverActive2) => !popoverActive2);
    const handleAddFilterClick = () => {
      onAddFilterClick?.();
      togglePopoverActive();
    };
    const appliedFilterKeys = appliedFilters?.map(({
      key
    }) => key);
    const pinnedFromPropsKeys = filters.filter(({
      pinned
    }) => pinned).map(({
      key
    }) => key);
    const pinnedFiltersFromPropsAndAppliedFilters = filters.filter(({
      pinned,
      key
    }) => {
      const isPinnedOrApplied = Boolean(pinned) || appliedFilterKeys?.includes(key);
      return isPinnedOrApplied;
    });
    const [localPinnedFilters, setLocalPinnedFilters] = (0, import_react133.useState)(pinnedFiltersFromPropsAndAppliedFilters.map(({
      key
    }) => key));
    useOnValueChange(filters.length, () => {
      setLocalPinnedFilters(pinnedFiltersFromPropsAndAppliedFilters.map(({
        key
      }) => key));
    });
    const pinnedFilters = localPinnedFilters.map((key) => filters.find((filter2) => filter2.key === key)).reduce((acc, filter2) => filter2 ? [...acc, filter2] : acc, []);
    const onFilterClick = ({
      key,
      onAction
    }) => () => {
      setTimeout(() => {
        setLocalPinnedFilters((currentLocalPinnedFilters) => [.../* @__PURE__ */ new Set([...currentLocalPinnedFilters, key])]);
        onAction?.();
        togglePopoverActive();
      }, 0);
    };
    const filterToActionItem = (filter2) => ({
      ...filter2,
      content: filter2.label,
      onAction: onFilterClick(filter2)
    });
    const unpinnedFilters = filters.filter((filter2) => !pinnedFilters.some(({
      key
    }) => key === filter2.key));
    const unsectionedFilters = unpinnedFilters.filter((filter2) => !filter2.section && !filter2.hidden).map(filterToActionItem);
    const sectionedFilters = unpinnedFilters.filter((filter2) => filter2.section).reduce((acc, filter2) => {
      const filterActionItem = filterToActionItem(filter2);
      const sectionIndex = acc.findIndex((section) => section.title === filter2.section);
      if (sectionIndex === -1) {
        acc.push({
          title: filter2.section,
          items: [filterActionItem]
        });
      } else {
        acc[sectionIndex].items.push(filterActionItem);
      }
      return acc;
    }, []);
    const hasOneOrMorePinnedFilters = pinnedFilters.length >= 1;
    const addFilterActivator = /* @__PURE__ */ import_react133.default.createElement("div", null, /* @__PURE__ */ import_react133.default.createElement(UnstyledButton, {
      type: "button",
      className: styles38.AddFilter,
      onClick: handleAddFilterClick,
      "aria-label": i18n.translate("Polaris.Filters.addFilter"),
      disabled: disabled || unsectionedFilters.length === 0 && sectionedFilters.length === 0 || disableFilters
    }, /* @__PURE__ */ import_react133.default.createElement(Text, {
      as: "span",
      variant: "bodySm",
      tone: disabled ? "disabled" : "base"
    }, i18n.translate("Polaris.Filters.addFilter"), " "), /* @__PURE__ */ import_react133.default.createElement(SvgPlusIcon, null)));
    const handleClearAllFilters = () => {
      setLocalPinnedFilters(pinnedFromPropsKeys);
      onClearAll?.();
    };
    const shouldShowAddButton = filters.some((filter2) => !filter2.pinned) || filters.length !== localPinnedFilters.length;
    const pinnedFiltersMarkup = pinnedFilters.map(({
      key: filterKey,
      ...pinnedFilter
    }) => {
      const appliedFilter = appliedFilters?.find(({
        key
      }) => key === filterKey);
      const handleFilterPillRemove = () => {
        setLocalPinnedFilters((currentLocalPinnedFilters) => currentLocalPinnedFilters.filter((key) => {
          const isMatchedFilters = key === filterKey;
          const isPinnedFilterFromProps = pinnedFromPropsKeys.includes(key);
          return !isMatchedFilters || isPinnedFilterFromProps;
        }));
        appliedFilter?.onRemove(filterKey);
      };
      return /* @__PURE__ */ import_react133.default.createElement(FilterPill, Object.assign({
        key: filterKey
      }, pinnedFilter, {
        initialActive: hasMounted.current && !pinnedFilter.pinned && !appliedFilter,
        unsavedChanges: appliedFilter?.unsavedChanges,
        label: appliedFilter?.label || pinnedFilter.label,
        filterKey,
        selected: appliedFilterKeys?.includes(filterKey),
        onRemove: handleFilterPillRemove,
        disabled: pinnedFilter.disabled || disableFilters,
        closeOnChildOverlayClick
      }));
    });
    const addButton = shouldShowAddButton ? /* @__PURE__ */ import_react133.default.createElement("div", {
      className: classNames(styles38.AddFilterActivator, hasOneOrMorePinnedFilters && styles38.AddFilterActivatorMultiple)
    }, /* @__PURE__ */ import_react133.default.createElement(Popover2, {
      active: popoverActive && !disabled,
      activator: addFilterActivator,
      onClose: togglePopoverActive
    }, /* @__PURE__ */ import_react133.default.createElement(ActionList, {
      actionRole: "menuitem",
      items: unsectionedFilters,
      sections: sectionedFilters
    }))) : null;
    const clearAllMarkup = appliedFilters?.length ? /* @__PURE__ */ import_react133.default.createElement("div", {
      className: classNames(styles38.ClearAll, hasOneOrMorePinnedFilters && shouldShowAddButton && styles38.MultiplePinnedFilterClearAll)
    }, /* @__PURE__ */ import_react133.default.createElement(Button, {
      size: "micro",
      onClick: handleClearAllFilters,
      variant: "monochromePlain"
    }, i18n.translate("Polaris.Filters.clearFilters"))) : null;
    return /* @__PURE__ */ import_react133.default.createElement("div", {
      className: classNames(styles38.FiltersWrapper, shouldShowAddButton && hasOneOrMorePinnedFilters && styles38.FiltersWrapperWithAddButton),
      "aria-live": "polite",
      style: mountedStateStyles
    }, /* @__PURE__ */ import_react133.default.createElement("div", {
      className: classNames(styles38.FiltersInner)
    }, /* @__PURE__ */ import_react133.default.createElement("div", {
      className: classNames(styles38.FiltersStickyArea)
    }, pinnedFiltersMarkup, addButton, clearAllMarkup)), hideQueryField ? /* @__PURE__ */ import_react133.default.createElement(Box, {
      paddingInlineEnd: "300",
      paddingBlockStart: "200",
      paddingBlockEnd: "200"
    }, /* @__PURE__ */ import_react133.default.createElement(InlineStack, {
      align: "start",
      blockAlign: "center",
      gap: {
        xs: "400",
        md: "300"
      }
    }, children)) : null);
  }

  // node_modules/@shopify/polaris/build/esm/components/Filters/Filters.js
  var TRANSITION_DURATION = "var(--p-motion-duration-150)";
  var TRANSITION_MARGIN = "-36px";
  var defaultStyle = {
    transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease)`,
    opacity: 0
  };
  var transitionStyles = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    },
    exiting: {
      opacity: 0
    },
    exited: {
      opacity: 0
    },
    unmounted: {
      opacity: 0
    }
  };
  var defaultFilterStyles = {
    transition: `opacity ${TRANSITION_DURATION} var(--p-motion-ease), margin ${TRANSITION_DURATION} var(--p-motion-ease)`,
    opacity: 0,
    marginTop: TRANSITION_MARGIN
  };
  var transitionFilterStyles = {
    entering: {
      opacity: 1,
      marginTop: 0
    },
    entered: {
      opacity: 1,
      marginTop: 0
    },
    exiting: {
      opacity: 0,
      marginTop: TRANSITION_MARGIN
    },
    exited: {
      opacity: 0,
      marginTop: TRANSITION_MARGIN
    },
    unmounted: {
      opacity: 0,
      marginTop: TRANSITION_MARGIN
    }
  };
  function Filters({
    queryValue,
    queryPlaceholder,
    focused,
    filters,
    appliedFilters,
    onQueryChange,
    onQueryClear,
    onQueryBlur,
    onQueryFocus,
    onClearAll,
    children,
    disabled,
    hideFilters,
    hideQueryField,
    disableQueryField,
    borderlessQueryField,
    loading,
    disableFilters,
    mountedState,
    onAddFilterClick,
    closeOnChildOverlayClick,
    selectedViewName
  }) {
    const hideFilterBar = hideFilters || filters.length === 0;
    const queryFieldMarkup = hideQueryField ? null : /* @__PURE__ */ import_react134.default.createElement("div", {
      className: styles38.Container
    }, /* @__PURE__ */ import_react134.default.createElement(Box, {
      padding: "200"
    }, /* @__PURE__ */ import_react134.default.createElement(InlineStack, {
      align: "start",
      blockAlign: "center",
      gap: {
        xs: "400",
        md: "300"
      }
    }, /* @__PURE__ */ import_react134.default.createElement("div", {
      className: styles38.SearchField,
      style: mountedState ? {
        ...defaultStyle,
        ...transitionStyles[mountedState]
      } : void 0
    }, /* @__PURE__ */ import_react134.default.createElement(SearchField, {
      onChange: onQueryChange,
      onFocus: onQueryFocus,
      onBlur: onQueryBlur,
      onClear: onQueryClear,
      value: queryValue,
      placeholder: queryPlaceholder,
      focused,
      disabled: disabled || disableQueryField,
      borderlessQueryField,
      loading,
      selectedViewName
    })), children)));
    const mountedStateStyles = mountedState && !hideQueryField ? {
      ...defaultFilterStyles,
      ...transitionFilterStyles[mountedState]
    } : void 0;
    const filtersMarkup = hideFilterBar ? null : /* @__PURE__ */ import_react134.default.createElement(FiltersBar, {
      filters,
      appliedFilters,
      onClearAll,
      disabled,
      hideQueryField,
      disableFilters,
      onAddFilterClick,
      closeOnChildOverlayClick,
      mountedStateStyles
    }, children);
    return /* @__PURE__ */ import_react134.default.createElement("div", {
      className: classNames(styles38.Filters, hideQueryField && styles38.hideQueryField)
    }, queryFieldMarkup, filtersMarkup);
  }

  // node_modules/@shopify/polaris/build/esm/components/Focus/Focus.js
  var import_react135 = __toESM(require_react());
  var Focus = /* @__PURE__ */ (0, import_react135.memo)(function Focus2({
    children,
    disabled,
    root
  }) {
    (0, import_react135.useEffect)(() => {
      if (disabled || !root) {
        return;
      }
      const node = isRef(root) ? root.current : root;
      if (!node || node.querySelector("[autofocus]")) {
        return;
      }
      focusFirstFocusableNode(node, false);
    }, [disabled, root]);
    return /* @__PURE__ */ import_react135.default.createElement(import_react135.default.Fragment, null, children);
  });
  function isRef(ref) {
    return ref.current !== void 0;
  }

  // node_modules/@shopify/polaris/build/esm/components/Form/Form.js
  var import_react136 = __toESM(require_react());
  function Form2({
    acceptCharset,
    action,
    autoComplete,
    children,
    encType,
    implicitSubmit = true,
    method = "post",
    name,
    noValidate,
    preventDefault = true,
    target,
    onSubmit
  }) {
    const i18n = useI18n();
    const handleSubmit = (0, import_react136.useCallback)((event) => {
      if (!preventDefault) {
        return;
      }
      event.preventDefault();
      onSubmit(event);
    }, [onSubmit, preventDefault]);
    const autoCompleteInputs = normalizeAutoComplete(autoComplete);
    const submitMarkup = implicitSubmit ? /* @__PURE__ */ import_react136.default.createElement(Text, {
      as: "span",
      visuallyHidden: true
    }, /* @__PURE__ */ import_react136.default.createElement("button", {
      type: "submit",
      "aria-hidden": "true",
      tabIndex: -1
    }, i18n.translate("Polaris.Common.submit"))) : null;
    return /* @__PURE__ */ import_react136.default.createElement("form", {
      acceptCharset,
      action,
      autoComplete: autoCompleteInputs,
      encType,
      method,
      name,
      noValidate,
      target,
      onSubmit: handleSubmit
    }, submitMarkup, children);
  }
  function normalizeAutoComplete(autoComplete) {
    if (autoComplete == null) {
      return autoComplete;
    }
    return autoComplete ? "on" : "off";
  }

  // node_modules/@shopify/polaris/build/esm/components/FormLayout/FormLayout.js
  var import_react139 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/FormLayout/components/Group/Group.js
  var import_react138 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/FormLayout/components/Item/Item.js
  var import_react137 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/FormLayout/FormLayout.css.js
  var styles40 = {
    "Item": "Polaris-FormLayout__Item",
    "grouped": "Polaris-FormLayout--grouped",
    "condensed": "Polaris-FormLayout--condensed"
  };

  // node_modules/@shopify/polaris/build/esm/components/FormLayout/components/Item/Item.js
  function Item5({
    children,
    condensed = false
  }) {
    const className = classNames(styles40.Item, condensed ? styles40.condensed : styles40.grouped);
    return children ? /* @__PURE__ */ import_react137.default.createElement("div", {
      className
    }, children) : null;
  }

  // node_modules/@shopify/polaris/build/esm/components/FormLayout/components/Group/Group.js
  function Group({
    children,
    condensed,
    title,
    helpText
  }) {
    const id = (0, import_react138.useId)();
    let helpTextElement = null;
    let helpTextId;
    let titleElement = null;
    let titleId;
    if (helpText) {
      helpTextId = `${id}HelpText`;
      helpTextElement = /* @__PURE__ */ import_react138.default.createElement(Box, {
        id: helpTextId,
        color: "text-secondary"
      }, helpText);
    }
    if (title) {
      titleId = `${id}Title`;
      titleElement = /* @__PURE__ */ import_react138.default.createElement(Text, {
        id: titleId,
        as: "p"
      }, title);
    }
    const itemsMarkup = import_react138.Children.map(children, (child) => wrapWithComponent(child, Item5, {
      condensed
    }));
    return /* @__PURE__ */ import_react138.default.createElement(BlockStack, {
      role: "group",
      gap: "200",
      "aria-labelledby": titleId,
      "aria-describedby": helpTextId
    }, titleElement, /* @__PURE__ */ import_react138.default.createElement(InlineStack, {
      gap: "300"
    }, itemsMarkup), helpTextElement);
  }

  // node_modules/@shopify/polaris/build/esm/components/FormLayout/FormLayout.js
  var FormLayout = /* @__PURE__ */ (0, import_react139.memo)(function FormLayout2({
    children
  }) {
    return /* @__PURE__ */ import_react139.default.createElement(BlockStack, {
      gap: "400"
    }, import_react139.Children.map(children, wrapChildren));
  });
  FormLayout.Group = Group;
  function wrapChildren(child, index) {
    if (isElementOfType(child, Group)) {
      return child;
    }
    const props = {
      key: index
    };
    return wrapWithComponent(child, Item5, props);
  }

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r in t)
          ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(r, e) {
    if (null == r)
      return {};
    var t = {};
    for (var n in r)
      if ({}.hasOwnProperty.call(r, n)) {
        if (e.includes(n))
          continue;
        t[n] = r[n];
      }
    return t;
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(t, e) {
    return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
      return t2.__proto__ = e2, t2;
    }, _setPrototypeOf(t, e);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(t, o) {
    t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
  }

  // node_modules/react-transition-group/esm/CSSTransition.js
  var import_prop_types3 = __toESM(require_prop_types());

  // node_modules/dom-helpers/esm/hasClass.js
  function hasClass(element, className) {
    if (element.classList)
      return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
  }

  // node_modules/dom-helpers/esm/addClass.js
  function addClass(element, className) {
    if (element.classList)
      element.classList.add(className);
    else if (!hasClass(element, className))
      if (typeof element.className === "string")
        element.className = element.className + " " + className;
      else
        element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
  }

  // node_modules/dom-helpers/esm/removeClass.js
  function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
  }
  function removeClass(element, className) {
    if (element.classList) {
      element.classList.remove(className);
    } else if (typeof element.className === "string") {
      element.className = replaceClassName(element.className, className);
    } else {
      element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
    }
  }

  // node_modules/react-transition-group/esm/CSSTransition.js
  var import_react142 = __toESM(require_react());

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types2 = __toESM(require_prop_types());
  var import_react141 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
    enter: import_prop_types.default.number,
    exit: import_prop_types.default.number,
    appear: import_prop_types.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
    enter: import_prop_types.default.string,
    exit: import_prop_types.default.string,
    active: import_prop_types.default.string
  }), import_prop_types.default.shape({
    enter: import_prop_types.default.string,
    enterDone: import_prop_types.default.string,
    enterActive: import_prop_types.default.string,
    exit: import_prop_types.default.string,
    exitDone: import_prop_types.default.string,
    exitActive: import_prop_types.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react140 = __toESM(require_react());
  var TransitionGroupContext_default = import_react140.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node) {
    return node.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom2.default.findDOMNode(this);
            if (node)
              forceReflow(node);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom2.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom2.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react141.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react141.default.cloneElement(import_react141.default.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(import_react141.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types2.default.shape({
      current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key, componentName, location2, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location2, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types2.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types2.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types2.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types2.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types2.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types2.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types2.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types2.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types2.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types2.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types2.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types2.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types2.default.func
  } : {};
  function noop7() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop7,
    onEntering: noop7,
    onEntered: noop7,
    onExit: noop7,
    onExiting: noop7,
    onExited: noop7
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/react-transition-group/esm/CSSTransition.js
  var _addClass = function addClass2(node, classes) {
    return node && classes && classes.split(" ").forEach(function(c) {
      return addClass(node, c);
    });
  };
  var removeClass2 = function removeClass3(node, classes) {
    return node && classes && classes.split(" ").forEach(function(c) {
      return removeClass(node, c);
    });
  };
  var CSSTransition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(CSSTransition2, _React$Component);
    function CSSTransition2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.appliedClasses = {
        appear: {},
        enter: {},
        exit: {}
      };
      _this.onEnter = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
        _this.removeClasses(node, "exit");
        _this.addClass(node, appearing ? "appear" : "enter", "base");
        if (_this.props.onEnter) {
          _this.props.onEnter(maybeNode, maybeAppearing);
        }
      };
      _this.onEntering = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
        var type = appearing ? "appear" : "enter";
        _this.addClass(node, type, "active");
        if (_this.props.onEntering) {
          _this.props.onEntering(maybeNode, maybeAppearing);
        }
      };
      _this.onEntered = function(maybeNode, maybeAppearing) {
        var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
        var type = appearing ? "appear" : "enter";
        _this.removeClasses(node, type);
        _this.addClass(node, type, "done");
        if (_this.props.onEntered) {
          _this.props.onEntered(maybeNode, maybeAppearing);
        }
      };
      _this.onExit = function(maybeNode) {
        var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
        _this.removeClasses(node, "appear");
        _this.removeClasses(node, "enter");
        _this.addClass(node, "exit", "base");
        if (_this.props.onExit) {
          _this.props.onExit(maybeNode);
        }
      };
      _this.onExiting = function(maybeNode) {
        var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
        _this.addClass(node, "exit", "active");
        if (_this.props.onExiting) {
          _this.props.onExiting(maybeNode);
        }
      };
      _this.onExited = function(maybeNode) {
        var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
        _this.removeClasses(node, "exit");
        _this.addClass(node, "exit", "done");
        if (_this.props.onExited) {
          _this.props.onExited(maybeNode);
        }
      };
      _this.resolveArguments = function(maybeNode, maybeAppearing) {
        return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
      };
      _this.getClassNames = function(type) {
        var classNames2 = _this.props.classNames;
        var isStringClassNames = typeof classNames2 === "string";
        var prefix = isStringClassNames && classNames2 ? classNames2 + "-" : "";
        var baseClassName = isStringClassNames ? "" + prefix + type : classNames2[type];
        var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames2[type + "Active"];
        var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames2[type + "Done"];
        return {
          baseClassName,
          activeClassName,
          doneClassName
        };
      };
      return _this;
    }
    var _proto = CSSTransition2.prototype;
    _proto.addClass = function addClass3(node, type, phase) {
      var className = this.getClassNames(type)[phase + "ClassName"];
      var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
      if (type === "appear" && phase === "done" && doneClassName) {
        className += " " + doneClassName;
      }
      if (phase === "active") {
        if (node)
          forceReflow(node);
      }
      if (className) {
        this.appliedClasses[type][phase] = className;
        _addClass(node, className);
      }
    };
    _proto.removeClasses = function removeClasses(node, type) {
      var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
      this.appliedClasses[type] = {};
      if (baseClassName) {
        removeClass2(node, baseClassName);
      }
      if (activeClassName) {
        removeClass2(node, activeClassName);
      }
      if (doneClassName) {
        removeClass2(node, doneClassName);
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
      return /* @__PURE__ */ import_react142.default.createElement(Transition_default, _extends({}, props, {
        onEnter: this.onEnter,
        onEntered: this.onEntered,
        onEntering: this.onEntering,
        onExit: this.onExit,
        onExiting: this.onExiting,
        onExited: this.onExited
      }));
    };
    return CSSTransition2;
  }(import_react142.default.Component);
  CSSTransition.defaultProps = {
    classNames: ""
  };
  CSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {
    /**
     * The animation classNames applied to the component as it appears, enters,
     * exits or has finished the transition. A single name can be provided, which
     * will be suffixed for each stage, e.g. `classNames="fade"` applies:
     *
     * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
     * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
     * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
     *
     * A few details to note about how these classes are applied:
     *
     * 1. They are _joined_ with the ones that are already defined on the child
     *    component, so if you want to add some base styles, you can use
     *    `className` without worrying that it will be overridden.
     *
     * 2. If the transition component mounts with `in={false}`, no classes are
     *    applied yet. You might be expecting `*-exit-done`, but if you think
     *    about it, a component cannot finish exiting if it hasn't entered yet.
     *
     * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
     *    allows you to define different behavior for when appearing is done and
     *    when regular entering is done, using selectors like
     *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
     *    an epic entrance animation when element first appears in the DOM using
     *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
     *    simply use `fade-enter-done` for defining both cases.
     *
     * Each individual classNames can also be specified independently like:
     *
     * ```js
     * classNames={{
     *  appear: 'my-appear',
     *  appearActive: 'my-active-appear',
     *  appearDone: 'my-done-appear',
     *  enter: 'my-enter',
     *  enterActive: 'my-active-enter',
     *  enterDone: 'my-done-enter',
     *  exit: 'my-exit',
     *  exitActive: 'my-active-exit',
     *  exitDone: 'my-done-exit',
     * }}
     * ```
     *
     * If you want to set these classes using CSS Modules:
     *
     * ```js
     * import styles from './styles.css';
     * ```
     *
     * you might want to use camelCase in your CSS file, that way could simply
     * spread them instead of listing them one by one:
     *
     * ```js
     * classNames={{ ...styles }}
     * ```
     *
     * @type {string | {
     *  appear?: string,
     *  appearActive?: string,
     *  appearDone?: string,
     *  enter?: string,
     *  enterActive?: string,
     *  enterDone?: string,
     *  exit?: string,
     *  exitActive?: string,
     *  exitDone?: string,
     * }}
     */
    classNames: classNamesShape,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEnter: import_prop_types3.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter-active' or
     * 'appear-active' class is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types3.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'enter' or
     * 'appear' classes are **removed** and the `done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntered: import_prop_types3.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' class is
     * applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExit: import_prop_types3.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExiting: import_prop_types3.default.func,
    /**
     * A `<Transition>` callback fired immediately after the 'exit' classes
     * are **removed** and the `exit-done` class is added to the DOM node.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement)
     */
    onExited: import_prop_types3.default.func
  }) : {};
  var CSSTransition_default = CSSTransition;

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(e) {
    if (void 0 === e)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return e;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var import_prop_types4 = __toESM(require_prop_types());
  var import_react144 = __toESM(require_react());

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  var import_react143 = __toESM(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react143.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children)
      import_react143.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key) {
      return key in next ? next[key] : prev[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev) {
      if (prevKey in next) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return (0, import_react143.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react143.isValidElement)(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react143.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react143.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react143.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react143.isValidElement)(prevChild)) {
        children[key] = (0, import_react143.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component7 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory2);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component7 === null) {
        return /* @__PURE__ */ import_react144.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ import_react144.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react144.default.createElement(Component7, props, children));
    };
    return TransitionGroup2;
  }(import_react144.default.Component);
  TransitionGroup.propTypes = true ? {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: import_prop_types4.default.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: import_prop_types4.default.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: import_prop_types4.default.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: import_prop_types4.default.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: import_prop_types4.default.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: import_prop_types4.default.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup_default = TransitionGroup;

  // node_modules/@shopify/polaris/build/esm/utilities/set-root-property.js
  function setRootProperty(name, value, node) {
    if (!document)
      return;
    const element = node || document.documentElement;
    element.style.setProperty(name, value);
  }

  // node_modules/@shopify/polaris/build/esm/components/Modal/Modal.js
  var import_react152 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Modal/Modal.css.js
  var styles41 = {
    "Body": "Polaris-Modal__Body",
    "NoScrollBody": "Polaris-Modal__NoScrollBody",
    "IFrame": "Polaris-Modal__IFrame"
  };

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/Section/Section.js
  var import_react145 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/Section/Section.css.js
  var styles42 = {
    "Section": "Polaris-Modal-Section",
    "titleHidden": "Polaris-Modal-Section--titleHidden"
  };

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/Section/Section.js
  function Section4({
    children,
    flush = false,
    subdued = false,
    titleHidden = false
  }) {
    const className = classNames(styles42.Section, titleHidden && styles42.titleHidden);
    return /* @__PURE__ */ import_react145.default.createElement("div", {
      className
    }, /* @__PURE__ */ import_react145.default.createElement(Box, Object.assign({
      as: "section",
      padding: flush ? "0" : "400"
    }, titleHidden && {
      paddingInlineEnd: "0"
    }, subdued && {
      background: "bg-surface-tertiary"
    }), children));
  }

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/Dialog/Dialog.js
  var import_react148 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/Dialog/Dialog.css.js
  var styles43 = {
    "Container": "Polaris-Modal-Dialog__Container",
    "Dialog": "Polaris-Modal-Dialog",
    "Modal": "Polaris-Modal-Dialog__Modal",
    "limitHeight": "Polaris-Modal-Dialog--limitHeight",
    "sizeSmall": "Polaris-Modal-Dialog--sizeSmall",
    "sizeLarge": "Polaris-Modal-Dialog--sizeLarge",
    "sizeFullScreen": "Polaris-Modal-Dialog--sizeFullScreen",
    "animateFadeUp": "Polaris-Modal-Dialog--animateFadeUp",
    "entering": "Polaris-Modal-Dialog--entering",
    "exiting": "Polaris-Modal-Dialog--exiting",
    "exited": "Polaris-Modal-Dialog--exited",
    "entered": "Polaris-Modal-Dialog--entered"
  };

  // node_modules/@shopify/polaris/build/esm/components/TrapFocus/TrapFocus.js
  var import_react147 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/focus-manager/hooks.js
  var import_react146 = __toESM(require_react());
  function useFocusManager({
    trapping
  }) {
    const focusManager = (0, import_react146.useContext)(FocusManagerContext);
    const id = (0, import_react146.useId)();
    if (!focusManager) {
      throw new MissingAppProviderError("No FocusManager was provided.");
    }
    const {
      trapFocusList,
      add: addFocusItem,
      remove: removeFocusItem
    } = focusManager;
    const canSafelyFocus = trapFocusList[0] === id;
    const value = (0, import_react146.useMemo)(() => ({
      canSafelyFocus
    }), [canSafelyFocus]);
    (0, import_react146.useEffect)(() => {
      if (!trapping)
        return;
      addFocusItem(id);
      return () => {
        removeFocusItem(id);
      };
    }, [addFocusItem, id, removeFocusItem, trapping]);
    return value;
  }

  // node_modules/@shopify/polaris/build/esm/components/TrapFocus/TrapFocus.js
  function TrapFocus({
    trapping = true,
    children
  }) {
    const {
      canSafelyFocus
    } = useFocusManager({
      trapping
    });
    const focusTrapWrapper = (0, import_react147.useRef)(null);
    const [disableFocus, setDisableFocus] = (0, import_react147.useState)(true);
    (0, import_react147.useEffect)(() => {
      const disable = canSafelyFocus && !(focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement)) ? !trapping : true;
      setDisableFocus(disable);
    }, [canSafelyFocus, trapping]);
    const handleFocusIn = (event) => {
      const containerContentsHaveFocus = focusTrapWrapper.current && focusTrapWrapper.current.contains(document.activeElement);
      if (trapping === false || !focusTrapWrapper.current || containerContentsHaveFocus || event.target instanceof Element && event.target.matches(`${portal.selector} *`)) {
        return;
      }
      if (canSafelyFocus && event.target instanceof HTMLElement && focusTrapWrapper.current !== event.target && !focusTrapWrapper.current.contains(event.target)) {
        focusFirstFocusableNode(focusTrapWrapper.current);
      }
    };
    const handleTab = (event) => {
      if (trapping === false || !focusTrapWrapper.current) {
        return;
      }
      const firstFocusableNode = findFirstKeyboardFocusableNode(focusTrapWrapper.current);
      const lastFocusableNode = findLastKeyboardFocusableNode(focusTrapWrapper.current);
      if (event.target === lastFocusableNode && !event.shiftKey) {
        event.preventDefault();
        focusFirstKeyboardFocusableNode(focusTrapWrapper.current);
      }
      if (event.target === firstFocusableNode && event.shiftKey) {
        event.preventDefault();
        focusLastKeyboardFocusableNode(focusTrapWrapper.current);
      }
    };
    return /* @__PURE__ */ import_react147.default.createElement(Focus, {
      disabled: disableFocus,
      root: focusTrapWrapper.current
    }, /* @__PURE__ */ import_react147.default.createElement("div", {
      ref: focusTrapWrapper
    }, /* @__PURE__ */ import_react147.default.createElement(EventListener2, {
      event: "focusin",
      handler: handleFocusIn
    }), /* @__PURE__ */ import_react147.default.createElement(KeypressListener, {
      keyCode: Key.Tab,
      keyEvent: "keydown",
      handler: handleTab
    }), children));
  }

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/Dialog/Dialog.js
  function Dialog({
    instant,
    labelledBy,
    children,
    limitHeight,
    size,
    onClose,
    onExited,
    onEntered,
    setClosing,
    hasToasts,
    ...props
  }) {
    const theme = useTheme();
    const containerNode = (0, import_react148.useRef)(null);
    const frameContext = (0, import_react148.useContext)(FrameContext);
    let toastMessages;
    if (frameContext) {
      toastMessages = frameContext.toastMessages;
    }
    const classes = classNames(styles43.Modal, size && styles43[variationName("size", size)], limitHeight && styles43.limitHeight);
    const TransitionChild = instant ? Transition_default : FadeUp;
    (0, import_react148.useEffect)(() => {
      containerNode.current && !containerNode.current.contains(document.activeElement) && focusFirstFocusableNode(containerNode.current);
    }, []);
    const handleKeyDown2 = () => {
      if (setClosing) {
        setClosing(true);
      }
    };
    const handleKeyUp = () => {
      if (setClosing) {
        setClosing(false);
      }
      onClose();
    };
    const ariaLiveAnnouncements = /* @__PURE__ */ import_react148.default.createElement("div", {
      "aria-live": "assertive"
    }, toastMessages ? toastMessages.map((toastMessage) => /* @__PURE__ */ import_react148.default.createElement(Text, {
      visuallyHidden: true,
      as: "p",
      key: toastMessage.id
    }, toastMessage.content)) : null);
    return /* @__PURE__ */ import_react148.default.createElement(TransitionChild, Object.assign({}, props, {
      nodeRef: containerNode,
      mountOnEnter: true,
      unmountOnExit: true,
      timeout: parseInt(theme.motion["motion-duration-200"], 10),
      onEntered,
      onExited
    }), /* @__PURE__ */ import_react148.default.createElement("div", {
      className: styles43.Container,
      "data-polaris-layer": true,
      "data-polaris-overlay": true,
      ref: containerNode
    }, /* @__PURE__ */ import_react148.default.createElement(TrapFocus, null, /* @__PURE__ */ import_react148.default.createElement("div", {
      role: "dialog",
      "aria-modal": true,
      "aria-label": labelledBy,
      "aria-labelledby": labelledBy,
      tabIndex: -1,
      className: styles43.Dialog
    }, /* @__PURE__ */ import_react148.default.createElement("div", {
      className: classes
    }, /* @__PURE__ */ import_react148.default.createElement(KeypressListener, {
      keyCode: Key.Escape,
      keyEvent: "keydown",
      handler: handleKeyDown2
    }), /* @__PURE__ */ import_react148.default.createElement(KeypressListener, {
      keyCode: Key.Escape,
      handler: handleKeyUp
    }), children), ariaLiveAnnouncements))));
  }
  var fadeUpClasses = {
    appear: classNames(styles43.animateFadeUp, styles43.entering),
    appearActive: classNames(styles43.animateFadeUp, styles43.entered),
    enter: classNames(styles43.animateFadeUp, styles43.entering),
    enterActive: classNames(styles43.animateFadeUp, styles43.entered),
    exit: classNames(styles43.animateFadeUp, styles43.exiting),
    exitActive: classNames(styles43.animateFadeUp, styles43.exited)
  };
  function FadeUp({
    children,
    ...props
  }) {
    return /* @__PURE__ */ import_react148.default.createElement(CSSTransition_default, Object.assign({}, props, {
      classNames: fadeUpClasses
    }), children);
  }

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/Header/Header.js
  var import_react150 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/CloseButton/CloseButton.js
  var import_react149 = __toESM(require_react());
  function CloseButton({
    pressed,
    onClick
  }) {
    const i18n = useI18n();
    return /* @__PURE__ */ import_react149.default.createElement(Button, {
      variant: "tertiary",
      pressed,
      icon: SvgXIcon,
      onClick,
      accessibilityLabel: i18n.translate("Polaris.Common.close")
    });
  }

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/Header/Header.js
  function Header2({
    id,
    children,
    closing,
    titleHidden,
    onClose
  }) {
    const headerPaddingInline = "400";
    const headerPaddingBlock = "400";
    if (titleHidden || !children) {
      return /* @__PURE__ */ import_react150.default.createElement(Box, {
        position: "absolute",
        insetInlineEnd: headerPaddingInline,
        insetBlockStart: headerPaddingBlock,
        zIndex: "1"
      }, /* @__PURE__ */ import_react150.default.createElement(CloseButton, {
        onClick: onClose
      }));
    }
    return /* @__PURE__ */ import_react150.default.createElement(Box, {
      paddingBlockStart: "400",
      paddingBlockEnd: "400",
      paddingInlineStart: headerPaddingInline,
      paddingInlineEnd: headerPaddingInline,
      borderBlockEndWidth: "025",
      borderColor: "border",
      background: "bg-surface-tertiary"
    }, /* @__PURE__ */ import_react150.default.createElement(InlineGrid, {
      columns: {
        xs: "1fr auto"
      },
      gap: "400"
    }, /* @__PURE__ */ import_react150.default.createElement(InlineStack, {
      gap: "400",
      blockAlign: "center"
    }, /* @__PURE__ */ import_react150.default.createElement(Text, {
      id,
      as: "h2",
      variant: "headingMd",
      breakWord: true
    }, children)), /* @__PURE__ */ import_react150.default.createElement(CloseButton, {
      pressed: closing,
      onClick: onClose
    })));
  }

  // node_modules/@shopify/polaris/build/esm/components/Modal/components/Footer/Footer.js
  var import_react151 = __toESM(require_react());
  function Footer({
    primaryAction,
    secondaryActions,
    children
  }) {
    const primaryActionButton = primaryAction && buttonsFrom(primaryAction, {
      variant: "primary"
    }) || null;
    const secondaryActionButtons = secondaryActions && buttonsFrom(secondaryActions) || null;
    const actions = primaryActionButton || secondaryActionButtons ? /* @__PURE__ */ import_react151.default.createElement(InlineStack, {
      gap: "200"
    }, secondaryActionButtons, primaryActionButton) : null;
    return /* @__PURE__ */ import_react151.default.createElement(InlineStack, {
      gap: "400",
      blockAlign: "center"
    }, /* @__PURE__ */ import_react151.default.createElement(Box, {
      borderColor: "border",
      borderBlockStartWidth: "025",
      padding: "400",
      width: "100%"
    }, /* @__PURE__ */ import_react151.default.createElement(InlineStack, {
      gap: "400",
      blockAlign: "center",
      align: "space-between"
    }, /* @__PURE__ */ import_react151.default.createElement(Box, null, children), actions)));
  }

  // node_modules/@shopify/polaris/build/esm/components/Modal/Modal.js
  var IFRAME_LOADING_HEIGHT = 200;
  var DEFAULT_IFRAME_CONTENT_HEIGHT = 400;
  var Modal = function Modal2({
    children,
    title,
    titleHidden = false,
    src,
    iFrameName,
    open,
    instant,
    sectioned,
    loading,
    size,
    limitHeight,
    footer,
    primaryAction,
    secondaryActions,
    onScrolledToBottom,
    activator,
    activatorWrapper = "div",
    onClose,
    onIFrameLoad,
    onTransitionEnd,
    noScroll
  }) {
    const [iframeHeight, setIframeHeight] = (0, import_react152.useState)(IFRAME_LOADING_HEIGHT);
    const [closing, setClosing] = (0, import_react152.useState)(false);
    const headerId = (0, import_react152.useId)();
    const activatorRef = (0, import_react152.useRef)(null);
    const i18n = useI18n();
    const iframeTitle = i18n.translate("Polaris.Modal.iFrameTitle");
    let dialog;
    let backdrop;
    const handleEntered = (0, import_react152.useCallback)(() => {
      if (onTransitionEnd) {
        onTransitionEnd();
      }
    }, [onTransitionEnd]);
    const handleExited = (0, import_react152.useCallback)(() => {
      setIframeHeight(IFRAME_LOADING_HEIGHT);
      const activatorElement = activator && isRef2(activator) ? activator && activator.current : activatorRef.current;
      if (activatorElement) {
        requestAnimationFrame(() => focusFirstFocusableNode(activatorElement));
      }
    }, [activator]);
    const handleIFrameLoad = (0, import_react152.useCallback)((evt) => {
      const iframe = evt.target;
      if (iframe && iframe.contentWindow) {
        try {
          setIframeHeight(iframe.contentWindow.document.body.scrollHeight);
        } catch (_error) {
          setIframeHeight(DEFAULT_IFRAME_CONTENT_HEIGHT);
        }
      }
      if (onIFrameLoad != null) {
        onIFrameLoad(evt);
      }
    }, [onIFrameLoad]);
    if (open) {
      const footerMarkup = !footer && !primaryAction && !secondaryActions ? null : /* @__PURE__ */ import_react152.default.createElement(Footer, {
        primaryAction,
        secondaryActions
      }, footer);
      const content = sectioned ? wrapWithComponent(children, Section4, {
        titleHidden
      }) : children;
      const body = loading ? /* @__PURE__ */ import_react152.default.createElement(Box, {
        padding: "400"
      }, /* @__PURE__ */ import_react152.default.createElement(InlineStack, {
        gap: "400",
        align: "center",
        blockAlign: "center"
      }, /* @__PURE__ */ import_react152.default.createElement(Spinner, null))) : content;
      const scrollContainerMarkup = noScroll ? /* @__PURE__ */ import_react152.default.createElement("div", {
        className: styles41.NoScrollBody
      }, /* @__PURE__ */ import_react152.default.createElement(Box, {
        width: "100%",
        overflowX: "hidden",
        overflowY: "hidden"
      }, body)) : /* @__PURE__ */ import_react152.default.createElement(Scrollable, {
        shadow: true,
        className: styles41.Body,
        onScrolledToBottom
      }, body);
      const bodyMarkup = src ? /* @__PURE__ */ import_react152.default.createElement("iframe", {
        name: iFrameName,
        title: iframeTitle,
        src,
        className: styles41.IFrame,
        onLoad: handleIFrameLoad,
        style: {
          height: `${iframeHeight}px`
        }
      }) : scrollContainerMarkup;
      dialog = /* @__PURE__ */ import_react152.default.createElement(Dialog, {
        instant,
        labelledBy: headerId,
        onClose,
        onEntered: handleEntered,
        onExited: handleExited,
        size,
        limitHeight,
        setClosing
      }, /* @__PURE__ */ import_react152.default.createElement(Header2, {
        titleHidden,
        id: headerId,
        closing,
        onClose
      }, title), bodyMarkup, footerMarkup);
      backdrop = /* @__PURE__ */ import_react152.default.createElement(Backdrop, {
        setClosing,
        onClick: onClose
      });
    }
    const animated = !instant;
    const activatorMarkup = activator && !isRef2(activator) ? /* @__PURE__ */ import_react152.default.createElement(Box, {
      ref: activatorRef,
      as: activatorWrapper
    }, activator) : null;
    return /* @__PURE__ */ import_react152.default.createElement(WithinContentContext.Provider, {
      value: true
    }, activatorMarkup, /* @__PURE__ */ import_react152.default.createElement(Portal, {
      idPrefix: "modal"
    }, /* @__PURE__ */ import_react152.default.createElement(TransitionGroup_default, {
      appear: animated,
      enter: animated,
      exit: animated
    }, dialog), backdrop));
  };
  function isRef2(ref) {
    return Object.prototype.hasOwnProperty.call(ref, "current");
  }
  Modal.Section = Section4;

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/IndexFilters.js
  var import_react171 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/types.js
  var IndexFiltersMode = /* @__PURE__ */ function(IndexFiltersMode2) {
    IndexFiltersMode2["Default"] = "DEFAULT";
    IndexFiltersMode2["Filtering"] = "FILTERING";
    IndexFiltersMode2["EditingColumns"] = "EDITING_COLUMNS";
    return IndexFiltersMode2;
  }({});

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/IndexFilters.css.js
  var styles44 = {
    "IndexFiltersWrapper": "Polaris-IndexFilters__IndexFiltersWrapper",
    "IndexFilters": "Polaris-IndexFilters",
    "IndexFiltersSticky": "Polaris-IndexFilters__IndexFiltersSticky",
    "IndexFiltersStickyFlush": "Polaris-IndexFilters__IndexFiltersStickyFlush",
    "TabsWrapper": "Polaris-IndexFilters__TabsWrapper",
    "SmallScreenTabsWrapper": "Polaris-IndexFilters__SmallScreenTabsWrapper",
    "TabsWrapperLoading": "Polaris-IndexFilters__TabsWrapperLoading",
    "DesktopLoading": "Polaris-IndexFilters__DesktopLoading",
    "TabsLoading": "Polaris-IndexFilters__TabsLoading",
    "ActionWrap": "Polaris-IndexFilters__ActionWrap",
    "Spinner": "Polaris-IndexFilters__Spinner",
    "ButtonWrap": "Polaris-IndexFilters__ButtonWrap"
  };

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/hooks/useIsSticky/useIsSticky.js
  var import_react153 = __toESM(require_react());
  var DEBOUNCE_PERIOD = 250;
  function useIsSticky(mode, disabled, isFlushWhenSticky) {
    const hasIOSupport = typeof window !== "undefined" && Boolean(window.IntersectionObserver);
    const options = {
      root: null,
      rootMargin: `${isFlushWhenSticky ? "0px" : "-56px"} 0px 0px 0px`,
      threshold: 0
    };
    const [indexFilteringHeight, setIndexFiltersHeight] = (0, import_react153.useState)(0);
    const [isSticky, setIsSticky] = (0, import_react153.useState)(false);
    const measurerRef = (0, import_react153.useRef)(null);
    const intersectionRef = (0, import_react153.useRef)(null);
    const handleIntersect = (entries) => {
      entries.forEach((entry) => {
        setIsSticky(!entry.isIntersecting);
      });
    };
    const observerRef = (0, import_react153.useRef)(hasIOSupport ? new IntersectionObserver(handleIntersect, options) : null);
    (0, import_react153.useEffect)(() => {
      function computeDimensions() {
        const node = measurerRef.current;
        if (!node) {
          return {
            height: 0
          };
        }
        const box = node.getBoundingClientRect();
        const height = box.height;
        setIndexFiltersHeight(height);
      }
      computeDimensions();
      const debouncedComputeDimensions = debounce(computeDimensions, DEBOUNCE_PERIOD, {
        trailing: true
      });
      window.addEventListener("resize", debouncedComputeDimensions);
      return () => window.removeEventListener("resize", debouncedComputeDimensions);
    }, [measurerRef, mode]);
    (0, import_react153.useEffect)(() => {
      const observer = observerRef.current;
      if (!observer) {
        return;
      }
      const node = intersectionRef.current;
      if (node) {
        observer.observe(node);
      }
      return () => {
        observer?.disconnect();
      };
    }, [intersectionRef]);
    return {
      intersectionRef,
      measurerRef,
      isSticky: isSticky && !disabled,
      indexFilteringHeight
    };
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/UpdateButtons/UpdateButtons.js
  var import_react155 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/use-is-touch-device.js
  var import_react154 = __toESM(require_react());
  function useIsTouchDevice() {
    const [isTouchDevice, setIsTouchDevice] = (0, import_react154.useState)(false);
    const handleTouchStart = (0, import_react154.useCallback)(() => setIsTouchDevice(true), []);
    useEventListener("touchstart", handleTouchStart);
    return isTouchDevice;
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/UpdateButtons/UpdateButtons.js
  var MAX_VIEW_NAME_LENGTH = 40;
  function UpdateButtons({
    primaryAction,
    cancelAction,
    viewNames,
    disabled
  }) {
    const i18n = useI18n();
    const [savedViewName, setSavedViewName] = (0, import_react155.useState)("");
    const [savedViewModalOpen, setSavedViewModalOpen] = (0, import_react155.useState)(false);
    const container = (0, import_react155.useRef)(null);
    const isTouchDevice = useIsTouchDevice();
    (0, import_react155.useEffect)(() => {
      if (!container.current || isTouchDevice)
        return;
      if (savedViewModalOpen) {
        focusFirstFocusableNode(container.current);
      }
    }, [savedViewModalOpen, isTouchDevice]);
    async function handleClickSaveButton() {
      if (primaryAction?.type === "save-as") {
        handleOpenModal();
      } else {
        await primaryAction?.onAction("");
      }
    }
    function handleOpenModal() {
      setSavedViewModalOpen(true);
    }
    function handleCloseModal() {
      setSavedViewModalOpen(false);
    }
    function handleChange(value) {
      setSavedViewName(value);
    }
    async function handlePrimaryAction() {
      if (isPrimaryActionDisabled)
        return;
      await primaryAction?.onAction(savedViewName);
      handleCloseModal();
    }
    const buttonText = (0, import_react155.useMemo)(() => {
      switch (primaryAction?.type) {
        case "save":
          return i18n.translate("Polaris.IndexFilters.UpdateButtons.save");
        case "save-as":
        default:
          return i18n.translate("Polaris.IndexFilters.UpdateButtons.saveAs");
      }
    }, [primaryAction?.type, i18n]);
    const saveButton = /* @__PURE__ */ import_react155.default.createElement(Button, {
      size: "micro",
      onClick: handleClickSaveButton,
      disabled: primaryAction?.disabled || disabled
    }, buttonText);
    const hasSameNameError = viewNames.some((name) => name.trim().toLowerCase() === savedViewName.trim().toLowerCase());
    const isPrimaryActionDisabled = hasSameNameError || !savedViewName || primaryAction?.loading || savedViewName.length > MAX_VIEW_NAME_LENGTH;
    const cancelButtonMarkup = cancelAction ? /* @__PURE__ */ import_react155.default.createElement(Button, {
      variant: "tertiary",
      size: "micro",
      onClick: cancelAction.onAction,
      disabled
    }, i18n.translate("Polaris.IndexFilters.UpdateButtons.cancel")) : null;
    if (!primaryAction) {
      return cancelButtonMarkup;
    }
    return /* @__PURE__ */ import_react155.default.createElement(InlineStack, {
      align: "start",
      blockAlign: "center",
      gap: "100"
    }, cancelButtonMarkup, primaryAction.type === "save-as" ? /* @__PURE__ */ import_react155.default.createElement(Modal, {
      activator: /* @__PURE__ */ import_react155.default.createElement(InlineStack, null, saveButton),
      open: savedViewModalOpen,
      title: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.title"),
      onClose: handleCloseModal,
      primaryAction: {
        onAction: handlePrimaryAction,
        content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.save"),
        disabled: isPrimaryActionDisabled
      },
      secondaryActions: [{
        onAction: handleCloseModal,
        content: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.cancel")
      }]
    }, /* @__PURE__ */ import_react155.default.createElement(Modal.Section, null, /* @__PURE__ */ import_react155.default.createElement(Form2, {
      onSubmit: handlePrimaryAction
    }, /* @__PURE__ */ import_react155.default.createElement(FormLayout, null, /* @__PURE__ */ import_react155.default.createElement("div", {
      ref: container
    }, /* @__PURE__ */ import_react155.default.createElement(TextField, {
      label: i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.label"),
      value: savedViewName,
      onChange: handleChange,
      autoComplete: "off",
      maxLength: MAX_VIEW_NAME_LENGTH,
      showCharacterCount: true,
      error: hasSameNameError ? i18n.translate("Polaris.IndexFilters.UpdateButtons.modal.sameName", {
        name: savedViewName
      }) : void 0
    })))))) : saveButton);
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SortButton/SortButton.js
  var import_react157 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.js
  var import_react156 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.css.js
  var styles45 = {
    "DirectionButton": "Polaris-SortButton-DirectionButton",
    "DirectionButton-active": "Polaris-SortButton-DirectionButton__DirectionButton--active"
  };

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SortButton/components/DirectionButton/DirectionButton.js
  function DirectionButton({
    onClick,
    active,
    children,
    direction,
    value
  }) {
    const classes = classNames(styles45.DirectionButton, active && styles45["DirectionButton-active"]);
    function handleClick() {
      onClick([value]);
    }
    return /* @__PURE__ */ import_react156.default.createElement(UnstyledButton, {
      className: classes,
      onClick: handleClick
    }, /* @__PURE__ */ import_react156.default.createElement(Icon, {
      source: direction === "asc" ? SvgArrowUpIcon : SvgArrowDownIcon,
      tone: "base"
    }), /* @__PURE__ */ import_react156.default.createElement(Text, {
      as: "span",
      variant: "bodySm",
      fontWeight: "medium"
    }, children));
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SortButton/SortButton.js
  var SortButtonDirection = /* @__PURE__ */ function(SortButtonDirection2) {
    SortButtonDirection2["Asc"] = "asc";
    SortButtonDirection2["Desc"] = "desc";
    return SortButtonDirection2;
  }({});
  function SortButton({
    choices,
    selected,
    disabled,
    disclosureZIndexOverride,
    onChange,
    onChangeKey,
    onChangeDirection
  }) {
    const i18n = useI18n();
    const [active, setActive] = (0, import_react157.useState)(false);
    const [selectedValueKey, selectedDirection] = selected[0].split(" ");
    function handleClick() {
      setActive((pastActive) => !pastActive);
    }
    function handleClose() {
      setActive(false);
    }
    function handleChangeChoiceList(sel) {
      if (onChangeKey) {
        const [key] = sel[0].split(" ");
        onChangeKey(key);
      } else {
        onChange(sel);
      }
    }
    function handleChangeDirection(sel) {
      if (onChangeDirection) {
        const [, direction] = sel[0].split(" ");
        onChangeDirection(direction);
      } else {
        onChange(sel);
      }
    }
    const choiceListChoices = (0, import_react157.useMemo)(() => {
      const choiceCategories = choices.reduce((acc, curr) => {
        const alreadyExists = acc.some((option) => option.label === curr.label);
        const [, currentValueDirection] = curr.value.split(" ");
        const isSameDirection = currentValueDirection === selectedDirection;
        if (!alreadyExists) {
          return [...acc, curr];
        }
        if (isSameDirection) {
          return acc.map((option) => {
            if (option.label === curr.label) {
              return curr;
            }
            return option;
          });
        }
        return acc;
      }, []);
      return choiceCategories;
    }, [choices, selectedDirection]);
    const selectedChoices = choices.filter((choice) => {
      const [currentKey] = choice.value.split(" ");
      return currentKey === selectedValueKey;
    });
    const sortButton = /* @__PURE__ */ import_react157.default.createElement(Tooltip, {
      content: i18n.translate("Polaris.IndexFilters.SortButton.tooltip"),
      preferredPosition: "above",
      hoverDelay: 400,
      zIndexOverride: disclosureZIndexOverride
    }, /* @__PURE__ */ import_react157.default.createElement(Button, {
      size: "slim",
      icon: SvgSortIcon,
      onClick: handleClick,
      disabled,
      accessibilityLabel: i18n.translate("Polaris.IndexFilters.SortButton.ariaLabel")
    }));
    return /* @__PURE__ */ import_react157.default.createElement(Popover2, {
      fluidContent: true,
      active: active && !disabled,
      activator: sortButton,
      autofocusTarget: "first-node",
      onClose: handleClose,
      preferredAlignment: "right",
      zIndexOverride: disclosureZIndexOverride
    }, /* @__PURE__ */ import_react157.default.createElement(Box, {
      minWidth: "148px",
      paddingInlineStart: "300",
      paddingInlineEnd: "300",
      paddingBlockStart: "200",
      paddingBlockEnd: "200",
      borderBlockEndWidth: "025",
      borderColor: "border-secondary"
    }, /* @__PURE__ */ import_react157.default.createElement(ChoiceList, {
      title: i18n.translate("Polaris.IndexFilters.SortButton.title"),
      choices: choiceListChoices,
      selected,
      onChange: handleChangeChoiceList
    })), /* @__PURE__ */ import_react157.default.createElement(Box, {
      paddingInlineStart: "150",
      paddingInlineEnd: "150",
      paddingBlockStart: "200",
      paddingBlockEnd: "200"
    }, /* @__PURE__ */ import_react157.default.createElement(DirectionButton, {
      direction: "asc",
      active: selectedDirection === SortButtonDirection.Asc,
      onClick: handleChangeDirection,
      value: selectedChoices?.[0]?.value
    }, selectedChoices?.[0]?.directionLabel), /* @__PURE__ */ import_react157.default.createElement(DirectionButton, {
      direction: "desc",
      active: selectedDirection === SortButtonDirection.Desc,
      onClick: handleChangeDirection,
      value: selectedChoices?.[1]?.value
    }, selectedChoices?.[1]?.directionLabel)));
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/Container/Container.js
  var import_react158 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/Container/Container.css.js
  var styles46 = {
    "Container": "Polaris-IndexFilters-Container"
  };

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/Container/Container.js
  var Container = ({
    children
  }) => {
    return /* @__PURE__ */ import_react158.default.createElement("div", {
      className: styles46.Container
    }, children);
  };

  // node_modules/@shopify/polaris/build/esm/components/Tabs/Tabs.js
  var import_react168 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/use-previous.js
  var import_react159 = __toESM(require_react());
  function usePrevious(value) {
    const ref = (0, import_react159.useRef)();
    (0, import_react159.useEffect)(() => {
      ref.current = value;
    }, [value]);
    return ref.current;
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/utilities.js
  function getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth) {
    const sumTabWidths = tabWidths.reduce((sum, width) => sum + width, 0);
    const arrayOfTabIndices = tabs.map((_, index) => {
      return index;
    });
    const visibleTabs = [];
    const hiddenTabs = [];
    if (containerWidth > sumTabWidths) {
      visibleTabs.push(...arrayOfTabIndices);
    } else {
      visibleTabs.push(selected);
      let tabListWidth = tabWidths[selected];
      arrayOfTabIndices.forEach((currentTabIndex) => {
        if (currentTabIndex !== selected) {
          const currentTabWidth = tabWidths[currentTabIndex];
          if (tabListWidth + currentTabWidth >= containerWidth - disclosureWidth) {
            hiddenTabs.push(currentTabIndex);
            return;
          }
          visibleTabs.push(currentTabIndex);
          tabListWidth += currentTabWidth;
        }
      });
    }
    return {
      visibleTabs,
      hiddenTabs
    };
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/Tabs.css.js
  var styles47 = {
    "Outer": "Polaris-Tabs__Outer",
    "Wrapper": "Polaris-Tabs__Wrapper",
    "WrapperWithNewButton": "Polaris-Tabs__WrapperWithNewButton",
    "ButtonWrapper": "Polaris-Tabs__ButtonWrapper",
    "Tabs": "Polaris-Tabs",
    "Tab": "Polaris-Tabs__Tab",
    "Tab-active": "Polaris-Tabs__Tab--active",
    "Tab-hasActions": "Polaris-Tabs__Tab--hasActions",
    "Tab-iconOnly": "Polaris-Tabs__Tab--iconOnly",
    "fillSpace": "Polaris-Tabs--fillSpace",
    "TabContainer": "Polaris-Tabs__TabContainer",
    "fitted": "Polaris-Tabs--fitted",
    "titleWithIcon": "Polaris-Tabs--titleWithIcon",
    "List": "Polaris-Tabs__List",
    "Item": "Polaris-Tabs__Item",
    "DisclosureTab": "Polaris-Tabs__DisclosureTab",
    "DisclosureTab-visible": "Polaris-Tabs__DisclosureTab--visible",
    "DisclosureActivator": "Polaris-Tabs__DisclosureActivator",
    "TabsMeasurer": "Polaris-Tabs__TabsMeasurer",
    "NewTab": "Polaris-Tabs__NewTab",
    "ActionListWrap": "Polaris-Tabs__ActionListWrap",
    "Panel": "Polaris-Tabs__Panel",
    "Panel-hidden": "Polaris-Tabs__Panel--hidden"
  };

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/Tab/Tab.js
  var import_react162 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/Tab/components/DuplicateModal/DuplicateModal.js
  var import_react160 = __toESM(require_react());
  var MAX_VIEW_NAME_LENGTH2 = 40;
  function DuplicateModal({
    open,
    isModalLoading,
    name,
    onClose,
    onClickPrimaryAction,
    onClickSecondaryAction,
    helpText,
    viewNames
  }) {
    const i18n = useI18n();
    const [value, setValue] = (0, import_react160.useState)(name);
    const container = (0, import_react160.useRef)(null);
    const hasSameNameError = viewNames?.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase());
    const isPrimaryActionDisabled = isModalLoading || hasSameNameError || !value || value.length > MAX_VIEW_NAME_LENGTH2;
    (0, import_react160.useEffect)(() => {
      if (!container.current)
        return;
      if (open) {
        focusFirstFocusableNode(container.current);
      }
    }, [open]);
    (0, import_react160.useEffect)(() => {
      if (open) {
        setValue(name.slice(0, MAX_VIEW_NAME_LENGTH2));
      }
    }, [name, open]);
    const handleChange = (0, import_react160.useCallback)((newValue) => {
      setValue(newValue);
    }, []);
    async function handlePrimaryAction() {
      if (isPrimaryActionDisabled) {
        return;
      }
      await onClickPrimaryAction(value);
      setValue("");
      onClose();
    }
    function handleSecondaryAction() {
      onClickSecondaryAction?.();
      setValue(name);
      onClose();
    }
    return /* @__PURE__ */ import_react160.default.createElement(Modal, {
      open,
      onClose,
      title: i18n.translate("Polaris.Tabs.DuplicateModal.title"),
      primaryAction: {
        content: i18n.translate("Polaris.Tabs.DuplicateModal.create"),
        onAction: handlePrimaryAction,
        disabled: isPrimaryActionDisabled
      },
      secondaryActions: [{
        content: i18n.translate("Polaris.Tabs.DuplicateModal.cancel"),
        onAction: handleSecondaryAction
      }],
      instant: true
    }, /* @__PURE__ */ import_react160.default.createElement(Modal.Section, null, /* @__PURE__ */ import_react160.default.createElement(Form2, {
      onSubmit: handlePrimaryAction
    }, /* @__PURE__ */ import_react160.default.createElement(FormLayout, null, /* @__PURE__ */ import_react160.default.createElement("div", {
      ref: container
    }, /* @__PURE__ */ import_react160.default.createElement(TextField, {
      label: i18n.translate("Polaris.Tabs.DuplicateModal.label"),
      value,
      onChange: handleChange,
      autoComplete: "off",
      helpText,
      maxLength: MAX_VIEW_NAME_LENGTH2,
      showCharacterCount: true,
      error: hasSameNameError ? i18n.translate("Polaris.Tabs.DuplicateModal.errors.sameName", {
        name: value
      }) : void 0
    }))))));
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/Tab/components/RenameModal/RenameModal.js
  var import_react161 = __toESM(require_react());
  function RenameModal({
    open,
    isModalLoading,
    name,
    onClose,
    onClickPrimaryAction,
    onClickSecondaryAction,
    helpText,
    viewNames
  }) {
    const i18n = useI18n();
    const [value, setValue] = (0, import_react161.useState)(name);
    const container = (0, import_react161.useRef)(null);
    const hasSameNameError = viewNames?.filter((viewName) => viewName !== name).some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase());
    const isPrimaryActionDisabled = isModalLoading || hasSameNameError || value === name || !value;
    (0, import_react161.useEffect)(() => {
      if (!container.current)
        return;
      if (open) {
        focusFirstFocusableNode(container.current);
      }
    }, [open]);
    (0, import_react161.useEffect)(() => {
      if (open) {
        setValue(name);
      }
    }, [name, open]);
    const handleChange = (0, import_react161.useCallback)((newValue) => {
      setValue(newValue);
    }, []);
    async function handlePrimaryAction() {
      if (isPrimaryActionDisabled) {
        return;
      }
      await onClickPrimaryAction(value);
      setValue("");
      onClose();
    }
    function handleSecondaryAction() {
      onClickSecondaryAction?.();
      setValue(name);
      onClose();
    }
    return /* @__PURE__ */ import_react161.default.createElement(Modal, {
      open,
      onClose,
      title: i18n.translate("Polaris.Tabs.RenameModal.title"),
      primaryAction: {
        content: i18n.translate("Polaris.Tabs.RenameModal.create"),
        onAction: handlePrimaryAction,
        disabled: isPrimaryActionDisabled
      },
      secondaryActions: [{
        content: i18n.translate("Polaris.Tabs.RenameModal.cancel"),
        onAction: handleSecondaryAction
      }],
      instant: true
    }, /* @__PURE__ */ import_react161.default.createElement(Modal.Section, null, /* @__PURE__ */ import_react161.default.createElement(Form2, {
      onSubmit: handlePrimaryAction
    }, /* @__PURE__ */ import_react161.default.createElement(FormLayout, null, /* @__PURE__ */ import_react161.default.createElement("div", {
      ref: container
    }, /* @__PURE__ */ import_react161.default.createElement(TextField, {
      label: i18n.translate("Polaris.Tabs.RenameModal.label"),
      value,
      onChange: handleChange,
      autoComplete: "off",
      helpText,
      maxLength: 40,
      showCharacterCount: true,
      error: hasSameNameError ? i18n.translate("Polaris.Tabs.RenameModal.errors.sameName", {
        name: value
      }) : void 0
    }))))));
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/Tab/Tab.js
  var Tab = /* @__PURE__ */ (0, import_react162.forwardRef)(({
    content,
    accessibilityLabel,
    badge,
    id,
    panelID,
    url,
    onAction,
    actions,
    disabled,
    isModalLoading,
    icon,
    siblingTabHasFocus,
    measuring,
    focused,
    selected,
    onToggleModal,
    onTogglePopover,
    viewNames,
    tabIndexOverride,
    disclosureZIndexOverride,
    onFocus
  }, ref) => {
    const i18n = useI18n();
    const [popoverActive, setPopoverActive] = (0, import_react162.useState)(false);
    const [activeModalType, setActiveModalType] = (0, import_react162.useState)(null);
    const wasSelected = (0, import_react162.useRef)(selected);
    const panelFocused = (0, import_react162.useRef)(false);
    const node = (0, import_react162.useRef)(null);
    (0, import_react162.useEffect)(() => {
      onTogglePopover(popoverActive);
    }, [popoverActive, onTogglePopover]);
    (0, import_react162.useEffect)(() => {
      onToggleModal(Boolean(activeModalType));
    }, [activeModalType, onToggleModal]);
    (0, import_react162.useEffect)(() => {
      return () => {
        onToggleModal(false);
        onTogglePopover(false);
      };
    }, [onToggleModal, onTogglePopover]);
    (0, import_react162.useEffect)(() => {
      if (measuring) {
        return;
      }
      const itemHadFocus = focused || document.activeElement && document.activeElement.id === id;
      if (itemHadFocus && selected && panelID != null && !panelFocused.current) {
        focusPanelID(panelID);
        panelFocused.current = true;
      }
      if (selected && !wasSelected.current && panelID != null) {
        focusPanelID(panelID);
      } else if (focused && node.current != null && activeModalType == null && !disabled) {
        focusFirstFocusableNode(node.current);
      }
      wasSelected.current = selected;
    }, [focused, id, content, measuring, panelID, selected, activeModalType, disabled]);
    let tabIndex;
    if (selected && !siblingTabHasFocus && !measuring) {
      tabIndex = 0;
    } else if (focused && !measuring) {
      tabIndex = 0;
    } else {
      tabIndex = -1;
    }
    if (tabIndexOverride != null) {
      tabIndex = tabIndexOverride;
    }
    const renameAction = actions?.find((action) => action.type === "rename");
    const duplicateAction = actions?.find((action) => action.type === "duplicate");
    const deleteAction = actions?.find((action) => action.type === "delete");
    const togglePopoverActive = (0, import_react162.useCallback)(() => {
      if (!actions?.length) {
        return;
      }
      setPopoverActive((popoverActive2) => !popoverActive2);
    }, [actions]);
    const handleClick = (0, import_react162.useCallback)(() => {
      if (disabled) {
        return;
      }
      if (selected) {
        togglePopoverActive();
      } else {
        onAction?.();
      }
    }, [selected, onAction, togglePopoverActive, disabled]);
    const handleModalOpen = (type) => {
      setActiveModalType(type);
    };
    const handleModalClose = () => {
      setActiveModalType(null);
    };
    const handleSaveRenameModal = (0, import_react162.useCallback)(async (value) => {
      await renameAction?.onPrimaryAction?.(value);
      setTimeout(() => {
        if (node.current) {
          focusFirstFocusableNode(node.current);
        }
      }, 250);
    }, [renameAction]);
    const handleConfirmDeleteView = (0, import_react162.useCallback)(async () => {
      await deleteAction?.onPrimaryAction?.(content);
      handleModalClose();
    }, [deleteAction, content]);
    const handleSaveDuplicateModal = (0, import_react162.useCallback)(async (duplicateName) => {
      await duplicateAction?.onPrimaryAction?.(duplicateName);
    }, [duplicateAction]);
    const actionContent = {
      rename: {
        icon: SvgInfoIcon,
        content: i18n.translate("Polaris.Tabs.Tab.rename")
      },
      duplicate: {
        icon: SvgDuplicateIcon,
        content: i18n.translate("Polaris.Tabs.Tab.duplicate")
      },
      edit: {
        icon: SvgEditIcon,
        content: i18n.translate("Polaris.Tabs.Tab.edit")
      },
      "edit-columns": {
        icon: SvgLayoutColumns3Icon,
        content: i18n.translate("Polaris.Tabs.Tab.editColumns")
      },
      delete: {
        icon: SvgDeleteIcon,
        content: i18n.translate("Polaris.Tabs.Tab.delete"),
        destructive: true
      }
    };
    const formattedActions = actions?.map(({
      type,
      onAction: onAction2,
      onPrimaryAction,
      ...additionalOptions
    }) => {
      const isModalActivator = !type.includes("edit");
      return {
        ...actionContent[type],
        ...additionalOptions,
        onAction: () => {
          onAction2?.(content);
          togglePopoverActive();
          if (isModalActivator) {
            handleModalOpen(type);
          }
        }
      };
    });
    const handleKeyDown2 = (0, import_react162.useCallback)((event) => {
      if (event.key === " ") {
        event.preventDefault();
        handleClick();
      }
    }, [handleClick]);
    const tabContainerClassNames = classNames(styles47.TabContainer, selected && styles47.Underline);
    const urlIfNotDisabledOrSelected = disabled || selected ? void 0 : url;
    const BaseComponent = urlIfNotDisabledOrSelected ? UnstyledLink : UnstyledButton;
    const tabClassName = classNames(styles47.Tab, icon && styles47["Tab-iconOnly"], popoverActive && styles47["Tab-popoverActive"], selected && styles47["Tab-active"], selected && actions?.length && styles47["Tab-hasActions"]);
    const badgeMarkup = badge ? /* @__PURE__ */ import_react162.default.createElement(Badge, {
      tone: selected ? void 0 : "new"
    }, badge) : null;
    const disclosureMarkup = selected && actions?.length ? /* @__PURE__ */ import_react162.default.createElement("div", {
      className: classNames(styles47.IconWrap)
    }, /* @__PURE__ */ import_react162.default.createElement(Icon, {
      source: SvgChevronDownIcon
    })) : null;
    const activator = /* @__PURE__ */ import_react162.default.createElement(BaseComponent, {
      id,
      className: tabClassName,
      tabIndex,
      "aria-selected": selected,
      "aria-controls": panelID,
      "aria-label": accessibilityLabel,
      role: tabIndexOverride == null ? "tab" : void 0,
      disabled,
      url: urlIfNotDisabledOrSelected,
      onFocus,
      onMouseUp: handleMouseUpByBlurring,
      onClick: handleClick,
      onKeyDown: handleKeyDown2
    }, /* @__PURE__ */ import_react162.default.createElement(InlineStack, {
      gap: "200",
      align: "center",
      blockAlign: "center",
      wrap: false
    }, /* @__PURE__ */ import_react162.default.createElement(Text, {
      as: "span",
      variant: "bodySm",
      fontWeight: "medium"
    }, icon ?? content), badgeMarkup), disclosureMarkup);
    const isPlainButton = !selected || !actions?.length;
    const renameModal = renameAction ? /* @__PURE__ */ import_react162.default.createElement(RenameModal, {
      name: content,
      open: activeModalType === "rename",
      onClose: handleModalClose,
      onClickPrimaryAction: handleSaveRenameModal,
      isModalLoading,
      viewNames
    }) : null;
    const duplicateModal = duplicateAction ? /* @__PURE__ */ import_react162.default.createElement(DuplicateModal, {
      open: activeModalType === "duplicate",
      name: i18n.translate("Polaris.Tabs.Tab.copy", {
        name: content
      }),
      onClose: handleModalClose,
      onClickPrimaryAction: handleSaveDuplicateModal,
      isModalLoading,
      viewNames: viewNames || []
    }) : null;
    const deleteModal = deleteAction ? /* @__PURE__ */ import_react162.default.createElement(Modal, {
      open: activeModalType === "delete",
      onClose: handleModalClose,
      primaryAction: {
        content: i18n.translate("Polaris.Tabs.Tab.deleteModal.delete"),
        onAction: handleConfirmDeleteView,
        destructive: true,
        disabled: isModalLoading
      },
      secondaryActions: [{
        content: i18n.translate("Polaris.Tabs.Tab.deleteModal.cancel"),
        onAction: handleModalClose
      }],
      title: i18n.translate("Polaris.Tabs.Tab.deleteModal.title"),
      instant: true
    }, /* @__PURE__ */ import_react162.default.createElement(Modal.Section, null, i18n.translate("Polaris.Tabs.Tab.deleteModal.description", {
      viewName: content
    }))) : null;
    const markup = isPlainButton || disabled ? activator : /* @__PURE__ */ import_react162.default.createElement(import_react162.default.Fragment, null, /* @__PURE__ */ import_react162.default.createElement(Popover2, {
      active: popoverActive,
      activator,
      autofocusTarget: "first-node",
      onClose: togglePopoverActive,
      zIndexOverride: disclosureZIndexOverride
    }, /* @__PURE__ */ import_react162.default.createElement("div", {
      className: styles47.ActionListWrap
    }, /* @__PURE__ */ import_react162.default.createElement(ActionList, {
      actionRole: "menuitem",
      items: formattedActions
    }))), renameModal, duplicateModal, deleteModal);
    if (icon) {
      return markup;
    }
    return /* @__PURE__ */ import_react162.default.createElement("li", {
      className: tabContainerClassNames,
      ref: mergeRefs2([node, ref]),
      role: "presentation"
    }, markup);
  });
  Tab.displayName = "Tab";
  function focusPanelID(panelID) {
    const panel = document.getElementById(panelID);
    if (panel) {
      panel.focus({
        preventScroll: true
      });
    }
  }
  function mergeRefs2(refs) {
    return (node) => {
      for (const ref of refs) {
        if (ref != null) {
          ref.current = node;
        }
      }
    };
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/Panel/Panel.js
  var import_react163 = __toESM(require_react());
  function Panel({
    hidden,
    id,
    tabID,
    children
  }) {
    const className = classNames(styles47.Panel, hidden && styles47["Panel-hidden"]);
    return /* @__PURE__ */ import_react163.default.createElement("div", {
      className,
      id,
      role: "tabpanel",
      "aria-labelledby": tabID,
      tabIndex: -1
    }, children);
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/List/List.js
  var import_react165 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/Item/Item.js
  var import_react164 = __toESM(require_react());
  var Item6 = /* @__PURE__ */ (0, import_react164.memo)(function Item7({
    id,
    focused,
    children,
    url,
    accessibilityLabel,
    onClick = noop8
  }) {
    const focusedNode = (0, import_react164.useRef)(null);
    (0, import_react164.useEffect)(() => {
      const focusTarget = focusedNode.current;
      if (focusTarget && focusTarget instanceof HTMLElement && focused) {
        requestAnimationFrame(() => {
          focusTarget.focus();
        });
      }
    }, [focusedNode, focused]);
    const classname = classNames(styles47.Item);
    const sharedProps = {
      id,
      ref: focusedNode,
      onClick,
      className: classname,
      "aria-selected": false,
      "aria-label": accessibilityLabel
    };
    const markup = url ? /* @__PURE__ */ import_react164.default.createElement(UnstyledLink, Object.assign({}, sharedProps, {
      url
    }), children) : /* @__PURE__ */ import_react164.default.createElement("button", Object.assign({}, sharedProps, {
      ref: focusedNode,
      type: "button"
    }), children);
    return /* @__PURE__ */ import_react164.default.createElement("li", null, markup);
  });
  function noop8() {
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/List/List.js
  function List({
    focusIndex,
    disclosureTabs,
    onClick = noop9,
    onKeyPress = noop9
  }) {
    const tabs = disclosureTabs.map(({
      id,
      content,
      ...tabProps
    }, index) => {
      return /* @__PURE__ */ import_react165.default.createElement(Item6, Object.assign({
        key: id
      }, tabProps, {
        id,
        focused: index === focusIndex,
        onClick: onClick.bind(null, id)
      }), content);
    });
    return /* @__PURE__ */ import_react165.default.createElement("ul", {
      className: styles47.List,
      onKeyDown: handleKeyDown,
      onKeyUp: onKeyPress
    }, tabs);
  }
  function noop9() {
  }
  function handleKeyDown(event) {
    const {
      key
    } = event;
    if (key === "ArrowLeft" || key === "ArrowRight") {
      event.preventDefault();
      event.stopPropagation();
    }
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/CreateViewModal/CreateViewModal.js
  var import_react166 = __toESM(require_react());
  var MAX_VIEW_NAME_LENGTH3 = 40;
  function CreateViewModal({
    activator,
    open,
    onClose,
    onClickPrimaryAction,
    onClickSecondaryAction,
    viewNames
  }) {
    const i18n = useI18n();
    const [value, setValue] = (0, import_react166.useState)("");
    const [loading, setLoading] = (0, import_react166.useState)(false);
    const container = (0, import_react166.useRef)(null);
    const isTouchDevice = useIsTouchDevice();
    const hasSameNameError = viewNames.some((viewName) => viewName.trim().toLowerCase() === value.trim().toLowerCase());
    const isPrimaryActionDisabled = !value || hasSameNameError || loading || value.length > MAX_VIEW_NAME_LENGTH3;
    (0, import_react166.useEffect)(() => {
      if (!container.current || isTouchDevice)
        return;
      if (open) {
        focusFirstFocusableNode(container.current);
        const timeout2 = setTimeout(() => {
          if (!container.current)
            return;
          focusFirstFocusableNode(container.current);
        }, 50);
        return () => clearTimeout(timeout2);
      }
    }, [open, isTouchDevice]);
    const handleChange = (0, import_react166.useCallback)((newValue) => {
      setValue(newValue);
    }, []);
    async function handlePrimaryAction() {
      if (hasSameNameError || isPrimaryActionDisabled) {
        return;
      }
      setLoading(true);
      await onClickPrimaryAction(value);
      setLoading(false);
      setValue("");
      onClose();
    }
    function handleSecondaryAction() {
      onClickSecondaryAction?.();
      setValue("");
      onClose();
    }
    return /* @__PURE__ */ import_react166.default.createElement(Modal, {
      activator,
      open,
      onClose,
      title: i18n.translate("Polaris.Tabs.CreateViewModal.title"),
      primaryAction: {
        content: i18n.translate("Polaris.Tabs.CreateViewModal.create"),
        onAction: handlePrimaryAction,
        disabled: isPrimaryActionDisabled
      },
      secondaryActions: [{
        content: i18n.translate("Polaris.Tabs.CreateViewModal.cancel"),
        onAction: handleSecondaryAction
      }]
    }, /* @__PURE__ */ import_react166.default.createElement(Modal.Section, null, /* @__PURE__ */ import_react166.default.createElement(Form2, {
      onSubmit: handlePrimaryAction
    }, /* @__PURE__ */ import_react166.default.createElement(FormLayout, null, /* @__PURE__ */ import_react166.default.createElement("div", {
      ref: container
    }, /* @__PURE__ */ import_react166.default.createElement(TextField, {
      label: i18n.translate("Polaris.Tabs.CreateViewModal.label"),
      value,
      onChange: handleChange,
      autoComplete: "off",
      maxLength: MAX_VIEW_NAME_LENGTH3,
      showCharacterCount: true,
      error: hasSameNameError ? i18n.translate("Polaris.Tabs.CreateViewModal.errors.sameName", {
        name: value
      }) : void 0
    }))))));
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/components/TabMeasurer/TabMeasurer.js
  var import_react167 = __toESM(require_react());
  var TabMeasurer = /* @__PURE__ */ (0, import_react167.memo)(function TabMeasurer2({
    selected,
    tabs,
    activator,
    tabToFocus,
    siblingTabHasFocus,
    handleMeasurement: handleMeasurementProp
  }) {
    const containerNode = (0, import_react167.useRef)(null);
    const animationFrame = (0, import_react167.useRef)(null);
    const handleMeasurement = (0, import_react167.useCallback)(() => {
      if (animationFrame.current) {
        cancelAnimationFrame(animationFrame.current);
      }
      animationFrame.current = requestAnimationFrame(() => {
        if (!containerNode.current) {
          return;
        }
        const containerWidth = containerNode.current.offsetWidth - 20 - 28;
        const hiddenTabNodes = containerNode.current.children;
        const hiddenTabNodesArray = Array.from(hiddenTabNodes);
        const hiddenTabWidths = hiddenTabNodesArray.map((node) => {
          const buttonWidth = Math.ceil(node.getBoundingClientRect().width);
          return buttonWidth + 4;
        });
        const disclosureWidth = hiddenTabWidths.pop() || 0;
        handleMeasurementProp({
          containerWidth,
          disclosureWidth,
          hiddenTabWidths
        });
      });
    }, [handleMeasurementProp]);
    (0, import_react167.useEffect)(() => {
      handleMeasurement();
    }, [handleMeasurement, tabs]);
    useComponentDidMount(() => {
      if (true) {
        setTimeout(handleMeasurement, 0);
      }
    });
    const tabsMarkup = tabs.map((tab, index) => {
      return /* @__PURE__ */ import_react167.default.createElement(Tab, {
        measuring: true,
        key: `$${tab.id}Hidden`,
        id: `${tab.id}Measurer`,
        siblingTabHasFocus,
        focused: index === tabToFocus,
        selected: index === selected,
        url: tab.url,
        content: tab.content,
        onTogglePopover: noop10,
        onToggleModal: noop10
      });
    });
    const classname = classNames(styles47.Tabs, styles47.TabsMeasurer);
    useEventListener("resize", handleMeasurement);
    return /* @__PURE__ */ import_react167.default.createElement("div", {
      className: classname,
      ref: containerNode
    }, tabsMarkup, activator);
  });
  function noop10() {
  }

  // node_modules/@shopify/polaris/build/esm/components/Tabs/Tabs.js
  var CREATE_NEW_VIEW_ID = "create-new-view";
  var Tabs = ({
    tabs,
    children,
    selected,
    newViewAccessibilityLabel,
    canCreateNewView,
    disabled,
    onCreateNewView,
    onSelect,
    fitted,
    disclosureText,
    disclosureZIndexOverride
  }) => {
    const i18n = useI18n();
    const {
      mdDown
    } = useBreakpoints();
    const scrollRef = (0, import_react168.useRef)(null);
    const wrapRef = (0, import_react168.useRef)(null);
    const selectedTabRef = (0, import_react168.useRef)(null);
    const [state, setState] = (0, import_react168.useReducer)((data2, partialData) => {
      return {
        ...data2,
        ...partialData
      };
    }, {
      disclosureWidth: 0,
      containerWidth: Infinity,
      tabWidths: [],
      visibleTabs: [],
      hiddenTabs: [],
      showDisclosure: false,
      tabToFocus: -1,
      isNewViewModalActive: false,
      modalSubmitted: false,
      isTabsFocused: false,
      isTabPopoverOpen: false,
      isTabModalOpen: false
    });
    const {
      tabToFocus,
      visibleTabs,
      hiddenTabs,
      showDisclosure,
      isNewViewModalActive,
      modalSubmitted,
      disclosureWidth,
      tabWidths,
      containerWidth,
      isTabsFocused,
      isTabModalOpen,
      isTabPopoverOpen
    } = state;
    const prevModalOpen = usePrevious(isTabModalOpen);
    const prevPopoverOpen = usePrevious(isTabPopoverOpen);
    (0, import_react168.useEffect)(() => {
      const hasModalClosed = prevModalOpen && !isTabModalOpen;
      const hasPopoverClosed = prevPopoverOpen && !isTabPopoverOpen;
      if (hasModalClosed) {
        setState({
          isTabsFocused: true,
          tabToFocus: selected
        });
      } else if (hasPopoverClosed && !isTabModalOpen) {
        setState({
          isTabsFocused: true,
          tabToFocus: selected
        });
      }
    }, [prevPopoverOpen, isTabPopoverOpen, prevModalOpen, isTabModalOpen, selected, tabToFocus]);
    const handleTogglePopover = (0, import_react168.useCallback)((isOpen) => setState({
      isTabPopoverOpen: isOpen
    }), []);
    const handleToggleModal = (0, import_react168.useCallback)((isOpen) => setState({
      isTabModalOpen: isOpen
    }), []);
    const handleCloseNewViewModal = () => {
      setState({
        isNewViewModalActive: false
      });
    };
    const handleSaveNewViewModal = async (value) => {
      if (!onCreateNewView) {
        return false;
      }
      const hasExecuted = await onCreateNewView?.(value);
      if (hasExecuted) {
        setState({
          modalSubmitted: true
        });
      }
      return hasExecuted;
    };
    const handleClickNewTab = () => {
      setState({
        isNewViewModalActive: true
      });
    };
    const handleTabClick = (0, import_react168.useCallback)((id) => {
      const tab = tabs.find((aTab) => aTab.id === id);
      if (tab == null) {
        return null;
      }
      const selectedIndex = tabs.indexOf(tab);
      onSelect?.(selectedIndex);
    }, [tabs, onSelect]);
    const renderTabMarkup = (0, import_react168.useCallback)((tab, index) => {
      const handleClick = () => {
        handleTabClick(tab.id);
        tab.onAction?.();
      };
      const viewNames2 = tabs.map(({
        content
      }) => content);
      const tabPanelID = tab.panelID || `${tab.id}-panel`;
      return /* @__PURE__ */ import_react168.default.createElement(Tab, Object.assign({}, tab, {
        key: `${index}-${tab.id}`,
        id: tab.id,
        panelID: children ? tabPanelID : void 0,
        disabled: disabled || tab.disabled,
        siblingTabHasFocus: tabToFocus > -1,
        focused: index === tabToFocus,
        selected: index === selected,
        onAction: handleClick,
        accessibilityLabel: tab.accessibilityLabel,
        url: tab.url,
        content: tab.content,
        onToggleModal: handleToggleModal,
        onTogglePopover: handleTogglePopover,
        viewNames: viewNames2,
        disclosureZIndexOverride,
        ref: index === selected ? selectedTabRef : null
      }));
    }, [disabled, tabs, children, selected, tabToFocus, disclosureZIndexOverride, handleTabClick, handleToggleModal, handleTogglePopover]);
    const handleFocus = (0, import_react168.useCallback)((event) => {
      const target = event.target;
      const isItem = target.classList.contains(styles47.Item);
      const isInNaturalDOMOrder = target.closest(`[data-tabs-focus-catchment]`) || isItem;
      const isDisclosureActivator = target.classList.contains(styles47.DisclosureActivator);
      if (isDisclosureActivator || !isInNaturalDOMOrder) {
        return;
      }
      setState({
        isTabsFocused: true
      });
    }, []);
    const handleBlur = (0, import_react168.useCallback)((event) => {
      const target = event.target;
      const relatedTarget = event.relatedTarget;
      const isInNaturalDOMOrder = relatedTarget?.closest?.(`.${styles47.Tabs}`);
      const targetIsATab = target?.classList?.contains?.(styles47.Tab);
      const focusReceiverIsAnItem = relatedTarget?.classList.contains(styles47.Item);
      if (!relatedTarget && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
        setState({
          tabToFocus: -1
        });
        return;
      }
      if (!isInNaturalDOMOrder && !isTabModalOpen && !targetIsATab && !focusReceiverIsAnItem) {
        setState({
          tabToFocus: -1
        });
        return;
      }
      setState({
        isTabsFocused: false
      });
    }, [isTabModalOpen]);
    const handleKeyDown2 = (event) => {
      if (isTabPopoverOpen || isTabModalOpen || isNewViewModalActive) {
        return;
      }
      const {
        key
      } = event;
      if (key === "ArrowLeft" || key === "ArrowRight") {
        event.preventDefault();
        event.stopPropagation();
      }
    };
    (0, import_react168.useEffect)(() => {
      const {
        visibleTabs: visibleTabs2,
        hiddenTabs: hiddenTabs2
      } = getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth, tabWidths, containerWidth);
      setState({
        visibleTabs: visibleTabs2,
        hiddenTabs: hiddenTabs2
      });
    }, [containerWidth, disclosureWidth, tabs, selected, tabWidths, setState]);
    const moveToSelectedTab = (0, import_react168.useCallback)(() => {
      const activeButton = selectedTabRef.current?.querySelector(`.${styles47["Tab-active"]}`);
      if (activeButton) {
        moveToActiveTab(activeButton.offsetLeft);
      }
    }, []);
    (0, import_react168.useEffect)(() => {
      if (mdDown) {
        moveToSelectedTab();
      }
    }, [moveToSelectedTab, selected, mdDown]);
    (0, import_react168.useEffect)(() => {
      if (isTabsFocused && !showDisclosure) {
        const tabToFocus2 = selected;
        setState({
          tabToFocus: tabToFocus2
        });
      }
    }, [isTabsFocused, selected, setState, showDisclosure]);
    const handleKeyPress = (event) => {
      const {
        showDisclosure: showDisclosure2,
        visibleTabs: visibleTabs2,
        hiddenTabs: hiddenTabs2,
        tabToFocus: tabToFocus2,
        isNewViewModalActive: isNewViewModalActive2
      } = state;
      if (isTabModalOpen || isTabPopoverOpen || isNewViewModalActive2) {
        return;
      }
      const key = event.key;
      const tabsArrayInOrder = showDisclosure2 || mdDown ? visibleTabs2.concat(hiddenTabs2) : [...visibleTabs2];
      let newFocus = tabsArrayInOrder.indexOf(tabToFocus2);
      if (key === "ArrowRight") {
        newFocus += 1;
        if (newFocus === tabsArrayInOrder.length) {
          newFocus = 0;
        }
      }
      if (key === "ArrowLeft") {
        if (newFocus === -1 || newFocus === 0) {
          newFocus = tabsArrayInOrder.length - 1;
        } else {
          newFocus -= 1;
        }
      }
      const buttonToFocus = tabsArrayInOrder[newFocus];
      if (buttonToFocus != null) {
        setState({
          tabToFocus: buttonToFocus
        });
      }
    };
    const handleDisclosureActivatorClick = () => {
      setState({
        showDisclosure: !showDisclosure,
        tabToFocus: hiddenTabs[0]
      });
    };
    const handleClose = () => {
      setState({
        showDisclosure: false
      });
    };
    const handleMeasurement = (0, import_react168.useCallback)((measurements) => {
      const {
        hiddenTabWidths: tabWidths2,
        containerWidth: containerWidth2,
        disclosureWidth: disclosureWidth2
      } = measurements;
      const {
        visibleTabs: visibleTabs2,
        hiddenTabs: hiddenTabs2
      } = getVisibleAndHiddenTabIndices(tabs, selected, disclosureWidth2, tabWidths2, containerWidth2);
      setState({
        visibleTabs: visibleTabs2,
        hiddenTabs: hiddenTabs2,
        disclosureWidth: disclosureWidth2,
        containerWidth: containerWidth2,
        tabWidths: tabWidths2
      });
    }, [tabs, selected, setState]);
    const handleListTabClick = (id) => {
      handleTabClick(id);
      handleClose();
      setState({
        isTabsFocused: true
      });
    };
    const moveToActiveTab = (offsetLeft) => {
      setTimeout(() => {
        if (scrollRef.current && typeof scrollRef.current.scroll === "function") {
          const scrollRefOffset = wrapRef?.current?.offsetLeft || 0;
          scrollRef?.current?.scroll({
            left: offsetLeft - scrollRefOffset
          });
        }
      }, 0);
    };
    const createViewA11yLabel = newViewAccessibilityLabel || i18n.translate("Polaris.Tabs.newViewAccessibilityLabel");
    const tabsToShow = mdDown ? [...visibleTabs, ...hiddenTabs] : visibleTabs;
    const tabsMarkup = tabsToShow.sort((tabA, tabB) => tabA - tabB).filter((tabIndex) => tabs[tabIndex]).map((tabIndex) => renderTabMarkup(tabs[tabIndex], tabIndex));
    const disclosureActivatorVisible = visibleTabs.length < tabs.length && !mdDown;
    const classname = classNames(styles47.Tabs, fitted && styles47.fitted, disclosureActivatorVisible && styles47.fillSpace);
    const wrapperClassNames = classNames(styles47.Wrapper, canCreateNewView && styles47.WrapperWithNewButton);
    const disclosureTabClassName = classNames(styles47.DisclosureTab, disclosureActivatorVisible && styles47["DisclosureTab-visible"]);
    const disclosureButtonClassName = classNames(styles47.DisclosureActivator);
    const disclosureButtonContent = /* @__PURE__ */ import_react168.default.createElement(import_react168.default.Fragment, null, /* @__PURE__ */ import_react168.default.createElement(Text, {
      as: "span",
      variant: "bodySm",
      fontWeight: "medium"
    }, disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel")), /* @__PURE__ */ import_react168.default.createElement("div", {
      className: classNames(styles47.IconWrap, disclosureActivatorVisible && showDisclosure && styles47["IconWrap-open"])
    }, /* @__PURE__ */ import_react168.default.createElement(Icon, {
      source: SvgChevronDownIcon,
      tone: "subdued"
    })));
    const disclosureButton = /* @__PURE__ */ import_react168.default.createElement(UnstyledButton, {
      type: "button",
      className: disclosureButtonClassName,
      onClick: handleDisclosureActivatorClick,
      "aria-label": disclosureText ?? i18n.translate("Polaris.Tabs.toggleTabsLabel"),
      disabled
    }, disclosureButtonContent);
    const activator = disclosureButton;
    const disclosureTabs = hiddenTabs.map((tabIndex) => tabs[tabIndex]);
    const viewNames = tabs.map(({
      content
    }) => content);
    const tabMeasurer = /* @__PURE__ */ import_react168.default.createElement(TabMeasurer, {
      tabToFocus,
      activator,
      selected,
      tabs,
      siblingTabHasFocus: tabToFocus > -1,
      handleMeasurement
    });
    const newTab = /* @__PURE__ */ import_react168.default.createElement(Tab, {
      id: CREATE_NEW_VIEW_ID,
      content: createViewA11yLabel,
      actions: [],
      onAction: handleClickNewTab,
      onFocus: () => {
        if (modalSubmitted) {
          setState({
            tabToFocus: selected,
            modalSubmitted: false
          });
        }
      },
      icon: /* @__PURE__ */ import_react168.default.createElement(Icon, {
        source: SvgPlusIcon,
        accessibilityLabel: createViewA11yLabel
      }),
      disabled,
      onTogglePopover: handleTogglePopover,
      onToggleModal: handleToggleModal,
      tabIndexOverride: 0
    });
    const panelMarkup = children ? tabs.map((_tab, index) => {
      return selected === index ? /* @__PURE__ */ import_react168.default.createElement(Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id
      }, children) : /* @__PURE__ */ import_react168.default.createElement(Panel, {
        id: tabs[index].panelID || `${tabs[index].id}-panel`,
        tabID: tabs[index].id,
        key: tabs[index].id,
        hidden: true
      });
    }) : null;
    return /* @__PURE__ */ import_react168.default.createElement("div", {
      className: styles47.Outer
    }, /* @__PURE__ */ import_react168.default.createElement(Box, {
      padding: {
        md: "200"
      }
    }, tabMeasurer, /* @__PURE__ */ import_react168.default.createElement("div", {
      className: wrapperClassNames,
      ref: scrollRef
    }, /* @__PURE__ */ import_react168.default.createElement("div", {
      className: styles47.ButtonWrapper,
      ref: wrapRef
    }, /* @__PURE__ */ import_react168.default.createElement("ul", {
      role: tabsMarkup.length > 0 ? "tablist" : void 0,
      className: classname,
      onFocus: handleFocus,
      onBlur: handleBlur,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyPress,
      "data-tabs-focus-catchment": true
    }, tabsMarkup, mdDown || tabsToShow.length === 0 ? null : /* @__PURE__ */ import_react168.default.createElement("li", {
      className: disclosureTabClassName,
      role: "presentation"
    }, /* @__PURE__ */ import_react168.default.createElement(Popover2, {
      preferredPosition: "below",
      preferredAlignment: "left",
      activator,
      active: disclosureActivatorVisible && showDisclosure,
      onClose: handleClose,
      autofocusTarget: "first-node",
      zIndexOverride: disclosureZIndexOverride
    }, /* @__PURE__ */ import_react168.default.createElement(List, {
      focusIndex: hiddenTabs.indexOf(tabToFocus),
      disclosureTabs,
      onClick: handleListTabClick,
      onKeyPress: handleKeyPress
    })))), canCreateNewView && tabsToShow.length > 0 ? /* @__PURE__ */ import_react168.default.createElement("div", {
      className: styles47.NewTab
    }, /* @__PURE__ */ import_react168.default.createElement(CreateViewModal, {
      open: isNewViewModalActive,
      onClose: handleCloseNewViewModal,
      onClickPrimaryAction: handleSaveNewViewModal,
      viewNames,
      activator: disabled ? newTab : /* @__PURE__ */ import_react168.default.createElement("div", null, /* @__PURE__ */ import_react168.default.createElement(Tooltip, {
        content: i18n.translate("Polaris.Tabs.newViewTooltip"),
        preferredPosition: "above",
        hoverDelay: 400,
        zIndexOverride: disclosureZIndexOverride
      }, newTab))
    })) : null))), panelMarkup);
  };

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/SearchFilterButton/SearchFilterButton.js
  var import_react169 = __toESM(require_react());
  function SearchFilterButton({
    onClick,
    label,
    disabled,
    tooltipContent,
    disclosureZIndexOverride,
    style,
    hideFilters,
    hideQueryField
  }) {
    const iconMarkup = /* @__PURE__ */ import_react169.default.createElement(InlineStack, {
      gap: "0"
    }, hideQueryField ? null : /* @__PURE__ */ import_react169.default.createElement(Icon, {
      source: SvgSearchIcon,
      tone: "base"
    }), hideFilters ? null : /* @__PURE__ */ import_react169.default.createElement(Icon, {
      source: SvgFilterIcon,
      tone: "base"
    }));
    const activator = /* @__PURE__ */ import_react169.default.createElement("div", {
      style
    }, /* @__PURE__ */ import_react169.default.createElement(Button, {
      size: "slim",
      onClick,
      disabled,
      icon: iconMarkup,
      accessibilityLabel: label
    }));
    const content = /* @__PURE__ */ import_react169.default.createElement(Text, {
      as: "span",
      variant: "bodyMd",
      alignment: "center"
    }, tooltipContent);
    return /* @__PURE__ */ import_react169.default.createElement(Tooltip, {
      content,
      preferredPosition: "above",
      hoverDelay: 400,
      zIndexOverride: disclosureZIndexOverride
    }, activator);
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/components/EditColumnsButton/EditColumnsButton.js
  var import_react170 = __toESM(require_react());
  function EditColumnsButton({
    onClick,
    disabled
  }) {
    const i18n = useI18n();
    const tooltipContent = /* @__PURE__ */ import_react170.default.createElement(Text, {
      as: "span",
      variant: "bodyMd",
      alignment: "center"
    }, i18n.translate("Polaris.IndexFilters.EditColumnsButton.tooltip"));
    return /* @__PURE__ */ import_react170.default.createElement(Tooltip, {
      content: tooltipContent,
      preferredPosition: "above",
      hoverDelay: 400
    }, /* @__PURE__ */ import_react170.default.createElement(Button, {
      size: "slim",
      onClick,
      disabled,
      icon: SvgLayoutColumns3Icon,
      accessibilityLabel: i18n.translate("Polaris.IndexFilters.EditColumnsButton.accessibilityLabel")
    }));
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/IndexFilters.js
  var DEFAULT_IGNORED_TAGS = ["INPUT", "SELECT", "TEXTAREA"];
  var TRANSITION_DURATION2 = 150;
  var defaultStyle2 = {
    transition: `opacity ${TRANSITION_DURATION2}ms var(--p-motion-ease)`,
    opacity: 0
  };
  var transitionStyles2 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    },
    exiting: {
      opacity: 0
    },
    exited: {
      opacity: 0
    },
    unmounted: {
      opacity: 0
    }
  };
  function IndexFilters({
    tabs,
    selected,
    onSelect,
    onSort,
    onSortKeyChange,
    onSortDirectionChange,
    onAddFilterClick,
    sortOptions,
    sortSelected,
    queryValue = "",
    queryPlaceholder,
    primaryAction,
    cancelAction,
    filters,
    appliedFilters,
    onClearAll,
    onQueryChange,
    onQueryFocus,
    onQueryClear,
    onEditStart,
    disabled,
    disableQueryField,
    hideFilters,
    loading,
    mode,
    setMode,
    disclosureZIndexOverride,
    disableStickyMode,
    isFlushWhenSticky = false,
    canCreateNewView = true,
    onCreateNewView,
    filteringAccessibilityLabel,
    filteringAccessibilityTooltip,
    hideQueryField,
    closeOnChildOverlayClick,
    disableKeyboardShortcuts,
    showEditColumnsButton,
    autoFocusSearchField = true
  }) {
    const i18n = useI18n();
    const {
      mdDown
    } = useBreakpoints();
    const defaultRef = (0, import_react171.useRef)(null);
    const filteringRef = (0, import_react171.useRef)(null);
    const {
      value: filtersFocused,
      setFalse: setFiltersUnFocused,
      setTrue: setFiltersFocused
    } = useToggle(mode === IndexFiltersMode.Filtering && autoFocusSearchField);
    const handleModeChange = (newMode) => {
      if (newMode === IndexFiltersMode.Filtering && autoFocusSearchField) {
        setFiltersFocused();
      } else {
        setFiltersUnFocused();
      }
    };
    useOnValueChange(mode, handleModeChange);
    useEventListener("keydown", (event) => {
      const hasNoFiltersOrSearch = hideQueryField && hideFilters;
      if (disableKeyboardShortcuts || hasNoFiltersOrSearch)
        return;
      const {
        key
      } = event;
      const tag = document?.activeElement?.tagName;
      if (mode !== IndexFiltersMode.Default && event.key === "Escape") {
        onPressEscape();
      }
      if (key === "f" && mode === IndexFiltersMode.Default) {
        if (tag && DEFAULT_IGNORED_TAGS.includes(tag)) {
          return;
        }
        onPressF();
        event.preventDefault();
      }
    });
    const {
      intersectionRef,
      measurerRef,
      indexFilteringHeight,
      isSticky
    } = useIsSticky(mode, Boolean(disableStickyMode), isFlushWhenSticky);
    const viewNames = tabs.map(({
      content
    }) => content);
    const handleChangeSortButton = (0, import_react171.useCallback)((value) => {
      onSort?.(value);
    }, [onSort]);
    const handleChangeSearch = (0, import_react171.useCallback)((value) => {
      onQueryChange(value);
    }, [onQueryChange]);
    const useExecutedCallback = (action, afterEffect) => (0, import_react171.useCallback)(async (name) => {
      const hasExecuted = await action?.(name);
      if (hasExecuted) {
        setMode(IndexFiltersMode.Default);
        afterEffect?.();
      }
    }, [action, afterEffect]);
    const onExecutedPrimaryAction = useExecutedCallback(primaryAction?.onAction);
    const onExecutedCancelAction = (0, import_react171.useCallback)(() => {
      cancelAction?.onAction?.();
      setMode(IndexFiltersMode.Default);
    }, [cancelAction, setMode]);
    const enhancedPrimaryAction = (0, import_react171.useMemo)(() => {
      return primaryAction ? {
        ...primaryAction,
        onAction: onExecutedPrimaryAction
      } : void 0;
    }, [onExecutedPrimaryAction, primaryAction]);
    const enhancedCancelAction = (0, import_react171.useMemo)(() => {
      return cancelAction ? {
        ...cancelAction,
        onAction: onExecutedCancelAction
      } : void 0;
    }, [cancelAction, onExecutedCancelAction]);
    const beginEdit = (0, import_react171.useCallback)((mode2) => {
      setMode(mode2);
      onEditStart?.(mode2);
    }, [onEditStart, setMode]);
    const updateButtonsMarkup = (0, import_react171.useMemo)(() => enhancedCancelAction || enhancedPrimaryAction ? /* @__PURE__ */ import_react171.default.createElement(UpdateButtons, {
      primaryAction: enhancedPrimaryAction,
      cancelAction: enhancedCancelAction,
      viewNames,
      disabled
    }) : null, [enhancedPrimaryAction, enhancedCancelAction, disabled, viewNames]);
    const sortMarkup = (0, import_react171.useMemo)(() => {
      if (!sortOptions?.length) {
        return null;
      }
      return /* @__PURE__ */ import_react171.default.createElement(SortButton, {
        choices: sortOptions,
        selected: sortSelected,
        onChange: handleChangeSortButton,
        onChangeKey: onSortKeyChange,
        onChangeDirection: onSortDirectionChange,
        disabled,
        disclosureZIndexOverride
      });
    }, [handleChangeSortButton, onSortDirectionChange, onSortKeyChange, sortOptions, sortSelected, disabled, disclosureZIndexOverride]);
    function handleClickEditColumnsButton() {
      beginEdit(IndexFiltersMode.EditingColumns);
    }
    const editColumnsMarkup = showEditColumnsButton ? /* @__PURE__ */ import_react171.default.createElement(EditColumnsButton, {
      onClick: handleClickEditColumnsButton,
      disabled
    }) : null;
    const isActionLoading = primaryAction?.loading || cancelAction?.loading;
    function handleClickFilterButton() {
      beginEdit(IndexFiltersMode.Filtering);
    }
    const searchFilterTooltipLabelId = disableKeyboardShortcuts ? "Polaris.IndexFilters.searchFilterTooltip" : "Polaris.IndexFilters.searchFilterTooltipWithShortcut";
    const searchFilterTooltip = filteringAccessibilityTooltip || i18n.translate(searchFilterTooltipLabelId);
    const searchFilterAriaLabel = filteringAccessibilityLabel || i18n.translate("Polaris.IndexFilters.searchFilterAccessibilityLabel");
    const isLoading = loading || isActionLoading;
    function onPressEscape() {
      cancelAction?.onAction();
      setMode(IndexFiltersMode.Default);
    }
    function handleClearSearch() {
      onQueryClear?.();
    }
    function handleQueryBlur() {
      setFiltersUnFocused();
    }
    function handleQueryFocus() {
      setFiltersFocused();
      onQueryFocus?.();
    }
    function onPressF() {
      if (mode !== IndexFiltersMode.Default) {
        return;
      }
      beginEdit(IndexFiltersMode.Filtering);
    }
    return /* @__PURE__ */ import_react171.default.createElement("div", {
      className: styles44.IndexFiltersWrapper,
      style: {
        height: indexFilteringHeight
      }
    }, /* @__PURE__ */ import_react171.default.createElement("div", {
      ref: intersectionRef
    }), /* @__PURE__ */ import_react171.default.createElement("div", {
      className: classNames(styles44.IndexFilters, isSticky && styles44.IndexFiltersSticky, isSticky && isFlushWhenSticky && styles44.IndexFiltersStickyFlush),
      ref: measurerRef
    }, /* @__PURE__ */ import_react171.default.createElement(Transition_default, {
      nodeRef: defaultRef,
      in: mode !== IndexFiltersMode.Filtering,
      timeout: TRANSITION_DURATION2
    }, (state) => /* @__PURE__ */ import_react171.default.createElement("div", {
      ref: defaultRef
    }, mode !== IndexFiltersMode.Filtering ? /* @__PURE__ */ import_react171.default.createElement(Container, null, /* @__PURE__ */ import_react171.default.createElement(InlineStack, {
      align: "start",
      blockAlign: "center",
      gap: {
        xs: "0",
        md: "200"
      },
      wrap: false
    }, /* @__PURE__ */ import_react171.default.createElement("div", {
      className: classNames(styles44.TabsWrapper, mdDown && styles44.SmallScreenTabsWrapper, isLoading && styles44.TabsWrapperLoading)
    }, /* @__PURE__ */ import_react171.default.createElement("div", {
      className: styles44.TabsInner,
      style: {
        ...defaultStyle2,
        ...transitionStyles2[state]
      }
    }, /* @__PURE__ */ import_react171.default.createElement(Tabs, {
      tabs,
      selected,
      onSelect,
      disabled: Boolean(mode !== IndexFiltersMode.Default || disabled),
      disclosureZIndexOverride,
      canCreateNewView,
      onCreateNewView
    })), isLoading && mdDown && /* @__PURE__ */ import_react171.default.createElement("div", {
      className: styles44.TabsLoading
    }, /* @__PURE__ */ import_react171.default.createElement(Spinner, {
      size: "small"
    }))), /* @__PURE__ */ import_react171.default.createElement("div", {
      className: styles44.ActionWrap
    }, isLoading && !mdDown && /* @__PURE__ */ import_react171.default.createElement("div", {
      className: styles44.DesktopLoading
    }, isLoading ? /* @__PURE__ */ import_react171.default.createElement(Spinner, {
      size: "small"
    }) : null), mode === IndexFiltersMode.Default ? /* @__PURE__ */ import_react171.default.createElement(import_react171.default.Fragment, null, hideFilters && hideQueryField ? null : /* @__PURE__ */ import_react171.default.createElement(SearchFilterButton, {
      onClick: handleClickFilterButton,
      label: searchFilterAriaLabel,
      tooltipContent: searchFilterTooltip,
      disabled,
      hideFilters,
      hideQueryField,
      style: {
        ...defaultStyle2,
        ...transitionStyles2[state]
      },
      disclosureZIndexOverride
    }), editColumnsMarkup, sortMarkup) : null, mode === IndexFiltersMode.EditingColumns ? updateButtonsMarkup : null))) : null)), /* @__PURE__ */ import_react171.default.createElement(Transition_default, {
      nodeRef: filteringRef,
      in: mode === IndexFiltersMode.Filtering,
      timeout: TRANSITION_DURATION2
    }, (state) => /* @__PURE__ */ import_react171.default.createElement("div", {
      ref: filteringRef
    }, mode === IndexFiltersMode.Filtering ? /* @__PURE__ */ import_react171.default.createElement(Filters, {
      queryValue,
      queryPlaceholder,
      onQueryChange: handleChangeSearch,
      onQueryClear: handleClearSearch,
      onQueryFocus: handleQueryFocus,
      onQueryBlur: handleQueryBlur,
      onAddFilterClick,
      filters,
      appliedFilters,
      onClearAll,
      disableFilters: disabled,
      hideFilters,
      hideQueryField,
      disableQueryField: disabled || disableQueryField,
      loading: loading || isActionLoading,
      focused: filtersFocused,
      mountedState: mdDown ? void 0 : state,
      borderlessQueryField: true,
      closeOnChildOverlayClick
    }, /* @__PURE__ */ import_react171.default.createElement("div", {
      className: styles44.ButtonWrap
    }, /* @__PURE__ */ import_react171.default.createElement(InlineStack, {
      gap: "200",
      align: "start",
      blockAlign: "center"
    }, /* @__PURE__ */ import_react171.default.createElement("div", {
      style: {
        ...defaultStyle2,
        ...transitionStyles2[state]
      }
    }, updateButtonsMarkup), sortMarkup))) : null))));
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexFilters/hooks/useSetIndexFiltersMode/useSetIndexFiltersMode.js
  var import_react172 = __toESM(require_react());
  function useSetIndexFiltersMode(defaultMode = IndexFiltersMode.Default) {
    const [mode, setMode] = (0, import_react172.useState)(defaultMode);
    return {
      mode,
      setMode
    };
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/IndexTable.js
  var import_react181 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/IndexTable.css.js
  var styles48 = {
    "IndexTable": "Polaris-IndexTable",
    "IndexTableWrapper": "Polaris-IndexTable__IndexTableWrapper",
    "IndexTableWrapper-scrollBarHidden": "Polaris-IndexTable__IndexTableWrapper--scrollBarHidden",
    "IndexTableWrapperWithSelectAllActions": "Polaris-IndexTable__IndexTableWrapperWithSelectAllActions",
    "LoadingPanel": "Polaris-IndexTable__LoadingPanel",
    "LoadingPanelEntered": "Polaris-IndexTable__LoadingPanelEntered",
    "LoadingPanelRow": "Polaris-IndexTable__LoadingPanelRow",
    "LoadingPanelText": "Polaris-IndexTable__LoadingPanelText",
    "Table": "Polaris-IndexTable__Table",
    "Table-scrolling": "Polaris-IndexTable__Table--scrolling",
    "TableCell-first": "Polaris-IndexTable__TableCell--first",
    "StickyTable-scrolling": "Polaris-IndexTable__StickyTable--scrolling",
    "TableCell": "Polaris-IndexTable__TableCell",
    "TableHeading-first": "Polaris-IndexTable__TableHeading--first",
    "TableHeading-second": "Polaris-IndexTable__TableHeading--second",
    "Table-sticky": "Polaris-IndexTable__Table--sticky",
    "StickyTable": "Polaris-IndexTable__StickyTable",
    "Table-unselectable": "Polaris-IndexTable__Table--unselectable",
    "TableRow": "Polaris-IndexTable__TableRow",
    "TableRow-unclickable": "Polaris-IndexTable__TableRow--unclickable",
    "toneSuccess": "Polaris-IndexTable--toneSuccess",
    "TableRow-child": "Polaris-IndexTable__TableRow--child",
    "toneWarning": "Polaris-IndexTable--toneWarning",
    "toneCritical": "Polaris-IndexTable--toneCritical",
    "toneSubdued": "Polaris-IndexTable--toneSubdued",
    "TableRow-subheader": "Polaris-IndexTable__TableRow--subheader",
    "TableRow-selected": "Polaris-IndexTable__TableRow--selected",
    "TableRow-hovered": "Polaris-IndexTable__TableRow--hovered",
    "TableRow-disabled": "Polaris-IndexTable__TableRow--disabled",
    "ZebraStriping": "Polaris-IndexTable__ZebraStriping",
    "TableHeading": "Polaris-IndexTable__TableHeading",
    "TableHeading-flush": "Polaris-IndexTable__TableHeading--flush",
    "TableHeading-align-center": "Polaris-IndexTable--tableHeadingAlignCenter",
    "TableHeading-align-end": "Polaris-IndexTable--tableHeadingAlignEnd",
    "TableHeading-extra-padding-right": "Polaris-IndexTable--tableHeadingExtraPaddingRight",
    "TableHeading-sortable": "Polaris-IndexTable__TableHeading--sortable",
    "TableHeadingSortButton": "Polaris-IndexTable__TableHeadingSortButton",
    "TableHeadingSortIcon": "Polaris-IndexTable__TableHeadingSortIcon",
    "TableHeadingSortButton-heading-align-end": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEnd",
    "TableHeadingSortButton-heading-align-end-currently-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndCurrentlySorted",
    "TableHeadingSortIcon-heading-align-end": "Polaris-IndexTable--tableHeadingSortIconHeadingAlignEnd",
    "TableHeadingSortButton-heading-align-end-previously-sorted": "Polaris-IndexTable--tableHeadingSortButtonHeadingAlignEndPreviouslySorted",
    "right-aligned-sort-button-slide-out": "Polaris-IndexTable--rightAlignedSortButtonSlideOut",
    "reveal-right-aligned-sort-button-icon": "Polaris-IndexTable--revealRightAlignedSortButtonIcon",
    "TableHeadingUnderline": "Polaris-IndexTable__TableHeadingUnderline",
    "TableHeadingTooltipUnderlinePlaceholder": "Polaris-IndexTable__TableHeadingTooltipUnderlinePlaceholder",
    "TableHeadingSortIcon-visible": "Polaris-IndexTable__TableHeadingSortIcon--visible",
    "TableHeadingSortSvg": "Polaris-IndexTable__TableHeadingSortSvg",
    "SortableTableHeadingWithCustomMarkup": "Polaris-IndexTable__SortableTableHeadingWithCustomMarkup",
    "SortableTableHeaderWrapper": "Polaris-IndexTable__SortableTableHeaderWrapper",
    "ColumnHeaderCheckboxWrapper": "Polaris-IndexTable__ColumnHeaderCheckboxWrapper",
    "FirstStickyHeaderElement": "Polaris-IndexTable__FirstStickyHeaderElement",
    "TableHeading-unselectable": "Polaris-IndexTable__TableHeading--unselectable",
    "TableCell-flush": "Polaris-IndexTable__TableCell--flush",
    "Table-sticky-scrolling": "Polaris-IndexTable--tableStickyScrolling",
    "StickyTableHeader-sticky-scrolling": "Polaris-IndexTable--stickyTableHeaderStickyScrolling",
    "TableHeading-last": "Polaris-IndexTable__TableHeading--last",
    "Table-sticky-last": "Polaris-IndexTable--tableStickyLast",
    "StickyTableHeader-sticky-last": "Polaris-IndexTable--stickyTableHeaderStickyLast",
    "Table-sortable": "Polaris-IndexTable__Table--sortable",
    "StickyTableHeader": "Polaris-IndexTable__StickyTableHeader",
    "StickyTableHeader-isSticky": "Polaris-IndexTable__StickyTableHeader--isSticky",
    "StickyTableHeadings": "Polaris-IndexTable__StickyTableHeadings",
    "StickyTableHeading-second": "Polaris-IndexTable__StickyTableHeading--second",
    "unselectable": "Polaris-IndexTable--unselectable",
    "StickyTableHeading-second-scrolling": "Polaris-IndexTable--stickyTableHeadingSecondScrolling",
    "ScrollLeft": "Polaris-IndexTable__ScrollLeft",
    "ScrollRight": "Polaris-IndexTable__ScrollRight",
    "ScrollRight-onboarding": "Polaris-IndexTable__ScrollRight--onboarding",
    "SelectAllActionsWrapper": "Polaris-IndexTable__SelectAllActionsWrapper",
    "SelectAllActionsWrapperWithPagination": "Polaris-IndexTable__SelectAllActionsWrapperWithPagination",
    "SelectAllActionsWrapperSticky": "Polaris-IndexTable__SelectAllActionsWrapperSticky",
    "SelectAllActionsWrapperAtEnd": "Polaris-IndexTable__SelectAllActionsWrapperAtEnd",
    "SelectAllActionsWrapperAtEndAppear": "Polaris-IndexTable__SelectAllActionsWrapperAtEndAppear",
    "BulkActionsWrapper": "Polaris-IndexTable__BulkActionsWrapper",
    "BulkActionsWrapperVisible": "Polaris-IndexTable__BulkActionsWrapperVisible",
    "PaginationWrapper": "Polaris-IndexTable__PaginationWrapper",
    "PaginationWrapperScrolledPastTop": "Polaris-IndexTable__PaginationWrapperScrolledPastTop",
    "ScrollBarContainer": "Polaris-IndexTable__ScrollBarContainer",
    "ScrollBarContainerWithPagination": "Polaris-IndexTable__ScrollBarContainerWithPagination",
    "ScrollBarContainerScrolledPastTop": "Polaris-IndexTable__ScrollBarContainerScrolledPastTop",
    "ScrollBarContainerWithSelectAllActions": "Polaris-IndexTable__ScrollBarContainerWithSelectAllActions",
    "ScrollBarContainerSelectAllActionsSticky": "Polaris-IndexTable__ScrollBarContainerSelectAllActionsSticky",
    "scrollBarContainerCondensed": "Polaris-IndexTable--scrollBarContainerCondensed",
    "scrollBarContainerHidden": "Polaris-IndexTable--scrollBarContainerHidden",
    "ScrollBar": "Polaris-IndexTable__ScrollBar",
    "disableTextSelection": "Polaris-IndexTable--disableTextSelection",
    "EmptySearchResultWrapper": "Polaris-IndexTable__EmptySearchResultWrapper",
    "condensedRow": "Polaris-IndexTable--condensedRow",
    "CondensedList": "Polaris-IndexTable__CondensedList",
    "HeaderWrapper": "Polaris-IndexTable__HeaderWrapper",
    "StickyTable-condensed": "Polaris-IndexTable__StickyTable--condensed",
    "StickyTableHeader-condensed": "Polaris-IndexTable__StickyTableHeader--condensed",
    "ScrollBarContent": "Polaris-IndexTable__ScrollBarContent"
  };

  // node_modules/@shopify/polaris/build/esm/components/IndexProvider/IndexProvider.js
  var import_react175 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/index-provider/hooks.js
  var import_react174 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/index-provider/types.js
  var SELECT_ALL_ITEMS = "All";
  var SelectionType2 = /* @__PURE__ */ function(SelectionType3) {
    SelectionType3["All"] = "all";
    SelectionType3["Page"] = "page";
    SelectionType3["Multi"] = "multi";
    SelectionType3["Single"] = "single";
    SelectionType3["Range"] = "range";
    return SelectionType3;
  }({});

  // node_modules/@shopify/polaris/build/esm/utilities/index-provider/context.js
  var import_react173 = __toESM(require_react());
  var IndexContext = /* @__PURE__ */ (0, import_react173.createContext)(void 0);
  var IndexSelectionChangeContext = /* @__PURE__ */ (0, import_react173.createContext)(void 0);
  var IndexRowContext = /* @__PURE__ */ (0, import_react173.createContext)(void 0);

  // node_modules/@shopify/polaris/build/esm/utilities/index-provider/hooks.js
  function useIndexSelectionChange() {
    const onSelectionChange = (0, import_react174.useContext)(IndexSelectionChangeContext);
    if (!onSelectionChange) {
      throw new Error(`Missing IndexProvider context`);
    }
    return onSelectionChange;
  }
  function useIndexRow() {
    const indexRow = (0, import_react174.useContext)(IndexRowContext);
    if (!indexRow) {
      throw new Error(`Missing IndexProvider context`);
    }
    return indexRow;
  }
  function useIndexValue() {
    const index = (0, import_react174.useContext)(IndexContext);
    if (!index) {
      throw new Error(`Missing IndexProvider context`);
    }
    return index;
  }
  function useBulkSelectionData({
    selectedItemsCount,
    itemCount,
    hasMoreItems,
    resourceName: passedResourceName,
    defaultPaginatedSelectAllText
  }) {
    const i18n = useI18n();
    const selectable = Boolean(selectedItemsCount);
    const selectMode = selectedItemsCount === "All" || selectedItemsCount > 0;
    const defaultResourceName = {
      singular: i18n.translate("Polaris.IndexProvider.defaultItemSingular"),
      plural: i18n.translate("Polaris.IndexProvider.defaultItemPlural")
    };
    const resourceName = passedResourceName ? passedResourceName : defaultResourceName;
    const paginatedSelectAllText = getPaginatedSelectAllText();
    const bulkActionsLabel = getBulkActionsLabel();
    const bulkActionsAccessibilityLabel = getBulkActionsAccessibilityLabel();
    let bulkSelectState = "indeterminate";
    if (!selectedItemsCount || selectedItemsCount === 0) {
      bulkSelectState = void 0;
    } else if (selectedItemsCount === SELECT_ALL_ITEMS || selectedItemsCount === itemCount) {
      bulkSelectState = true;
    }
    return {
      paginatedSelectAllText,
      bulkActionsLabel,
      bulkActionsAccessibilityLabel,
      resourceName,
      selectMode,
      bulkSelectState,
      selectable
    };
    function getPaginatedSelectAllText() {
      if (!selectable || !hasMoreItems) {
        return;
      }
      if (selectedItemsCount === SELECT_ALL_ITEMS) {
        if (defaultPaginatedSelectAllText) {
          return defaultPaginatedSelectAllText;
        }
        return i18n.translate("Polaris.IndexProvider.allItemsSelected", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural.toLocaleLowerCase()
        });
      }
    }
    function getBulkActionsLabel() {
      const selectedItemsCountLabel = selectedItemsCount === SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount;
      return i18n.translate("Polaris.IndexProvider.selected", {
        selectedItemsCount: selectedItemsCountLabel
      });
    }
    function getBulkActionsAccessibilityLabel() {
      const totalItemsCount = itemCount;
      const allSelected = selectedItemsCount === totalItemsCount;
      if (totalItemsCount === 1 && allSelected) {
        return i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllSingle", {
          resourceNameSingular: resourceName.singular
        });
      } else if (totalItemsCount === 1) {
        return i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllSingle", {
          resourceNameSingular: resourceName.singular
        });
      } else if (allSelected) {
        return i18n.translate("Polaris.IndexProvider.a11yCheckboxDeselectAllMultiple", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural
        });
      } else {
        return i18n.translate("Polaris.IndexProvider.a11yCheckboxSelectAllMultiple", {
          itemsLength: itemCount,
          resourceNamePlural: resourceName.plural
        });
      }
    }
  }
  function useHandleBulkSelection({
    onSelectionChange = () => {
    }
  }) {
    const lastSelected = (0, import_react174.useRef)(null);
    const handleSelectionChange = (0, import_react174.useCallback)((selectionType, toggleType, selection, sortOrder) => {
      const prevSelected = lastSelected.current;
      if (SelectionType2.Multi && typeof sortOrder === "number") {
        lastSelected.current = sortOrder;
      }
      if (selectionType === SelectionType2.Single || selectionType === SelectionType2.Multi && (typeof prevSelected !== "number" || typeof sortOrder !== "number")) {
        onSelectionChange(SelectionType2.Single, toggleType, selection);
      } else if (selectionType === SelectionType2.Multi) {
        const min = Math.min(prevSelected, sortOrder);
        const max = Math.max(prevSelected, sortOrder);
        onSelectionChange(selectionType, toggleType, [min, max]);
      } else if (selectionType === SelectionType2.Page || selectionType === SelectionType2.All) {
        onSelectionChange(selectionType, toggleType);
      } else if (selectionType === SelectionType2.Range) {
        onSelectionChange(SelectionType2.Range, toggleType, selection);
      }
    }, [onSelectionChange]);
    return handleSelectionChange;
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexProvider/IndexProvider.js
  function IndexProvider({
    children,
    resourceName: passedResourceName,
    loading,
    onSelectionChange,
    selectedItemsCount = 0,
    itemCount,
    hasMoreItems,
    condensed,
    selectable: isSelectableIndex = true,
    paginatedSelectAllText: defaultPaginatedSelectAllText
  }) {
    const {
      paginatedSelectAllText,
      bulkActionsLabel,
      bulkActionsAccessibilityLabel,
      resourceName,
      selectMode,
      bulkSelectState
    } = useBulkSelectionData({
      selectedItemsCount,
      itemCount,
      hasMoreItems,
      resourceName: passedResourceName,
      defaultPaginatedSelectAllText
    });
    const handleSelectionChange = useHandleBulkSelection({
      onSelectionChange
    });
    const contextValue = (0, import_react175.useMemo)(() => ({
      itemCount,
      selectMode: selectMode && isSelectableIndex,
      selectable: isSelectableIndex,
      resourceName,
      loading,
      paginatedSelectAllText,
      hasMoreItems,
      bulkActionsLabel,
      bulkActionsAccessibilityLabel,
      bulkSelectState,
      selectedItemsCount,
      condensed
    }), [itemCount, selectMode, isSelectableIndex, resourceName, loading, paginatedSelectAllText, hasMoreItems, bulkActionsLabel, bulkActionsAccessibilityLabel, bulkSelectState, selectedItemsCount, condensed]);
    const rowContextValue = (0, import_react175.useMemo)(() => ({
      selectable: isSelectableIndex,
      selectMode: selectMode && isSelectableIndex,
      condensed
    }), [condensed, selectMode, isSelectableIndex]);
    return /* @__PURE__ */ import_react175.default.createElement(IndexContext.Provider, {
      value: contextValue
    }, /* @__PURE__ */ import_react175.default.createElement(IndexRowContext.Provider, {
      value: rowContextValue
    }, /* @__PURE__ */ import_react175.default.createElement(IndexSelectionChangeContext.Provider, {
      value: handleSelectionChange
    }, children)));
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Row/Row.js
  var import_react179 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/utilities/index-table/context.js
  var import_react176 = __toESM(require_react());
  var RowContext = /* @__PURE__ */ (0, import_react176.createContext)({});
  var RowHoveredContext = /* @__PURE__ */ (0, import_react176.createContext)(void 0);
  var scrollDefaultContext = {
    scrollableContainer: null,
    canScrollLeft: false,
    canScrollRight: false
  };
  var ScrollContext = /* @__PURE__ */ (0, import_react176.createContext)(scrollDefaultContext);

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Cell/Cell.js
  var import_react177 = __toESM(require_react());
  var Cell = /* @__PURE__ */ (0, import_react177.memo)(function Cell2({
    children,
    className: customClassName,
    flush,
    colSpan,
    headers,
    scope,
    as = "td",
    id
  }) {
    const className = classNames(customClassName, styles48.TableCell, flush && styles48["TableCell-flush"]);
    return /* @__PURE__ */ import_react177.default.createElement(as, {
      id,
      colSpan,
      headers,
      scope,
      className
    }, children);
  });

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Checkbox/Checkbox.js
  var import_react178 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Checkbox/Checkbox.css.js
  var styles49 = {
    "Wrapper": "Polaris-IndexTable-Checkbox__Wrapper"
  };

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Checkbox/Checkbox.js
  var Checkbox3 = /* @__PURE__ */ (0, import_react178.memo)(function Checkbox4({
    accessibilityLabel
  }) {
    const i18n = useI18n();
    const {
      resourceName
    } = useIndexValue();
    const {
      itemId,
      selected,
      disabled,
      onInteraction
    } = (0, import_react178.useContext)(RowContext);
    const label = accessibilityLabel ? accessibilityLabel : i18n.translate("Polaris.IndexTable.selectItem", {
      resourceName: resourceName.singular
    });
    return /* @__PURE__ */ import_react178.default.createElement(CheckboxWrapper, null, /* @__PURE__ */ import_react178.default.createElement("div", {
      className: styles49.Wrapper,
      onClick: onInteraction,
      onKeyUp: noop11
    }, /* @__PURE__ */ import_react178.default.createElement(Checkbox, {
      id: `Select-${itemId}`,
      label,
      labelHidden: true,
      checked: selected,
      disabled
    })));
  });
  function CheckboxWrapper({
    children
  }) {
    const {
      position
    } = (0, import_react178.useContext)(RowContext);
    const checkboxNode = (0, import_react178.useRef)(null);
    const handleResize = (0, import_react178.useCallback)(debounce(() => {
      if (position !== 0 || !checkboxNode.current)
        return;
      const {
        width
      } = checkboxNode.current.getBoundingClientRect();
      setRootProperty("--pc-checkbox-offset", `${width}px`);
    }), [position]);
    (0, import_react178.useEffect)(() => {
      handleResize();
    }, [handleResize]);
    (0, import_react178.useEffect)(() => {
      if (!checkboxNode.current)
        return;
      window.addEventListener("resize", handleResize);
      return () => {
        window.removeEventListener("resize", handleResize);
      };
    }, [handleResize]);
    const checkboxClassName = classNames(styles48.TableCell, styles48["TableCell-first"]);
    return /* @__PURE__ */ import_react178.default.createElement("td", {
      className: checkboxClassName,
      ref: checkboxNode
    }, children);
  }
  function noop11() {
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/components/Row/Row.js
  var Row = /* @__PURE__ */ (0, import_react179.memo)(function Row2({
    children,
    hideSelectable,
    selected,
    id,
    position,
    tone,
    disabled,
    selectionRange,
    rowType = "data",
    accessibilityLabel,
    onNavigation,
    onClick
  }) {
    const {
      selectable: tableIsSelectable,
      selectMode,
      condensed
    } = useIndexRow();
    const rowIsSelectable = tableIsSelectable && !hideSelectable;
    const onSelectionChange = useIndexSelectionChange();
    const {
      value: hovered,
      setTrue: setHoverIn,
      setFalse: setHoverOut
    } = useToggle(false);
    const handleInteraction = (0, import_react179.useCallback)((event) => {
      event.stopPropagation();
      let selectionType = SelectionType2.Single;
      if (disabled || !rowIsSelectable || "key" in event && event.key !== " " || !onSelectionChange)
        return;
      if (event.nativeEvent.shiftKey) {
        selectionType = SelectionType2.Multi;
      } else if (selectionRange) {
        selectionType = SelectionType2.Range;
      }
      const selection = selectionRange ?? id;
      onSelectionChange(selectionType, !selected, selection, position);
    }, [id, onSelectionChange, selected, selectionRange, position, disabled, rowIsSelectable]);
    const contextValue = (0, import_react179.useMemo)(() => ({
      itemId: id,
      selected,
      position,
      onInteraction: handleInteraction,
      disabled
    }), [id, selected, disabled, position, handleInteraction]);
    const primaryLinkElement = (0, import_react179.useRef)(null);
    const isNavigating = (0, import_react179.useRef)(false);
    const tableRowRef = (0, import_react179.useRef)(null);
    const tableRowCallbackRef = (0, import_react179.useCallback)((node) => {
      tableRowRef.current = node;
      const el = node?.querySelector("[data-primary-link]");
      if (el) {
        primaryLinkElement.current = el;
      }
    }, []);
    const rowClassName = classNames(styles48.TableRow, rowType === "subheader" && styles48["TableRow-subheader"], rowType === "child" && styles48["TableRow-child"], rowIsSelectable && condensed && styles48.condensedRow, selected && styles48["TableRow-selected"], hovered && !condensed && styles48["TableRow-hovered"], disabled && styles48["TableRow-disabled"], tone && styles48[variationName("tone", tone)], !rowIsSelectable && !onClick && !primaryLinkElement.current && styles48["TableRow-unclickable"]);
    let handleRowClick;
    if (!disabled && rowIsSelectable || onClick || primaryLinkElement.current) {
      handleRowClick = (event) => {
        if (rowType === "subheader")
          return;
        if (!tableRowRef.current || isNavigating.current) {
          return;
        }
        event.stopPropagation();
        event.preventDefault();
        if (onClick) {
          onClick();
          return;
        }
        if (primaryLinkElement.current && !selectMode) {
          isNavigating.current = true;
          const {
            ctrlKey,
            metaKey
          } = event.nativeEvent;
          if (onNavigation) {
            onNavigation(id);
          }
          if ((ctrlKey || metaKey) && primaryLinkElement.current instanceof HTMLAnchorElement) {
            isNavigating.current = false;
            window.open(primaryLinkElement.current.href, "_blank");
            return;
          }
          primaryLinkElement.current.dispatchEvent(new MouseEvent(event.type, event.nativeEvent));
        } else {
          isNavigating.current = false;
          handleInteraction(event);
        }
      };
    }
    const RowWrapper = condensed ? "li" : "tr";
    const checkboxMarkup = hideSelectable ? /* @__PURE__ */ import_react179.default.createElement(Cell, null) : /* @__PURE__ */ import_react179.default.createElement(Checkbox3, {
      accessibilityLabel
    });
    return /* @__PURE__ */ import_react179.default.createElement(RowContext.Provider, {
      value: contextValue
    }, /* @__PURE__ */ import_react179.default.createElement(RowHoveredContext.Provider, {
      value: hovered
    }, /* @__PURE__ */ import_react179.default.createElement(RowWrapper, {
      key: id,
      id,
      className: rowClassName,
      onMouseEnter: setHoverIn,
      onMouseLeave: setHoverOut,
      onClick: handleRowClick,
      ref: tableRowCallbackRef
    }, tableIsSelectable ? checkboxMarkup : null, children)));
  });

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/utilities/utilities.js
  function getTableHeadingsBySelector(wrapperElement, selector) {
    return wrapperElement ? Array.from(wrapperElement.querySelectorAll(selector)) : [];
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/components/ScrollContainer/ScrollContainer.js
  var import_react180 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/components/ScrollContainer/ScrollContainer.css.js
  var styles50 = {
    "ScrollContainer": "Polaris-IndexTable-ScrollContainer"
  };

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/components/ScrollContainer/ScrollContainer.js
  function ScrollContainer({
    children,
    scrollableContainerRef,
    onScroll
  }) {
    (0, import_react180.useEffect)(() => {
      if (!scrollableContainerRef.current)
        return;
      scrollableContainerRef.current.dispatchEvent(new Event("scroll"));
    }, [scrollableContainerRef]);
    const [containerScroll, setContainerScroll] = (0, import_react180.useState)(scrollDefaultContext);
    const handleScroll = (0, import_react180.useCallback)(debounce(() => {
      if (!scrollableContainerRef.current) {
        return;
      }
      const availableScrollAmount = scrollableContainerRef.current.scrollWidth - scrollableContainerRef.current.offsetWidth;
      const canScrollLeft = scrollableContainerRef.current.scrollLeft > 0;
      const canScrollRight = scrollableContainerRef.current.scrollLeft < availableScrollAmount;
      onScroll(canScrollLeft, canScrollRight);
      setContainerScroll({
        scrollableContainer: scrollableContainerRef.current,
        canScrollLeft,
        canScrollRight
      });
    }, 40, {
      trailing: true,
      leading: true,
      maxWait: 40
    }), [onScroll, scrollableContainerRef]);
    return /* @__PURE__ */ import_react180.default.createElement(ScrollContext.Provider, {
      value: containerScroll
    }, /* @__PURE__ */ import_react180.default.createElement("div", {
      className: styles50.ScrollContainer,
      ref: scrollableContainerRef,
      onScroll: handleScroll
    }, children));
  }

  // node_modules/@shopify/polaris/build/esm/components/IndexTable/IndexTable.js
  var SCROLL_BAR_PADDING = 16;
  var SCROLL_BAR_DEBOUNCE_PERIOD = 300;
  function IndexTableBase({
    headings,
    bulkActions = [],
    promotedBulkActions = [],
    children,
    emptyState,
    sort,
    paginatedSelectAllActionText,
    lastColumnSticky = false,
    sortable,
    sortDirection,
    defaultSortDirection = "descending",
    sortColumnIndex,
    onSort,
    sortToggleLabels,
    hasZebraStriping,
    pagination,
    ...restProps
  }) {
    const {
      loading,
      bulkSelectState,
      resourceName,
      bulkActionsAccessibilityLabel,
      selectMode,
      selectable = restProps.selectable,
      paginatedSelectAllText,
      itemCount,
      hasMoreItems,
      selectedItemsCount,
      condensed
    } = useIndexValue();
    const handleSelectionChange = useIndexSelectionChange();
    const i18n = useI18n();
    const {
      value: hasMoreLeftColumns,
      toggle: toggleHasMoreLeftColumns
    } = useToggle(false);
    const tablePosition = (0, import_react181.useRef)({
      top: 0,
      left: 0
    });
    const tableHeadingRects = (0, import_react181.useRef)([]);
    const scrollableContainerElement = (0, import_react181.useRef)(null);
    const tableElement = (0, import_react181.useRef)(null);
    const tableBodyElement = (0, import_react181.useRef)(null);
    const condensedListElement = (0, import_react181.useRef)(null);
    const [tableInitialized, setTableInitialized] = (0, import_react181.useState)(false);
    const [stickyWrapper, setStickyWrapper] = (0, import_react181.useState)(null);
    const [hideScrollContainer, setHideScrollContainer] = (0, import_react181.useState)(true);
    const tableHeadings = (0, import_react181.useRef)([]);
    const stickyTableHeadings = (0, import_react181.useRef)([]);
    const stickyHeaderWrapperElement = (0, import_react181.useRef)(null);
    const firstStickyHeaderElement = (0, import_react181.useRef)(null);
    const stickyHeaderElement = (0, import_react181.useRef)(null);
    const scrollBarElement = (0, import_react181.useRef)(null);
    const scrollContainerElement = (0, import_react181.useRef)(null);
    const scrollingWithBar = (0, import_react181.useRef)(false);
    const scrollingContainer = (0, import_react181.useRef)(false);
    const lastSortedColumnIndex = (0, import_react181.useRef)(sortColumnIndex);
    const renderAfterSelectEvent = (0, import_react181.useRef)(false);
    const lastSelectedItemsCount = (0, import_react181.useRef)(0);
    const hasSelected = (0, import_react181.useRef)(false);
    if (selectedItemsCount !== lastSelectedItemsCount.current) {
      renderAfterSelectEvent.current = true;
      lastSelectedItemsCount.current = selectedItemsCount;
    }
    if (!hasSelected.current && selectedItemsCount !== 0) {
      hasSelected.current = true;
    }
    const tableBodyRef = (0, import_react181.useCallback)((node) => {
      if (node !== null && !tableInitialized) {
        setTableInitialized(true);
      }
      tableBodyElement.current = node;
    }, [tableInitialized]);
    const handleSelectAllItemsInStore = (0, import_react181.useCallback)(() => {
      handleSelectionChange(selectedItemsCount === SELECT_ALL_ITEMS ? SelectionType2.Page : SelectionType2.All, true);
    }, [handleSelectionChange, selectedItemsCount]);
    const resizeTableHeadings = (0, import_react181.useMemo)(() => debounce(() => {
      if (!tableElement.current || !scrollableContainerElement.current) {
        return;
      }
      const boundingRect = scrollableContainerElement.current.getBoundingClientRect();
      tablePosition.current = {
        top: boundingRect.top,
        left: boundingRect.left
      };
      tableHeadingRects.current = tableHeadings.current.map((heading) => ({
        offsetWidth: heading.offsetWidth || 0,
        offsetLeft: heading.offsetLeft || 0
      }));
      if (tableHeadings.current.length === 0) {
        return;
      }
      if (selectable && tableHeadings.current.length > 1) {
        tableHeadings.current[1].style.left = `${tableHeadingRects.current[0].offsetWidth}px`;
        if (stickyTableHeadings.current?.length) {
          stickyTableHeadings.current[1].style.left = `${tableHeadingRects.current[0].offsetWidth}px`;
        }
      }
      if (stickyTableHeadings.current?.length) {
        stickyTableHeadings.current.forEach((heading, index) => {
          heading.style.minWidth = `${tableHeadingRects.current[index]?.offsetWidth || 0}px`;
        });
      }
    }), [selectable]);
    const resizeTableScrollBar = (0, import_react181.useCallback)(() => {
      if (scrollBarElement.current && tableElement.current && tableInitialized) {
        scrollBarElement.current.style.setProperty("--pc-index-table-scroll-bar-content-width", `${tableElement.current.offsetWidth - SCROLL_BAR_PADDING}px`);
        setHideScrollContainer(scrollContainerElement.current?.offsetWidth === tableElement.current?.offsetWidth);
      }
    }, [tableInitialized]);
    const debounceResizeTableScrollbar = (0, import_react181.useCallback)(debounce(resizeTableScrollBar, SCROLL_BAR_DEBOUNCE_PERIOD, {
      trailing: true
    }), [resizeTableScrollBar]);
    const [canScrollRight, setCanScrollRight] = (0, import_react181.useState)(true);
    const handleCanScrollRight = (0, import_react181.useCallback)(debounce(() => {
      if (!lastColumnSticky || !tableElement.current || !scrollableContainerElement.current) {
        return;
      }
      const tableRect = tableElement.current.getBoundingClientRect();
      const scrollableRect = scrollableContainerElement.current.getBoundingClientRect();
      setCanScrollRight(tableRect.width > scrollableRect.width);
    }), [lastColumnSticky]);
    (0, import_react181.useEffect)(() => {
      handleCanScrollRight();
    }, [handleCanScrollRight]);
    const [canFitStickyColumn, setCanFitStickyColumn] = (0, import_react181.useState)(true);
    const handleCanFitStickyColumn = (0, import_react181.useCallback)(() => {
      if (!scrollableContainerElement.current || !tableHeadings.current.length) {
        return;
      }
      const scrollableRect = scrollableContainerElement.current.getBoundingClientRect();
      const checkboxColumnWidth = selectable ? tableHeadings.current[0].getBoundingClientRect().width : 0;
      const firstStickyColumnWidth = tableHeadings.current[selectable ? 1 : 0].getBoundingClientRect().width;
      const lastColumnIsNotTheFirst = selectable ? tableHeadings.current.length > 2 : 1;
      const lastStickyColumnWidth = lastColumnSticky && lastColumnIsNotTheFirst ? tableHeadings.current[tableHeadings.current.length - 1].getBoundingClientRect().width : 0;
      const restOfContentMinWidth = 100;
      setCanFitStickyColumn(scrollableRect.width > firstStickyColumnWidth + checkboxColumnWidth + lastStickyColumnWidth + restOfContentMinWidth);
    }, [lastColumnSticky, selectable]);
    (0, import_react181.useEffect)(() => {
      if (tableInitialized) {
        handleCanFitStickyColumn();
      }
    }, [handleCanFitStickyColumn, tableInitialized]);
    const handleResize = (0, import_react181.useCallback)(() => {
      scrollBarElement.current?.style.setProperty("--pc-index-table-scroll-bar-content-width", `0px`);
      resizeTableHeadings();
      debounceResizeTableScrollbar();
      handleCanScrollRight();
      handleCanFitStickyColumn();
    }, [resizeTableHeadings, debounceResizeTableScrollbar, handleCanScrollRight, handleCanFitStickyColumn]);
    const handleScrollContainerScroll = (0, import_react181.useCallback)((canScrollLeft, canScrollRight2) => {
      if (!scrollableContainerElement.current || !scrollBarElement.current) {
        return;
      }
      if (!scrollingWithBar.current) {
        scrollingContainer.current = true;
        scrollBarElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft;
      }
      scrollingWithBar.current = false;
      if (stickyHeaderElement.current) {
        stickyHeaderElement.current.scrollLeft = scrollableContainerElement.current.scrollLeft;
      }
      if (canScrollLeft && !hasMoreLeftColumns || !canScrollLeft && hasMoreLeftColumns) {
        toggleHasMoreLeftColumns();
      }
      setCanScrollRight(canScrollRight2);
    }, [hasMoreLeftColumns, toggleHasMoreLeftColumns]);
    const handleScrollBarScroll = (0, import_react181.useCallback)(() => {
      if (!scrollableContainerElement.current || !scrollBarElement.current) {
        return;
      }
      if (!scrollingContainer.current) {
        scrollingWithBar.current = true;
        scrollableContainerElement.current.scrollLeft = scrollBarElement.current.scrollLeft;
      }
      scrollingContainer.current = false;
    }, []);
    useIsomorphicLayoutEffect2(() => {
      tableHeadings.current = getTableHeadingsBySelector(tableElement.current, "[data-index-table-heading]");
      stickyTableHeadings.current = getTableHeadingsBySelector(stickyHeaderWrapperElement.current, "[data-index-table-sticky-heading]");
      resizeTableHeadings();
    }, [headings, resizeTableHeadings, firstStickyHeaderElement, tableInitialized]);
    (0, import_react181.useEffect)(() => {
      resizeTableScrollBar();
      setStickyWrapper(condensed ? condensedListElement.current : tableElement.current);
    }, [tableInitialized, resizeTableScrollBar, condensed]);
    const headingsMarkup = headings.map((heading, index) => renderHeading(heading, index, "th", {
      "data-index-table-heading": true
    }, heading.id));
    const stickyHeadingsMarkup = headings.map((heading, index) => (
      // NOTE: No id since it would be a duplicate of the non-sticky header's id
      renderHeading(heading, index, "div", {
        "data-index-table-sticky-heading": true
      })
    ));
    const [selectedItemsCountValue, setSelectedItemsCountValue] = (0, import_react181.useState)(selectedItemsCount === SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount);
    (0, import_react181.useEffect)(() => {
      if (selectedItemsCount === SELECT_ALL_ITEMS || selectedItemsCount > 0) {
        setSelectedItemsCountValue(selectedItemsCount === SELECT_ALL_ITEMS ? `${itemCount}+` : selectedItemsCount);
      }
    }, [selectedItemsCount, itemCount]);
    const selectAllActionsLabel = i18n.translate("Polaris.IndexTable.selected", {
      selectedItemsCount: selectedItemsCountValue
    });
    const handleTogglePage = (0, import_react181.useCallback)(() => {
      handleSelectionChange(SelectionType2.Page, Boolean(!bulkSelectState || bulkSelectState === "indeterminate"));
    }, [bulkSelectState, handleSelectionChange]);
    const paginatedSelectAllAction = getPaginatedSelectAllAction();
    const loadingMarkup = /* @__PURE__ */ import_react181.default.createElement("div", {
      className: classNames(styles48.LoadingPanel, loading && styles48.LoadingPanelEntered)
    }, /* @__PURE__ */ import_react181.default.createElement("div", {
      className: styles48.LoadingPanelRow
    }, /* @__PURE__ */ import_react181.default.createElement(Spinner, {
      size: "small"
    }), /* @__PURE__ */ import_react181.default.createElement("span", {
      className: styles48.LoadingPanelText
    }, i18n.translate("Polaris.IndexTable.resourceLoadingAccessibilityLabel", {
      resourceNamePlural: resourceName.plural.toLocaleLowerCase()
    }))));
    const stickyTableClassNames = classNames(styles48.StickyTable, hasMoreLeftColumns && styles48["StickyTable-scrolling"], condensed && styles48["StickyTable-condensed"]);
    const shouldShowActions = !condensed || selectedItemsCount;
    const promotedActions = shouldShowActions ? promotedBulkActions : [];
    const actions = shouldShowActions ? bulkActions : [];
    const stickyHeaderMarkup = /* @__PURE__ */ import_react181.default.createElement("div", {
      className: stickyTableClassNames,
      role: "presentation"
    }, /* @__PURE__ */ import_react181.default.createElement(Sticky, {
      boundingElement: stickyWrapper
    }, (isSticky) => {
      const stickyHeaderClassNames = classNames(
        styles48.StickyTableHeader,
        isSticky && styles48["StickyTableHeader-isSticky"],
        // Has a sticky left column enabled
        canFitStickyColumn && styles48["StickyTableHeader-sticky"],
        // ie; is scrolled to the right
        hasMoreLeftColumns && styles48["StickyTableHeader-scrolling"],
        // Has a sticky right column enabled
        canFitStickyColumn && lastColumnSticky && styles48["StickyTableHeader-sticky-last"],
        // ie; is scrolled to the left
        canFitStickyColumn && lastColumnSticky && canScrollRight && styles48["StickyTableHeader-sticky-scrolling"]
      );
      const bulkActionsClassName = classNames(styles48.BulkActionsWrapper, selectMode && styles48.BulkActionsWrapperVisible, condensed && styles48["StickyTableHeader-condensed"], isSticky && styles48["StickyTableHeader-isSticky"]);
      const bulkActionsMarkup = shouldShowActions && !condensed ? /* @__PURE__ */ import_react181.default.createElement("div", {
        className: bulkActionsClassName
      }, /* @__PURE__ */ import_react181.default.createElement(BulkActions, {
        selectMode,
        onToggleAll: handleTogglePage,
        paginatedSelectAllText,
        paginatedSelectAllAction,
        accessibilityLabel: bulkActionsAccessibilityLabel,
        selected: bulkSelectState,
        promotedActions,
        actions,
        onSelectModeToggle: condensed ? handleSelectModeToggle : void 0,
        label: selectAllActionsLabel,
        buttonSize: "micro"
      })) : null;
      const headerMarkup = condensed ? /* @__PURE__ */ import_react181.default.createElement("div", {
        className: classNames(styles48.HeaderWrapper, (!selectable || condensed) && styles48.unselectable)
      }, loadingMarkup, sort) : /* @__PURE__ */ import_react181.default.createElement("div", {
        className: stickyHeaderClassNames,
        ref: stickyHeaderWrapperElement
      }, loadingMarkup, /* @__PURE__ */ import_react181.default.createElement("div", {
        className: styles48.StickyTableHeadings,
        ref: stickyHeaderElement
      }, stickyHeadingsMarkup));
      return /* @__PURE__ */ import_react181.default.createElement(import_react181.default.Fragment, null, headerMarkup, bulkActionsMarkup);
    }));
    const scrollBarWrapperClassNames = classNames(styles48.ScrollBarContainer, pagination && styles48.ScrollBarContainerWithPagination, condensed && styles48.scrollBarContainerCondensed, hideScrollContainer && styles48.scrollBarContainerHidden);
    const scrollBarClassNames = classNames(tableElement.current && tableInitialized && styles48.ScrollBarContent);
    const scrollBarMarkup = itemCount > 0 ? /* @__PURE__ */ import_react181.default.createElement(AfterInitialMount, {
      onMount: resizeTableScrollBar
    }, /* @__PURE__ */ import_react181.default.createElement("div", {
      className: scrollBarWrapperClassNames,
      ref: scrollContainerElement
    }, /* @__PURE__ */ import_react181.default.createElement("div", {
      onScroll: handleScrollBarScroll,
      className: styles48.ScrollBar,
      ref: scrollBarElement
    }, /* @__PURE__ */ import_react181.default.createElement("div", {
      className: scrollBarClassNames
    })))) : null;
    const isSortable = sortable?.some((value) => value);
    const tableClassNames = classNames(styles48.Table, hasMoreLeftColumns && styles48["Table-scrolling"], selectMode && styles48.disableTextSelection, !selectable && styles48["Table-unselectable"], canFitStickyColumn && styles48["Table-sticky"], isSortable && styles48["Table-sortable"], canFitStickyColumn && lastColumnSticky && styles48["Table-sticky-last"], canFitStickyColumn && lastColumnSticky && canScrollRight && styles48["Table-sticky-scrolling"], hasZebraStriping && styles48.ZebraStriping);
    const emptyStateMarkup = emptyState ? emptyState : /* @__PURE__ */ import_react181.default.createElement(EmptySearchResult, {
      title: i18n.translate("Polaris.IndexTable.emptySearchTitle", {
        resourceNamePlural: resourceName.plural
      }),
      description: i18n.translate("Polaris.IndexTable.emptySearchDescription"),
      withIllustration: true
    });
    const sharedMarkup = /* @__PURE__ */ import_react181.default.createElement(import_react181.default.Fragment, null, /* @__PURE__ */ import_react181.default.createElement(EventListener2, {
      event: "resize",
      handler: handleResize
    }), stickyHeaderMarkup);
    const condensedClassNames = classNames(styles48.CondensedList, hasZebraStriping && styles48.ZebraStriping);
    const bodyMarkup = condensed ? /* @__PURE__ */ import_react181.default.createElement(import_react181.default.Fragment, null, sharedMarkup, /* @__PURE__ */ import_react181.default.createElement("ul", {
      "data-selectmode": Boolean(selectMode),
      className: condensedClassNames,
      ref: condensedListElement
    }, children)) : /* @__PURE__ */ import_react181.default.createElement(import_react181.default.Fragment, null, sharedMarkup, /* @__PURE__ */ import_react181.default.createElement(ScrollContainer, {
      scrollableContainerRef: scrollableContainerElement,
      onScroll: handleScrollContainerScroll
    }, /* @__PURE__ */ import_react181.default.createElement("table", {
      ref: tableElement,
      className: tableClassNames
    }, /* @__PURE__ */ import_react181.default.createElement("thead", null, /* @__PURE__ */ import_react181.default.createElement("tr", {
      className: styles48.HeadingRow
    }, headingsMarkup)), /* @__PURE__ */ import_react181.default.createElement("tbody", {
      ref: tableBodyRef
    }, children))));
    const tableContentMarkup = itemCount > 0 ? bodyMarkup : /* @__PURE__ */ import_react181.default.createElement("div", {
      className: styles48.EmptySearchResultWrapper
    }, emptyStateMarkup);
    const paginationMarkup = pagination ? /* @__PURE__ */ import_react181.default.createElement("div", {
      className: styles48.PaginationWrapper
    }, /* @__PURE__ */ import_react181.default.createElement(Pagination, Object.assign({
      type: "table"
    }, pagination))) : null;
    return /* @__PURE__ */ import_react181.default.createElement(import_react181.default.Fragment, null, /* @__PURE__ */ import_react181.default.createElement("div", {
      className: styles48.IndexTable
    }, /* @__PURE__ */ import_react181.default.createElement("div", {
      className: styles48.IndexTableWrapper
    }, !condensed && loadingMarkup, tableContentMarkup, scrollBarMarkup, paginationMarkup)));
    function renderHeading(heading, index, Tag, tagProps, id) {
      const isSecond = index === 0;
      const isLast = index === headings.length - 1;
      const hasSortable = sortable?.some((value) => value === true);
      const headingAlignment = heading.alignment || "start";
      const headingContentClassName = classNames(styles48.TableHeading, headingAlignment === "center" && styles48["TableHeading-align-center"], headingAlignment === "end" && styles48["TableHeading-align-end"], hasSortable && styles48["TableHeading-sortable"], isSecond && styles48["TableHeading-second"], isLast && !heading.hidden && styles48["TableHeading-last"], !selectable && styles48["TableHeading-unselectable"], heading.flush && styles48["TableHeading-flush"]);
      const stickyPositioningStyle = selectable !== false && isSecond && tableHeadingRects.current && tableHeadingRects.current.length > 0 ? {
        left: tableHeadingRects.current[0].offsetWidth
      } : void 0;
      const headingContent = /* @__PURE__ */ import_react181.default.createElement(Tag, Object.assign({
        id,
        className: headingContentClassName,
        key: getHeadingKey(heading),
        style: stickyPositioningStyle
      }, tagProps), renderHeadingContent(heading, index));
      if (index !== 0 || !selectable) {
        return headingContent;
      }
      const checkboxClassName = classNames(styles48.TableHeading, hasSortable && styles48["TableHeading-sortable"], index === 0 && styles48["TableHeading-first"]);
      const checkboxContent = /* @__PURE__ */ import_react181.default.createElement(Tag, Object.assign({
        className: checkboxClassName,
        key: `${heading}-${index}`
      }, tagProps), renderCheckboxContent());
      return [checkboxContent, headingContent];
    }
    function renderCheckboxContent() {
      return /* @__PURE__ */ import_react181.default.createElement("div", {
        className: styles48.ColumnHeaderCheckboxWrapper
      }, /* @__PURE__ */ import_react181.default.createElement(Checkbox, {
        label: i18n.translate("Polaris.IndexTable.selectAllLabel", {
          resourceNamePlural: resourceName.plural
        }),
        labelHidden: true,
        onChange: handleSelectPage,
        checked: bulkSelectState
      }));
    }
    function handleSortHeadingClick(index, direction) {
      renderAfterSelectEvent.current = false;
      hasSelected.current = false;
      lastSortedColumnIndex.current = sortColumnIndex;
      onSort?.(index, direction);
    }
    function renderHeadingContent(heading, index) {
      let headingContent;
      const defaultTooltipProps = {
        width: heading.tooltipWidth ?? "default",
        activatorWrapper: "div",
        dismissOnMouseOut: true,
        persistOnClick: heading.tooltipPersistsOnClick
      };
      const defaultHeaderTooltipProps = {
        ...defaultTooltipProps,
        padding: "400",
        borderRadius: "200",
        content: heading.tooltipContent,
        preferredPosition: "above"
      };
      const headingTitle = /* @__PURE__ */ import_react181.default.createElement(Text, {
        as: "span",
        variant: "bodySm",
        fontWeight: "medium",
        visuallyHidden: heading.hidden
      }, heading.title);
      if (heading.new) {
        headingContent = /* @__PURE__ */ import_react181.default.createElement(LegacyStack, {
          wrap: false,
          alignment: "center"
        }, headingTitle, /* @__PURE__ */ import_react181.default.createElement(Badge, {
          tone: "new"
        }, i18n.translate("Polaris.IndexTable.onboardingBadgeText")));
      } else {
        headingContent = headingTitle;
      }
      const style = {
        "--pc-index-table-heading-extra-padding-right": heading.paddingBlockEnd ? `var(--p-space-${heading.paddingBlockEnd})` : "0"
      };
      if (sortable?.[index]) {
        const isCurrentlySorted = index === sortColumnIndex;
        const isPreviouslySorted = !isCurrentlySorted && index === lastSortedColumnIndex.current;
        const isRenderAfterSelectEvent = renderAfterSelectEvent.current || !hasSelected.current && selectedItemsCount !== 0;
        const isAscending = sortDirection === "ascending";
        let newDirection = heading.defaultSortDirection ?? defaultSortDirection;
        let SourceComponent = newDirection === "ascending" ? SvgSortAscendingIcon : SvgSortDescendingIcon;
        if (isCurrentlySorted) {
          newDirection = isAscending ? "descending" : "ascending";
          SourceComponent = sortDirection === "ascending" ? SvgSortAscendingIcon : SvgSortDescendingIcon;
        }
        const iconMarkup = /* @__PURE__ */ import_react181.default.createElement("span", {
          className: classNames(styles48.TableHeadingSortIcon, heading?.alignment === "end" && styles48["TableHeadingSortIcon-heading-align-end"], isCurrentlySorted && styles48["TableHeadingSortIcon-visible"])
        }, /* @__PURE__ */ import_react181.default.createElement(SourceComponent, {
          focusable: "false",
          "aria-hidden": "true",
          className: styles48.TableHeadingSortSvg
        }));
        const defaultSortButtonProps = {
          onClick: () => handleSortHeadingClick(index, newDirection),
          className: classNames(styles48.TableHeadingSortButton, !isCurrentlySorted && heading?.alignment === "end" && styles48["TableHeadingSortButton-heading-align-end"], isCurrentlySorted && heading?.alignment === "end" && styles48["TableHeadingSortButton-heading-align-end-currently-sorted"], isPreviouslySorted && !isRenderAfterSelectEvent && heading?.alignment === "end" && styles48["TableHeadingSortButton-heading-align-end-previously-sorted"]),
          tabIndex: selectMode ? -1 : 0
        };
        const sortMarkup = /* @__PURE__ */ import_react181.default.createElement(UnstyledButton, defaultSortButtonProps, iconMarkup, /* @__PURE__ */ import_react181.default.createElement("span", {
          className: classNames(sortToggleLabels && selectMode && heading.tooltipContent && styles48.TableHeadingTooltipUnderlinePlaceholder)
        }, headingContent));
        if (!sortToggleLabels || selectMode) {
          return /* @__PURE__ */ import_react181.default.createElement("div", {
            className: styles48.SortableTableHeadingWithCustomMarkup
          }, sortMarkup);
        }
        const tooltipDirection = isCurrentlySorted ? sortDirection : newDirection;
        const sortTooltipContent = sortToggleLabels[index][tooltipDirection];
        if (!heading.tooltipContent) {
          return (
            // Regular header with sort icon and sort direction tooltip
            /* @__PURE__ */ import_react181.default.createElement("div", {
              style,
              className: classNames(heading.paddingBlockEnd && styles48["TableHeading-extra-padding-right"])
            }, /* @__PURE__ */ import_react181.default.createElement(Tooltip, Object.assign({}, defaultTooltipProps, {
              content: sortTooltipContent,
              preferredPosition: "above"
            }), sortMarkup))
          );
        }
        if (heading.tooltipContent) {
          return (
            // Header text and sort icon have separate tooltips
            /* @__PURE__ */ import_react181.default.createElement("div", {
              className: classNames(styles48.SortableTableHeadingWithCustomMarkup, heading.paddingBlockEnd && styles48["TableHeading-extra-padding-right"]),
              style
            }, /* @__PURE__ */ import_react181.default.createElement(UnstyledButton, defaultSortButtonProps, /* @__PURE__ */ import_react181.default.createElement(Tooltip, defaultHeaderTooltipProps, /* @__PURE__ */ import_react181.default.createElement("span", {
              className: styles48.TableHeadingUnderline
            }, headingContent)), /* @__PURE__ */ import_react181.default.createElement(Tooltip, Object.assign({}, defaultTooltipProps, {
              content: sortTooltipContent,
              preferredPosition: "above"
            }), iconMarkup)))
          );
        }
      }
      if (heading.tooltipContent) {
        return (
          // Non-sortable header with tooltip
          /* @__PURE__ */ import_react181.default.createElement("div", {
            style,
            className: classNames(heading.paddingBlockEnd && styles48["TableHeading-extra-padding-right"])
          }, /* @__PURE__ */ import_react181.default.createElement(Tooltip, Object.assign({}, defaultHeaderTooltipProps, {
            activatorWrapper: "span"
          }), /* @__PURE__ */ import_react181.default.createElement("span", {
            className: classNames(styles48.TableHeadingUnderline, styles48.SortableTableHeaderWrapper)
          }, headingContent)))
        );
      }
      return /* @__PURE__ */ import_react181.default.createElement("div", {
        style,
        className: classNames(heading.paddingBlockEnd && styles48["TableHeading-extra-padding-right"])
      }, headingContent);
    }
    function handleSelectPage(checked) {
      handleSelectionChange(SelectionType2.Page, checked);
    }
    function getPaginatedSelectAllAction() {
      if (!selectable || !hasMoreItems) {
        return;
      }
      const customActionText = paginatedSelectAllActionText ?? i18n.translate("Polaris.IndexTable.selectAllItems", {
        itemsLength: itemCount,
        resourceNamePlural: resourceName.plural.toLocaleLowerCase()
      });
      const actionText = selectedItemsCount === SELECT_ALL_ITEMS ? i18n.translate("Polaris.IndexTable.undo") : customActionText;
      return {
        content: actionText,
        onAction: handleSelectAllItemsInStore
      };
    }
    function handleSelectModeToggle() {
      handleSelectionChange(SelectionType2.All, false);
    }
  }
  function getHeadingKey(heading) {
    if (heading.id) {
      return heading.id;
    } else if (typeof heading.title === "string") {
      return heading.title;
    }
    return "";
  }
  function IndexTable({
    children,
    selectable = true,
    itemCount,
    selectedItemsCount = 0,
    resourceName: passedResourceName,
    loading,
    hasMoreItems,
    condensed,
    onSelectionChange,
    paginatedSelectAllText,
    ...indexTableBaseProps
  }) {
    return /* @__PURE__ */ import_react181.default.createElement(import_react181.default.Fragment, null, /* @__PURE__ */ import_react181.default.createElement(IndexProvider, {
      selectable: selectable && !condensed,
      itemCount,
      selectedItemsCount,
      resourceName: passedResourceName,
      loading,
      hasMoreItems,
      condensed,
      onSelectionChange,
      paginatedSelectAllText
    }, /* @__PURE__ */ import_react181.default.createElement(IndexTableBase, indexTableBaseProps, children)));
  }
  IndexTable.Cell = Cell;
  IndexTable.Row = Row;

  // node_modules/@shopify/polaris/build/esm/components/TextContainer/TextContainer.js
  var import_react182 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/TextContainer/TextContainer.css.js
  var styles51 = {
    "TextContainer": "Polaris-TextContainer",
    "spacingTight": "Polaris-TextContainer--spacingTight",
    "spacingLoose": "Polaris-TextContainer--spacingLoose"
  };

  // node_modules/@shopify/polaris/build/esm/components/TextContainer/TextContainer.js
  function TextContainer({
    spacing,
    children
  }) {
    const className = classNames(styles51.TextContainer, spacing && styles51[variationName("spacing", spacing)]);
    return /* @__PURE__ */ import_react182.default.createElement("div", {
      className
    }, children);
  }

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/RangeSlider.js
  var import_react185 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/DualThumb/DualThumb.js
  var import_react183 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/RangeSlider.css.js
  var sharedStyles = {
    "RangeSlider": "Polaris-RangeSlider",
    "Track--dashed-after": "Polaris-RangeSlider--trackDashedAfter",
    "Track--dashed": "Polaris-RangeSlider--trackDashed"
  };

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/DualThumb/DualThumb.css.js
  var styles52 = {
    "DualThumb": "Polaris-RangeSlider-DualThumb",
    "TrackWrapper": "Polaris-RangeSlider-DualThumb__TrackWrapper",
    "disabled": "Polaris-RangeSlider-DualThumb--disabled",
    "Track": "Polaris-RangeSlider-DualThumb__Track",
    "error": "Polaris-RangeSlider-DualThumb--error",
    "Thumbs": "Polaris-RangeSlider-DualThumb__Thumbs",
    "Prefix": "Polaris-RangeSlider-DualThumb__Prefix",
    "Suffix": "Polaris-RangeSlider-DualThumb__Suffix",
    "Output": "Polaris-RangeSlider-DualThumb__Output",
    "OutputBubble": "Polaris-RangeSlider-DualThumb__OutputBubble"
  };

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/DualThumb/DualThumb.js
  var Control = /* @__PURE__ */ function(Control2) {
    Control2[Control2["Lower"] = 0] = "Lower";
    Control2[Control2["Upper"] = 1] = "Upper";
    return Control2;
  }(Control || {});
  var DualThumb = class extends import_react183.Component {
    constructor(...args) {
      super(...args);
      this.state = {
        value: sanitizeValue(this.props.value, this.props.min, this.props.max, this.props.step),
        trackWidth: 0,
        trackLeft: 0
      };
      this.track = /* @__PURE__ */ (0, import_react183.createRef)();
      this.trackWrapper = /* @__PURE__ */ (0, import_react183.createRef)();
      this.thumbLower = /* @__PURE__ */ (0, import_react183.createRef)();
      this.thumbUpper = /* @__PURE__ */ (0, import_react183.createRef)();
      this.setTrackPosition = debounce(() => {
        if (this.track.current) {
          const thumbSize = 16;
          const {
            width,
            left
          } = this.track.current.getBoundingClientRect();
          const adjustedTrackWidth = width - thumbSize;
          const adjustedTrackLeft = left + thumbSize / 2;
          const range = this.props.max - this.props.min;
          const minValuePosition = this.props.min / range * adjustedTrackWidth;
          this.setState({
            trackWidth: adjustedTrackWidth,
            trackLeft: adjustedTrackLeft - minValuePosition
          });
        }
      }, 40, {
        leading: true,
        trailing: true,
        maxWait: 40
      });
      this.handleMouseDownThumbLower = (event) => {
        if (event.button !== 0 || this.props.disabled)
          return;
        registerMouseMoveHandler(this.handleMouseMoveThumbLower);
        event.stopPropagation();
      };
      this.handleMouseMoveThumbLower = (event) => {
        const valueUpper = this.state.value[1];
        this.setValue([this.actualXPosition(event.clientX), valueUpper], Control.Upper);
      };
      this.handleTouchStartThumbLower = (event) => {
        if (this.props.disabled)
          return;
        registerTouchMoveHandler(this.handleTouchMoveThumbLower);
        event.stopPropagation();
      };
      this.handleTouchMoveThumbLower = (event) => {
        event.preventDefault();
        const valueUpper = this.state.value[1];
        this.setValue([this.actualXPosition(event.touches[0].clientX), valueUpper], Control.Upper);
      };
      this.handleMouseDownThumbUpper = (event) => {
        if (event.button !== 0 || this.props.disabled)
          return;
        registerMouseMoveHandler(this.handleMouseMoveThumbUpper);
        event.stopPropagation();
      };
      this.handleMouseMoveThumbUpper = (event) => {
        const valueLower = this.state.value[0];
        this.setValue([valueLower, this.actualXPosition(event.clientX)], Control.Lower);
      };
      this.handleTouchStartThumbUpper = (event) => {
        if (this.props.disabled)
          return;
        registerTouchMoveHandler(this.handleTouchMoveThumbUpper);
        event.stopPropagation();
      };
      this.handleTouchMoveThumbUpper = (event) => {
        event.preventDefault();
        const valueLower = this.state.value[0];
        this.setValue([valueLower, this.actualXPosition(event.touches[0].clientX)], Control.Lower);
      };
      this.handleKeypressLower = (event) => {
        if (this.props.disabled)
          return;
        const {
          incrementValueLower,
          decrementValueLower
        } = this;
        const handlerMap = {
          [Key.UpArrow]: incrementValueLower,
          [Key.RightArrow]: incrementValueLower,
          [Key.DownArrow]: decrementValueLower,
          [Key.LeftArrow]: decrementValueLower
        };
        const handler = handlerMap[event.keyCode];
        if (handler != null) {
          event.preventDefault();
          event.stopPropagation();
          handler();
        }
      };
      this.handleKeypressUpper = (event) => {
        if (this.props.disabled)
          return;
        const {
          incrementValueUpper,
          decrementValueUpper
        } = this;
        const handlerMap = {
          [Key.UpArrow]: incrementValueUpper,
          [Key.RightArrow]: incrementValueUpper,
          [Key.DownArrow]: decrementValueUpper,
          [Key.LeftArrow]: decrementValueUpper
        };
        const handler = handlerMap[event.keyCode];
        if (handler != null) {
          event.preventDefault();
          event.stopPropagation();
          handler();
        }
      };
      this.incrementValueLower = () => {
        this.setValue([this.state.value[0] + this.props.step, this.state.value[1]], Control.Upper);
      };
      this.decrementValueLower = () => {
        this.setValue([this.state.value[0] - this.props.step, this.state.value[1]], Control.Upper);
      };
      this.incrementValueUpper = () => {
        this.setValue([this.state.value[0], this.state.value[1] + this.props.step], Control.Lower);
      };
      this.decrementValueUpper = () => {
        this.setValue([this.state.value[0], this.state.value[1] - this.props.step], Control.Lower);
      };
      this.dispatchValue = () => {
        const {
          onChange,
          id
        } = this.props;
        const {
          value
        } = this.state;
        onChange(value, id);
      };
      this.setValue = (dirtyValue, control) => {
        const {
          props: {
            min,
            max,
            step
          },
          state: {
            value
          }
        } = this;
        const sanitizedValue = sanitizeValue(dirtyValue, min, max, step, control);
        if (isTupleEqual(sanitizedValue, value) === false) {
          this.setState({
            value: sanitizedValue
          }, this.dispatchValue);
        }
      };
      this.handleMouseDownTrack = (event) => {
        if (event.button !== 0 || this.props.disabled)
          return;
        event.preventDefault();
        const clickXPosition = this.actualXPosition(event.clientX);
        const {
          value
        } = this.state;
        const distanceFromLowerThumb = Math.abs(value[0] - clickXPosition);
        const distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
        if (distanceFromLowerThumb <= distanceFromUpperThumb) {
          this.setValue([clickXPosition, value[1]], Control.Upper);
          registerMouseMoveHandler(this.handleMouseMoveThumbLower);
          if (this.thumbLower.current != null) {
            this.thumbLower.current.focus();
          }
        } else {
          this.setValue([value[0], clickXPosition], Control.Lower);
          registerMouseMoveHandler(this.handleMouseMoveThumbUpper);
          if (this.thumbUpper.current != null) {
            this.thumbUpper.current.focus();
          }
        }
      };
      this.handleTouchStartTrack = (event) => {
        if (this.props.disabled)
          return;
        event.preventDefault();
        const clickXPosition = this.actualXPosition(event.touches[0].clientX);
        const {
          value
        } = this.state;
        const distanceFromLowerThumb = Math.abs(value[0] - clickXPosition);
        const distanceFromUpperThumb = Math.abs(value[1] - clickXPosition);
        if (distanceFromLowerThumb <= distanceFromUpperThumb) {
          this.setValue([clickXPosition, value[1]], Control.Upper);
          registerTouchMoveHandler(this.handleTouchMoveThumbLower);
          if (this.thumbLower.current != null) {
            this.thumbLower.current.focus();
          }
        } else {
          this.setValue([value[0], clickXPosition], Control.Lower);
          registerTouchMoveHandler(this.handleTouchMoveThumbUpper);
          if (this.thumbUpper.current != null) {
            this.thumbUpper.current.focus();
          }
        }
      };
      this.actualXPosition = (dirtyXPosition) => {
        if (this.track.current) {
          const {
            min,
            max
          } = this.props;
          const {
            trackLeft,
            trackWidth
          } = this.state;
          const relativeX = dirtyXPosition - trackLeft;
          const percentageOfTrack = relativeX / trackWidth;
          return percentageOfTrack * (max - min);
        } else {
          return 0;
        }
      };
    }
    static getDerivedStateFromProps(props, state) {
      const {
        min,
        step,
        max,
        value,
        onChange,
        id
      } = props;
      const {
        prevValue
      } = state;
      if (isTupleEqual(prevValue, value)) {
        return null;
      }
      const sanitizedValue = sanitizeValue(value, min, max, step);
      if (!isTupleEqual(value, sanitizedValue)) {
        onChange(sanitizedValue, id);
      }
      return {
        prevValue: value,
        value: sanitizedValue
      };
    }
    componentDidMount() {
      this.setTrackPosition();
      if (this.trackWrapper.current != null) {
        this.trackWrapper.current.addEventListener("touchstart", this.handleTouchStartTrack, {
          passive: false
        });
      }
    }
    componentWillUnmount() {
      if (this.trackWrapper.current != null) {
        this.trackWrapper.current.removeEventListener("touchstart", this.handleTouchStartTrack);
      }
    }
    render() {
      const {
        id,
        min,
        max,
        prefix,
        suffix,
        disabled,
        output,
        error: error2,
        onFocus,
        onBlur,
        label,
        labelAction,
        labelHidden,
        helpText
      } = this.props;
      const {
        value
      } = this.state;
      const idLower = id;
      const idUpper = `${id}Upper`;
      const describedBy = [];
      if (error2) {
        describedBy.push(`${id}Error`);
      }
      const ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0;
      const trackWrapperClassName = classNames(styles52.TrackWrapper, error2 && styles52.error, disabled && styles52.disabled);
      const thumbLowerClassName = classNames(styles52.Thumbs, styles52.ThumbLower, disabled && styles52.disabled);
      const thumbUpperClassName = classNames(styles52.Thumbs, styles52.ThumbUpper, disabled && styles52.disabled);
      const trackWidth = this.state.trackWidth;
      const range = max - min;
      const minValuePosition = min / range * trackWidth;
      const leftPositionThumbLower = value[0] / range * trackWidth - minValuePosition;
      const leftPositionThumbUpper = value[1] / range * trackWidth - minValuePosition;
      const outputLowerClassName = classNames(styles52.Output, styles52.OutputLower);
      const outputMarkupLower = !disabled && output ? /* @__PURE__ */ import_react183.default.createElement("output", {
        htmlFor: idLower,
        className: outputLowerClassName,
        style: {
          left: `${leftPositionThumbLower}px`
        }
      }, /* @__PURE__ */ import_react183.default.createElement("div", {
        className: styles52.OutputBubble
      }, /* @__PURE__ */ import_react183.default.createElement(Text, {
        as: "span",
        variant: "headingSm",
        alignment: "center"
      }, value[0]))) : null;
      const outputUpperClassName = classNames(styles52.Output, styles52.OutputUpper);
      const outputMarkupUpper = !disabled && output ? /* @__PURE__ */ import_react183.default.createElement("output", {
        htmlFor: idUpper,
        className: outputUpperClassName,
        style: {
          left: `${leftPositionThumbUpper}px`
        }
      }, /* @__PURE__ */ import_react183.default.createElement("div", {
        className: styles52.OutputBubble
      }, /* @__PURE__ */ import_react183.default.createElement(Text, {
        as: "span",
        variant: "headingSm",
        alignment: "center"
      }, value[1]))) : null;
      const cssVars = {
        "--pc-range-slider-progress-lower": `${leftPositionThumbLower}px`,
        "--pc-range-slider-progress-upper": `${leftPositionThumbUpper}px`
      };
      const prefixMarkup = prefix && /* @__PURE__ */ import_react183.default.createElement("div", {
        className: styles52.Prefix
      }, prefix);
      const suffixMarkup = suffix && /* @__PURE__ */ import_react183.default.createElement("div", {
        className: styles52.Suffix
      }, suffix);
      return /* @__PURE__ */ import_react183.default.createElement(import_react183.default.Fragment, null, /* @__PURE__ */ import_react183.default.createElement(Labelled, {
        id,
        label,
        error: error2,
        action: labelAction,
        labelHidden,
        helpText
      }, /* @__PURE__ */ import_react183.default.createElement("div", {
        className: classNames(styles52.DualThumb, sharedStyles.RangeSlider)
      }, prefixMarkup, /* @__PURE__ */ import_react183.default.createElement("div", {
        className: trackWrapperClassName,
        onMouseDown: this.handleMouseDownTrack,
        ref: this.trackWrapper
      }, /* @__PURE__ */ import_react183.default.createElement("div", {
        className: styles52.Track,
        style: cssVars,
        ref: this.track
      }), /* @__PURE__ */ import_react183.default.createElement("div", {
        className: sharedStyles["Track--dashed"]
      }), /* @__PURE__ */ import_react183.default.createElement("div", {
        id: idLower,
        className: thumbLowerClassName,
        style: {
          left: `${leftPositionThumbLower}px`
        },
        role: "slider",
        "aria-disabled": disabled,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": value[0],
        "aria-invalid": Boolean(error2),
        "aria-describedby": ariaDescribedBy,
        "aria-labelledby": labelID(id),
        onFocus,
        onBlur,
        tabIndex: 0,
        onKeyDown: this.handleKeypressLower,
        onMouseDown: this.handleMouseDownThumbLower,
        onTouchStart: this.handleTouchStartThumbLower,
        ref: this.thumbLower
      }), outputMarkupLower, /* @__PURE__ */ import_react183.default.createElement("div", {
        id: idUpper,
        className: thumbUpperClassName,
        style: {
          left: `${leftPositionThumbUpper}px`
        },
        role: "slider",
        "aria-disabled": disabled,
        "aria-valuemin": min,
        "aria-valuemax": max,
        "aria-valuenow": value[1],
        "aria-invalid": Boolean(error2),
        "aria-describedby": ariaDescribedBy,
        "aria-labelledby": labelID(id),
        onFocus,
        onBlur,
        tabIndex: 0,
        onKeyDown: this.handleKeypressUpper,
        onMouseDown: this.handleMouseDownThumbUpper,
        onTouchStart: this.handleTouchStartThumbUpper,
        ref: this.thumbUpper
      }), outputMarkupUpper), suffixMarkup)), /* @__PURE__ */ import_react183.default.createElement(EventListener2, {
        event: "resize",
        handler: this.setTrackPosition
      }));
    }
  };
  DualThumb.contextType = FeaturesContext;
  function registerMouseMoveHandler(handler) {
    document.addEventListener("mousemove", handler);
    document.addEventListener("mouseup", () => {
      document.removeEventListener("mousemove", handler);
    }, {
      once: true
    });
  }
  function registerTouchMoveHandler(handler) {
    const removeHandler = () => {
      document.removeEventListener("touchmove", handler);
      document.removeEventListener("touchend", removeHandler);
      document.removeEventListener("touchcancel", removeHandler);
    };
    document.addEventListener("touchmove", handler, {
      passive: false
    });
    document.addEventListener("touchend", removeHandler, {
      once: true
    });
    document.addEventListener("touchcancel", removeHandler, {
      once: true
    });
  }
  function sanitizeValue(value, min, max, step, control = Control.Upper) {
    let upperValue = inBoundsUpper(roundedToStep(value[1]));
    let lowerValue = inBoundsLower(roundedToStep(value[0]));
    const maxLowerValue = upperValue - step;
    const minUpperValue = lowerValue + step;
    if (control === Control.Upper && lowerValue > maxLowerValue) {
      lowerValue = maxLowerValue;
    } else if (control === Control.Lower && upperValue < minUpperValue) {
      upperValue = minUpperValue;
    }
    return [lowerValue, upperValue];
    function inBoundsUpper(value2) {
      const lowerMin = min + step;
      if (value2 < lowerMin) {
        return lowerMin;
      } else if (value2 > max) {
        return max;
      } else {
        return value2;
      }
    }
    function inBoundsLower(value2) {
      const upperMax = max - step;
      if (value2 < min) {
        return min;
      } else if (value2 > upperMax) {
        return upperMax;
      } else {
        return value2;
      }
    }
    function roundedToStep(value2) {
      return Math.round(value2 / step) * step;
    }
  }
  function isTupleEqual(a, b) {
    if (a == null || b == null) {
      return false;
    }
    return a[0] === b[0] && a[1] === b[1];
  }

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/SingleThumb/SingleThumb.js
  var import_react184 = __toESM(require_react());

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/SingleThumb/SingleThumb.css.js
  var styles53 = {
    "SingleThumb": "Polaris-RangeSlider-SingleThumb",
    "disabled": "Polaris-RangeSlider-SingleThumb--disabled",
    "InputWrapper": "Polaris-RangeSlider-SingleThumb__InputWrapper",
    "Prefix": "Polaris-RangeSlider-SingleThumb__Prefix",
    "Suffix": "Polaris-RangeSlider-SingleThumb__Suffix",
    "Input": "Polaris-RangeSlider-SingleThumb__Input",
    "error": "Polaris-RangeSlider-SingleThumb--error",
    "Output": "Polaris-RangeSlider-SingleThumb__Output",
    "OutputBubble": "Polaris-RangeSlider-SingleThumb__OutputBubble"
  };

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/utilities/invertNumber.js
  function invertNumber(number) {
    if (Math.sign(number) === 1) {
      return -Math.abs(number);
    } else if (Math.sign(number) === -1) {
      return Math.abs(number);
    } else {
      return 0;
    }
  }

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/components/SingleThumb/SingleThumb.js
  function SingleThumb(props) {
    const {
      id,
      error: error2,
      helpText,
      value,
      min,
      max,
      disabled,
      output,
      prefix,
      suffix,
      label,
      labelAction,
      labelHidden,
      step,
      onBlur,
      onFocus
    } = props;
    const clampedValue = clamp(value, min, max);
    const describedBy = [];
    if (error2) {
      describedBy.push(`${id}Error`);
    }
    if (helpText) {
      describedBy.push(helpTextID(id));
    }
    const ariaDescribedBy = describedBy.length ? describedBy.join(" ") : void 0;
    const sliderProgress = (clampedValue - min) * 100 / (max - min);
    const outputFactor = invertNumber((sliderProgress - 50) / 100);
    const cssVars = {
      "--pc-range-slider-min": min,
      "--pc-range-slider-max": max,
      "--pc-range-slider-current": clampedValue,
      "--pc-range-slider-progress": `${sliderProgress}%`,
      "--pc-range-slider-output-factor": `${outputFactor}`
    };
    const outputMarkup = !disabled && output && /* @__PURE__ */ import_react184.default.createElement("output", {
      htmlFor: id,
      className: styles53.Output
    }, /* @__PURE__ */ import_react184.default.createElement("div", {
      className: styles53.OutputBubble
    }, /* @__PURE__ */ import_react184.default.createElement(Text, {
      as: "span",
      variant: "headingSm",
      alignment: "center"
    }, clampedValue)));
    const prefixMarkup = prefix && /* @__PURE__ */ import_react184.default.createElement("div", {
      className: styles53.Prefix
    }, prefix);
    const suffixMarkup = suffix && /* @__PURE__ */ import_react184.default.createElement("div", {
      className: styles53.Suffix
    }, suffix);
    const className = classNames(styles53.SingleThumb, sharedStyles.RangeSlider, error2 && styles53.error, disabled && styles53.disabled);
    return /* @__PURE__ */ import_react184.default.createElement(Labelled, {
      id,
      label,
      error: error2,
      action: labelAction,
      labelHidden,
      helpText
    }, /* @__PURE__ */ import_react184.default.createElement("div", {
      className,
      style: cssVars
    }, prefixMarkup, /* @__PURE__ */ import_react184.default.createElement("div", {
      className: classNames(styles53.InputWrapper, sharedStyles["Track--dashed-after"])
    }, /* @__PURE__ */ import_react184.default.createElement("input", {
      type: "range",
      className: styles53.Input,
      id,
      name: id,
      min,
      max,
      step,
      value: clampedValue,
      disabled,
      onChange: handleChange,
      onFocus,
      onBlur,
      "aria-valuemin": min,
      "aria-valuemax": max,
      "aria-valuenow": clampedValue,
      "aria-invalid": Boolean(error2),
      "aria-describedby": ariaDescribedBy
    }), outputMarkup), suffixMarkup));
    function handleChange(event) {
      const {
        onChange
      } = props;
      onChange && onChange(parseFloat(event.currentTarget.value), id);
    }
  }

  // node_modules/@shopify/polaris/build/esm/components/RangeSlider/RangeSlider.js
  function RangeSlider({
    min = 0,
    max = 100,
    step = 1,
    value,
    ...rest
  }) {
    const id = (0, import_react185.useId)();
    const sharedProps = {
      id,
      min,
      max,
      step,
      ...rest
    };
    return isDualThumb(value) ? /* @__PURE__ */ import_react185.default.createElement(DualThumb, Object.assign({
      value
    }, sharedProps)) : /* @__PURE__ */ import_react185.default.createElement(SingleThumb, Object.assign({
      value
    }, sharedProps));
  }
  function isDualThumb(value) {
    return Array.isArray(value);
  }

  // node_modules/@shopify/polaris/locales/en.json
  var en_default = {
    Polaris: {
      ActionMenu: {
        Actions: {
          moreActions: "More actions"
        },
        RollupActions: {
          rollupButton: "View actions"
        }
      },
      ActionList: {
        SearchField: {
          clearButtonLabel: "Clear",
          search: "Search",
          placeholder: "Search actions"
        }
      },
      Avatar: {
        label: "Avatar",
        labelWithInitials: "Avatar with initials {initials}"
      },
      Autocomplete: {
        spinnerAccessibilityLabel: "Loading",
        ellipsis: "{content}\u2026"
      },
      Badge: {
        PROGRESS_LABELS: {
          incomplete: "Incomplete",
          partiallyComplete: "Partially complete",
          complete: "Complete"
        },
        TONE_LABELS: {
          info: "Info",
          success: "Success",
          warning: "Warning",
          critical: "Critical",
          attention: "Attention",
          new: "New",
          readOnly: "Read-only",
          enabled: "Enabled"
        },
        progressAndTone: "{toneLabel} {progressLabel}"
      },
      Banner: {
        dismissButton: "Dismiss notification"
      },
      Button: {
        spinnerAccessibilityLabel: "Loading"
      },
      Common: {
        checkbox: "checkbox",
        undo: "Undo",
        cancel: "Cancel",
        clear: "Clear",
        close: "Close",
        submit: "Submit",
        more: "More"
      },
      ContextualSaveBar: {
        save: "Save",
        discard: "Discard"
      },
      DataTable: {
        sortAccessibilityLabel: "sort {direction} by",
        navAccessibilityLabel: "Scroll table {direction} one column",
        totalsRowHeading: "Totals",
        totalRowHeading: "Total"
      },
      DatePicker: {
        previousMonth: "Show previous month, {previousMonthName} {showPreviousYear}",
        nextMonth: "Show next month, {nextMonth} {nextYear}",
        today: "Today ",
        start: "Start of range",
        end: "End of range",
        months: {
          january: "January",
          february: "February",
          march: "March",
          april: "April",
          may: "May",
          june: "June",
          july: "July",
          august: "August",
          september: "September",
          october: "October",
          november: "November",
          december: "December"
        },
        days: {
          monday: "Monday",
          tuesday: "Tuesday",
          wednesday: "Wednesday",
          thursday: "Thursday",
          friday: "Friday",
          saturday: "Saturday",
          sunday: "Sunday"
        },
        daysAbbreviated: {
          monday: "Mo",
          tuesday: "Tu",
          wednesday: "We",
          thursday: "Th",
          friday: "Fr",
          saturday: "Sa",
          sunday: "Su"
        }
      },
      DiscardConfirmationModal: {
        title: "Discard all unsaved changes",
        message: "If you discard changes, you\u2019ll delete any edits you made since you last saved.",
        primaryAction: "Discard changes",
        secondaryAction: "Continue editing"
      },
      DropZone: {
        single: {
          overlayTextFile: "Drop file to upload",
          overlayTextImage: "Drop image to upload",
          overlayTextVideo: "Drop video to upload",
          actionTitleFile: "Add file",
          actionTitleImage: "Add image",
          actionTitleVideo: "Add video",
          actionHintFile: "or drop file to upload",
          actionHintImage: "or drop image to upload",
          actionHintVideo: "or drop video to upload",
          labelFile: "Upload file",
          labelImage: "Upload image",
          labelVideo: "Upload video"
        },
        allowMultiple: {
          overlayTextFile: "Drop files to upload",
          overlayTextImage: "Drop images to upload",
          overlayTextVideo: "Drop videos to upload",
          actionTitleFile: "Add files",
          actionTitleImage: "Add images",
          actionTitleVideo: "Add videos",
          actionHintFile: "or drop files to upload",
          actionHintImage: "or drop images to upload",
          actionHintVideo: "or drop videos to upload",
          labelFile: "Upload files",
          labelImage: "Upload images",
          labelVideo: "Upload videos"
        },
        errorOverlayTextFile: "File type is not valid",
        errorOverlayTextImage: "Image type is not valid",
        errorOverlayTextVideo: "Video type is not valid"
      },
      EmptySearchResult: {
        altText: "Empty search results"
      },
      Frame: {
        skipToContent: "Skip to content",
        navigationLabel: "Navigation",
        Navigation: {
          closeMobileNavigationLabel: "Close navigation"
        }
      },
      FullscreenBar: {
        back: "Back",
        accessibilityLabel: "Exit fullscreen mode"
      },
      Filters: {
        moreFilters: "More filters",
        moreFiltersWithCount: "More filters ({count})",
        filter: "Filter {resourceName}",
        noFiltersApplied: "No filters applied",
        cancel: "Cancel",
        done: "Done",
        clearAllFilters: "Clear all filters",
        clear: "Clear",
        clearLabel: "Clear {filterName}",
        addFilter: "Add filter",
        clearFilters: "Clear all",
        searchInView: "in:{viewName}"
      },
      FilterPill: {
        clear: "Clear",
        unsavedChanges: "Unsaved changes - {label}"
      },
      IndexFilters: {
        searchFilterTooltip: "Search and filter",
        searchFilterTooltipWithShortcut: "Search and filter (F)",
        searchFilterAccessibilityLabel: "Search and filter results",
        sort: "Sort your results",
        addView: "Add a new view",
        newView: "Custom search",
        SortButton: {
          ariaLabel: "Sort the results",
          tooltip: "Sort",
          title: "Sort by",
          sorting: {
            asc: "Ascending",
            desc: "Descending",
            az: "A-Z",
            za: "Z-A"
          }
        },
        EditColumnsButton: {
          tooltip: "Edit columns",
          accessibilityLabel: "Customize table column order and visibility"
        },
        UpdateButtons: {
          cancel: "Cancel",
          update: "Update",
          save: "Save",
          saveAs: "Save as",
          modal: {
            title: "Save view as",
            label: "Name",
            sameName: "A view with this name already exists. Please choose a different name.",
            save: "Save",
            cancel: "Cancel"
          }
        }
      },
      IndexProvider: {
        defaultItemSingular: "Item",
        defaultItemPlural: "Items",
        allItemsSelected: "All {itemsLength}+ {resourceNamePlural} are selected",
        selected: "{selectedItemsCount} selected",
        a11yCheckboxDeselectAllSingle: "Deselect {resourceNameSingular}",
        a11yCheckboxSelectAllSingle: "Select {resourceNameSingular}",
        a11yCheckboxDeselectAllMultiple: "Deselect all {itemsLength} {resourceNamePlural}",
        a11yCheckboxSelectAllMultiple: "Select all {itemsLength} {resourceNamePlural}"
      },
      IndexTable: {
        emptySearchTitle: "No {resourceNamePlural} found",
        emptySearchDescription: "Try changing the filters or search term",
        onboardingBadgeText: "New",
        resourceLoadingAccessibilityLabel: "Loading {resourceNamePlural}\u2026",
        selectAllLabel: "Select all {resourceNamePlural}",
        selected: "{selectedItemsCount} selected",
        undo: "Undo",
        selectAllItems: "Select all {itemsLength}+ {resourceNamePlural}",
        selectItem: "Select {resourceName}",
        selectButtonText: "Select",
        sortAccessibilityLabel: "sort {direction} by"
      },
      Loading: {
        label: "Page loading bar"
      },
      Modal: {
        iFrameTitle: "body markup",
        modalWarning: "These required properties are missing from Modal: {missingProps}"
      },
      Page: {
        Header: {
          rollupActionsLabel: "View actions for {title}",
          pageReadyAccessibilityLabel: "{title}. This page is ready"
        }
      },
      Pagination: {
        previous: "Previous",
        next: "Next",
        pagination: "Pagination"
      },
      ProgressBar: {
        negativeWarningMessage: "Values passed to the progress prop shouldn\u2019t be negative. Resetting {progress} to 0.",
        exceedWarningMessage: "Values passed to the progress prop shouldn\u2019t exceed 100. Setting {progress} to 100."
      },
      ResourceList: {
        sortingLabel: "Sort by",
        defaultItemSingular: "item",
        defaultItemPlural: "items",
        showing: "Showing {itemsCount} {resource}",
        showingTotalCount: "Showing {itemsCount} of {totalItemsCount} {resource}",
        loading: "Loading {resource}",
        selected: "{selectedItemsCount} selected",
        allItemsSelected: "All {itemsLength}+ {resourceNamePlural} in your store are selected",
        allFilteredItemsSelected: "All {itemsLength}+ {resourceNamePlural} in this filter are selected",
        selectAllItems: "Select all {itemsLength}+ {resourceNamePlural} in your store",
        selectAllFilteredItems: "Select all {itemsLength}+ {resourceNamePlural} in this filter",
        emptySearchResultTitle: "No {resourceNamePlural} found",
        emptySearchResultDescription: "Try changing the filters or search term",
        selectButtonText: "Select",
        a11yCheckboxDeselectAllSingle: "Deselect {resourceNameSingular}",
        a11yCheckboxSelectAllSingle: "Select {resourceNameSingular}",
        a11yCheckboxDeselectAllMultiple: "Deselect all {itemsLength} {resourceNamePlural}",
        a11yCheckboxSelectAllMultiple: "Select all {itemsLength} {resourceNamePlural}",
        Item: {
          actionsDropdownLabel: "Actions for {accessibilityLabel}",
          actionsDropdown: "Actions dropdown",
          viewItem: "View details for {itemName}"
        },
        BulkActions: {
          actionsActivatorLabel: "Actions",
          moreActionsActivatorLabel: "More actions"
        }
      },
      SkeletonPage: {
        loadingLabel: "Page loading"
      },
      Tabs: {
        newViewAccessibilityLabel: "Create new view",
        newViewTooltip: "Create view",
        toggleTabsLabel: "More views",
        Tab: {
          rename: "Rename view",
          duplicate: "Duplicate view",
          edit: "Edit view",
          editColumns: "Edit columns",
          delete: "Delete view",
          copy: "Copy of {name}",
          deleteModal: {
            title: "Delete view?",
            description: "This can\u2019t be undone. {viewName} view will no longer be available in your admin.",
            cancel: "Cancel",
            delete: "Delete view"
          }
        },
        RenameModal: {
          title: "Rename view",
          label: "Name",
          cancel: "Cancel",
          create: "Save",
          errors: {
            sameName: "A view with this name already exists. Please choose a different name."
          }
        },
        DuplicateModal: {
          title: "Duplicate view",
          label: "Name",
          cancel: "Cancel",
          create: "Create view",
          errors: {
            sameName: "A view with this name already exists. Please choose a different name."
          }
        },
        CreateViewModal: {
          title: "Create new view",
          label: "Name",
          cancel: "Cancel",
          create: "Create view",
          errors: {
            sameName: "A view with this name already exists. Please choose a different name."
          }
        }
      },
      Tag: {
        ariaLabel: "Remove {children}"
      },
      TextField: {
        characterCount: "{count} characters",
        characterCountWithMaxLength: "{count} of {limit} characters used"
      },
      TooltipOverlay: {
        accessibilityLabel: "Tooltip: {label}"
      },
      TopBar: {
        toggleMenuLabel: "Toggle menu",
        SearchField: {
          clearButtonLabel: "Clear",
          search: "Search"
        }
      },
      MediaCard: {
        dismissButton: "Dismiss",
        popoverButton: "Actions"
      },
      VideoThumbnail: {
        playButtonA11yLabel: {
          default: "Play video",
          defaultWithDuration: "Play video of length {duration}",
          duration: {
            hours: {
              other: {
                only: "{hourCount} hours",
                andMinutes: "{hourCount} hours and {minuteCount} minutes",
                andMinute: "{hourCount} hours and {minuteCount} minute",
                minutesAndSeconds: "{hourCount} hours, {minuteCount} minutes, and {secondCount} seconds",
                minutesAndSecond: "{hourCount} hours, {minuteCount} minutes, and {secondCount} second",
                minuteAndSeconds: "{hourCount} hours, {minuteCount} minute, and {secondCount} seconds",
                minuteAndSecond: "{hourCount} hours, {minuteCount} minute, and {secondCount} second",
                andSeconds: "{hourCount} hours and {secondCount} seconds",
                andSecond: "{hourCount} hours and {secondCount} second"
              },
              one: {
                only: "{hourCount} hour",
                andMinutes: "{hourCount} hour and {minuteCount} minutes",
                andMinute: "{hourCount} hour and {minuteCount} minute",
                minutesAndSeconds: "{hourCount} hour, {minuteCount} minutes, and {secondCount} seconds",
                minutesAndSecond: "{hourCount} hour, {minuteCount} minutes, and {secondCount} second",
                minuteAndSeconds: "{hourCount} hour, {minuteCount} minute, and {secondCount} seconds",
                minuteAndSecond: "{hourCount} hour, {minuteCount} minute, and {secondCount} second",
                andSeconds: "{hourCount} hour and {secondCount} seconds",
                andSecond: "{hourCount} hour and {secondCount} second"
              }
            },
            minutes: {
              other: {
                only: "{minuteCount} minutes",
                andSeconds: "{minuteCount} minutes and {secondCount} seconds",
                andSecond: "{minuteCount} minutes and {secondCount} second"
              },
              one: {
                only: "{minuteCount} minute",
                andSeconds: "{minuteCount} minute and {secondCount} seconds",
                andSecond: "{minuteCount} minute and {secondCount} second"
              }
            },
            seconds: {
              other: "{secondCount} seconds",
              one: "{secondCount} second"
            }
          }
        }
      }
    }
  };

  // app/javascript/components/IndexTable.jsx
  var import_react186 = __toESM(require_react());
  var import_app_bridge = __toESM(require_app_bridge());
  var import_actions = __toESM(require_actions7());

  // node_modules/axios/lib/helpers/bind.js
  function bind(fn, thisArg) {
    return function wrap() {
      return fn.apply(thisArg, arguments);
    };
  }

  // node_modules/axios/lib/utils.js
  var { toString } = Object.prototype;
  var { getPrototypeOf } = Object;
  var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
    const str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  })(/* @__PURE__ */ Object.create(null));
  var kindOfTest = (type) => {
    type = type.toLowerCase();
    return (thing) => kindOf(thing) === type;
  };
  var typeOfTest = (type) => (thing) => typeof thing === type;
  var { isArray } = Array;
  var isUndefined = typeOfTest("undefined");
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction2(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  var isArrayBuffer = kindOfTest("ArrayBuffer");
  function isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
  }
  var isString = typeOfTest("string");
  var isFunction2 = typeOfTest("function");
  var isNumber = typeOfTest("number");
  var isObject2 = (thing) => thing !== null && typeof thing === "object";
  var isBoolean = (thing) => thing === true || thing === false;
  var isPlainObject = (val) => {
    if (kindOf(val) !== "object") {
      return false;
    }
    const prototype3 = getPrototypeOf(val);
    return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
  };
  var isDate = kindOfTest("Date");
  var isFile = kindOfTest("File");
  var isBlob = kindOfTest("Blob");
  var isFileList = kindOfTest("FileList");
  var isStream = (val) => isObject2(val) && isFunction2(val.pipe);
  var isFormData = (thing) => {
    let kind;
    return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction2(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
    kind === "object" && isFunction2(thing.toString) && thing.toString() === "[object FormData]"));
  };
  var isURLSearchParams = kindOfTest("URLSearchParams");
  var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
  var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  function forEach(obj, fn, { allOwnKeys = false } = {}) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    let i;
    let l;
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray(obj)) {
      for (i = 0, l = obj.length; i < l; i++) {
        fn.call(null, obj[i], i, obj);
      }
    } else {
      const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        fn.call(null, obj[key], key, obj);
      }
    }
  }
  function findKey(obj, key) {
    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while (i-- > 0) {
      _key = keys[i];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  var _global = (() => {
    if (typeof globalThis !== "undefined")
      return globalThis;
    return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
  })();
  var isContextDefined = (context) => !isUndefined(context) && context !== _global;
  function merge2() {
    const { caseless } = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key) => {
      const targetKey = caseless && findKey(result, key) || key;
      if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
        result[targetKey] = merge2(result[targetKey], val);
      } else if (isPlainObject(val)) {
        result[targetKey] = merge2({}, val);
      } else if (isArray(val)) {
        result[targetKey] = val.slice();
      } else {
        result[targetKey] = val;
      }
    };
    for (let i = 0, l = arguments.length; i < l; i++) {
      arguments[i] && forEach(arguments[i], assignValue);
    }
    return result;
  }
  var extend2 = (a, b, thisArg, { allOwnKeys } = {}) => {
    forEach(b, (val, key) => {
      if (thisArg && isFunction2(val)) {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    }, { allOwnKeys });
    return a;
  };
  var stripBOM = (content) => {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  };
  var inherits = (constructor, superConstructor, props, descriptors2) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };
  var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
    let props;
    let i;
    let prop;
    const merged = {};
    destObj = destObj || {};
    if (sourceObj == null)
      return destObj;
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i = props.length;
      while (i-- > 0) {
        prop = props[i];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  };
  var endsWith = (str, searchString, position) => {
    str = String(str);
    if (position === void 0 || position > str.length) {
      position = str.length;
    }
    position -= searchString.length;
    const lastIndex = str.indexOf(searchString, position);
    return lastIndex !== -1 && lastIndex === position;
  };
  var toArray = (thing) => {
    if (!thing)
      return null;
    if (isArray(thing))
      return thing;
    let i = thing.length;
    if (!isNumber(i))
      return null;
    const arr = new Array(i);
    while (i-- > 0) {
      arr[i] = thing[i];
    }
    return arr;
  };
  var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
    return (thing) => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
  var forEachEntry = (obj, fn) => {
    const generator = obj && obj[Symbol.iterator];
    const iterator = generator.call(obj);
    let result;
    while ((result = iterator.next()) && !result.done) {
      const pair = result.value;
      fn.call(obj, pair[0], pair[1]);
    }
  };
  var matchAll = (regExp, str) => {
    let matches2;
    const arr = [];
    while ((matches2 = regExp.exec(str)) !== null) {
      arr.push(matches2);
    }
    return arr;
  };
  var isHTMLForm = kindOfTest("HTMLFormElement");
  var toCamelCase = (str) => {
    return str.toLowerCase().replace(
      /[-_\s]([a-z\d])(\w*)/g,
      function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };
  var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
  var isRegExp = kindOfTest("RegExp");
  var reduceDescriptors = (obj, reducer) => {
    const descriptors2 = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach(descriptors2, (descriptor, name) => {
      let ret;
      if ((ret = reducer(descriptor, name, obj)) !== false) {
        reducedDescriptors[name] = ret || descriptor;
      }
    });
    Object.defineProperties(obj, reducedDescriptors);
  };
  var freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name) => {
      if (isFunction2(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
        return false;
      }
      const value = obj[name];
      if (!isFunction2(value))
        return;
      descriptor.enumerable = false;
      if ("writable" in descriptor) {
        descriptor.writable = false;
        return;
      }
      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error("Can not rewrite read-only method '" + name + "'");
        };
      }
    });
  };
  var toObjectSet = (arrayOrString, delimiter) => {
    const obj = {};
    const define2 = (arr) => {
      arr.forEach((value) => {
        obj[value] = true;
      });
    };
    isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
    return obj;
  };
  var noop12 = () => {
  };
  var toFiniteNumber = (value, defaultValue) => {
    return value != null && Number.isFinite(value = +value) ? value : defaultValue;
  };
  var ALPHA = "abcdefghijklmnopqrstuvwxyz";
  var DIGIT = "0123456789";
  var ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
  };
  var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
    let str = "";
    const { length } = alphabet;
    while (size--) {
      str += alphabet[Math.random() * length | 0];
    }
    return str;
  };
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction2(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
  }
  var toJSONObject = (obj) => {
    const stack = new Array(10);
    const visit = (source, i) => {
      if (isObject2(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }
        if (!("toJSON" in source)) {
          stack[i] = source;
          const target = isArray(source) ? [] : {};
          forEach(source, (value, key) => {
            const reducedValue = visit(value, i + 1);
            !isUndefined(reducedValue) && (target[key] = reducedValue);
          });
          stack[i] = void 0;
          return target;
        }
      }
      return source;
    };
    return visit(obj, 0);
  };
  var isAsyncFn = kindOfTest("AsyncFunction");
  var isThenable = (thing) => thing && (isObject2(thing) || isFunction2(thing)) && isFunction2(thing.then) && isFunction2(thing.catch);
  var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
    if (setImmediateSupported) {
      return setImmediate;
    }
    return postMessageSupported ? ((token, callbacks) => {
      _global.addEventListener("message", ({ source, data: data2 }) => {
        if (source === _global && data2 === token) {
          callbacks.length && callbacks.shift()();
        }
      }, false);
      return (cb) => {
        callbacks.push(cb);
        _global.postMessage(token, "*");
      };
    })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
  })(
    typeof setImmediate === "function",
    isFunction2(_global.postMessage)
  );
  var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
  var utils_default = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber,
    isBoolean,
    isObject: isObject2,
    isPlainObject,
    isReadableStream,
    isRequest,
    isResponse,
    isHeaders,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction: isFunction2,
    isStream,
    isURLSearchParams,
    isTypedArray,
    isFileList,
    forEach,
    merge: merge2,
    extend: extend2,
    trim,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty,
    hasOwnProp: hasOwnProperty,
    // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop: noop12,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable,
    setImmediate: _setImmediate,
    asap
  };

  // node_modules/axios/lib/core/AxiosError.js
  function AxiosError(message, code, config, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config && (this.config = config);
    request && (this.request = request);
    if (response) {
      this.response = response;
      this.status = response.status ? response.status : null;
    }
  }
  utils_default.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils_default.toJSONObject(this.config),
        code: this.code,
        status: this.status
      };
    }
  });
  var prototype = AxiosError.prototype;
  var descriptors = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
    // eslint-disable-next-line func-names
  ].forEach((code) => {
    descriptors[code] = { value: code };
  });
  Object.defineProperties(AxiosError, descriptors);
  Object.defineProperty(prototype, "isAxiosError", { value: true });
  AxiosError.from = (error2, code, config, request, response, customProps) => {
    const axiosError = Object.create(prototype);
    utils_default.toFlatObject(error2, axiosError, function filter2(obj) {
      return obj !== Error.prototype;
    }, (prop) => {
      return prop !== "isAxiosError";
    });
    AxiosError.call(axiosError, error2.message, code, config, request, response);
    axiosError.cause = error2;
    axiosError.name = error2.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  var AxiosError_default = AxiosError;

  // node_modules/axios/lib/helpers/null.js
  var null_default = null;

  // node_modules/axios/lib/helpers/toFormData.js
  function isVisitable(thing) {
    return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
  }
  function removeBrackets(key) {
    return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
  }
  function renderKey(path, key, dots) {
    if (!path)
      return key;
    return path.concat(key).map(function each(token, i) {
      token = removeBrackets(token);
      return !dots && i ? "[" + token + "]" : token;
    }).join(dots ? "." : "");
  }
  function isFlatArray(arr) {
    return utils_default.isArray(arr) && !arr.some(isVisitable);
  }
  var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
  });
  function toFormData(obj, formData, options) {
    if (!utils_default.isObject(obj)) {
      throw new TypeError("target must be an object");
    }
    formData = formData || new (null_default || FormData)();
    options = utils_default.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      return !utils_default.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
    if (!utils_default.isFunction(visitor)) {
      throw new TypeError("visitor must be a function");
    }
    function convertValue(value) {
      if (value === null)
        return "";
      if (utils_default.isDate(value)) {
        return value.toISOString();
      }
      if (!useBlob && utils_default.isBlob(value)) {
        throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
      }
      if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
        return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function defaultVisitor(value, key, path) {
      let arr = value;
      if (value && !path && typeof value === "object") {
        if (utils_default.endsWith(key, "{}")) {
          key = metaTokens ? key : key.slice(0, -2);
          value = JSON.stringify(value);
        } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
          key = removeBrackets(key);
          arr.forEach(function each(el, index) {
            !(utils_default.isUndefined(el) || el === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
              convertValue(el)
            );
          });
          return false;
        }
      }
      if (isVisitable(value)) {
        return true;
      }
      formData.append(renderKey(path, key, dots), convertValue(value));
      return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });
    function build(value, path) {
      if (utils_default.isUndefined(value))
        return;
      if (stack.indexOf(value) !== -1) {
        throw Error("Circular reference detected in " + path.join("."));
      }
      stack.push(value);
      utils_default.forEach(value, function each(el, key) {
        const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(
          formData,
          el,
          utils_default.isString(key) ? key.trim() : key,
          path,
          exposedHelpers
        );
        if (result === true) {
          build(el, path ? path.concat(key) : [key]);
        }
      });
      stack.pop();
    }
    if (!utils_default.isObject(obj)) {
      throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
  }
  var toFormData_default = toFormData;

  // node_modules/axios/lib/helpers/AxiosURLSearchParams.js
  function encode(str) {
    const charMap = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+",
      "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
      return charMap[match];
    });
  }
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && toFormData_default(params, this, options);
  }
  var prototype2 = AxiosURLSearchParams.prototype;
  prototype2.append = function append(name, value) {
    this._pairs.push([name, value]);
  };
  prototype2.toString = function toString2(encoder2) {
    const _encode = encoder2 ? function(value) {
      return encoder2.call(this, value, encode);
    } : encode;
    return this._pairs.map(function each(pair) {
      return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
  };
  var AxiosURLSearchParams_default = AxiosURLSearchParams;

  // node_modules/axios/lib/helpers/buildURL.js
  function encode2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  function buildURL(url, params, options) {
    if (!params) {
      return url;
    }
    const _encode = options && options.encode || encode2;
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
    }
    if (serializedParams) {
      const hashmarkIndex = url.indexOf("#");
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
  }

  // node_modules/axios/lib/core/InterceptorManager.js
  var InterceptorManager = class {
    constructor() {
      this.handlers = [];
    }
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    }
    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn) {
      utils_default.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    }
  };
  var InterceptorManager_default = InterceptorManager;

  // node_modules/axios/lib/defaults/transitional.js
  var transitional_default = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  // node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
  var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

  // node_modules/axios/lib/platform/browser/classes/FormData.js
  var FormData_default = typeof FormData !== "undefined" ? FormData : null;

  // node_modules/axios/lib/platform/browser/classes/Blob.js
  var Blob_default = typeof Blob !== "undefined" ? Blob : null;

  // node_modules/axios/lib/platform/browser/index.js
  var browser_default = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams_default,
      FormData: FormData_default,
      Blob: Blob_default
    },
    protocols: ["http", "https", "file", "blob", "url", "data"]
  };

  // node_modules/axios/lib/platform/common/utils.js
  var utils_exports = {};
  __export(utils_exports, {
    hasBrowserEnv: () => hasBrowserEnv,
    hasStandardBrowserEnv: () => hasStandardBrowserEnv,
    hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
    navigator: () => _navigator,
    origin: () => origin
  });
  var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
  var _navigator = typeof navigator === "object" && navigator || void 0;
  var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
  var hasStandardBrowserWebWorkerEnv = (() => {
    return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
  })();
  var origin = hasBrowserEnv && window.location.href || "http://localhost";

  // node_modules/axios/lib/platform/index.js
  var platform_default = {
    ...utils_exports,
    ...browser_default
  };

  // node_modules/axios/lib/helpers/toURLEncodedForm.js
  function toURLEncodedForm(data2, options) {
    return toFormData_default(data2, new platform_default.classes.URLSearchParams(), Object.assign({
      visitor: function(value, key, path, helpers) {
        if (platform_default.isNode && utils_default.isBuffer(value)) {
          this.append(key, value.toString("base64"));
          return false;
        }
        return helpers.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }

  // node_modules/axios/lib/helpers/formDataToJSON.js
  function parsePropPath(name) {
    return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
      return match[0] === "[]" ? "" : match[1] || match[0];
    });
  }
  function arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      obj[key] = arr[key];
    }
    return obj;
  }
  function formDataToJSON(formData) {
    function buildPath(path, value, target, index) {
      let name = path[index++];
      if (name === "__proto__")
        return true;
      const isNumericKey = Number.isFinite(+name);
      const isLast = index >= path.length;
      name = !name && utils_default.isArray(target) ? target.length : name;
      if (isLast) {
        if (utils_default.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }
        return !isNumericKey;
      }
      if (!target[name] || !utils_default.isObject(target[name])) {
        target[name] = [];
      }
      const result = buildPath(path, value, target[name], index);
      if (result && utils_default.isArray(target[name])) {
        target[name] = arrayToObject(target[name]);
      }
      return !isNumericKey;
    }
    if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
      const obj = {};
      utils_default.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath(name), value, obj, 0);
      });
      return obj;
    }
    return null;
  }
  var formDataToJSON_default = formDataToJSON;

  // node_modules/axios/lib/defaults/index.js
  function stringifySafely(rawValue, parser, encoder2) {
    if (utils_default.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils_default.trim(rawValue);
      } catch (e) {
        if (e.name !== "SyntaxError") {
          throw e;
        }
      }
    }
    return (encoder2 || JSON.stringify)(rawValue);
  }
  var defaults = {
    transitional: transitional_default,
    adapter: ["xhr", "http", "fetch"],
    transformRequest: [function transformRequest(data2, headers) {
      const contentType = headers.getContentType() || "";
      const hasJSONContentType = contentType.indexOf("application/json") > -1;
      const isObjectPayload = utils_default.isObject(data2);
      if (isObjectPayload && utils_default.isHTMLForm(data2)) {
        data2 = new FormData(data2);
      }
      const isFormData2 = utils_default.isFormData(data2);
      if (isFormData2) {
        return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data2)) : data2;
      }
      if (utils_default.isArrayBuffer(data2) || utils_default.isBuffer(data2) || utils_default.isStream(data2) || utils_default.isFile(data2) || utils_default.isBlob(data2) || utils_default.isReadableStream(data2)) {
        return data2;
      }
      if (utils_default.isArrayBufferView(data2)) {
        return data2.buffer;
      }
      if (utils_default.isURLSearchParams(data2)) {
        headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
        return data2.toString();
      }
      let isFileList2;
      if (isObjectPayload) {
        if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
          return toURLEncodedForm(data2, this.formSerializer).toString();
        }
        if ((isFileList2 = utils_default.isFileList(data2)) || contentType.indexOf("multipart/form-data") > -1) {
          const _FormData = this.env && this.env.FormData;
          return toFormData_default(
            isFileList2 ? { "files[]": data2 } : data2,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }
      if (isObjectPayload || hasJSONContentType) {
        headers.setContentType("application/json", false);
        return stringifySafely(data2);
      }
      return data2;
    }],
    transformResponse: [function transformResponse(data2) {
      const transitional2 = this.transitional || defaults.transitional;
      const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      const JSONRequested = this.responseType === "json";
      if (utils_default.isResponse(data2) || utils_default.isReadableStream(data2)) {
        return data2;
      }
      if (data2 && utils_default.isString(data2) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
        const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
        try {
          return JSON.parse(data2);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === "SyntaxError") {
              throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }
      return data2;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: platform_default.classes.FormData,
      Blob: platform_default.classes.Blob
    },
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*",
        "Content-Type": void 0
      }
    }
  };
  utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
    defaults.headers[method] = {};
  });
  var defaults_default = defaults;

  // node_modules/axios/lib/helpers/parseHeaders.js
  var ignoreDuplicateOf = utils_default.toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ]);
  var parseHeaders_default = (rawHeaders) => {
    const parsed = {};
    let key;
    let val;
    let i;
    rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
      i = line.indexOf(":");
      key = line.substring(0, i).trim().toLowerCase();
      val = line.substring(i + 1).trim();
      if (!key || parsed[key] && ignoreDuplicateOf[key]) {
        return;
      }
      if (key === "set-cookie") {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
      }
    });
    return parsed;
  };

  // node_modules/axios/lib/core/AxiosHeaders.js
  var $internals = Symbol("internals");
  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }
  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }
    return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
  }
  function parseTokens(str) {
    const tokens = /* @__PURE__ */ Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match;
    while (match = tokensRE.exec(str)) {
      tokens[match[1]] = match[2];
    }
    return tokens;
  }
  var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
  function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
    if (utils_default.isFunction(filter2)) {
      return filter2.call(this, value, header);
    }
    if (isHeaderNameFilter) {
      value = header;
    }
    if (!utils_default.isString(value))
      return;
    if (utils_default.isString(filter2)) {
      return value.indexOf(filter2) !== -1;
    }
    if (utils_default.isRegExp(filter2)) {
      return filter2.test(value);
    }
  }
  function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
      return char.toUpperCase() + str;
    });
  }
  function buildAccessors(obj, header) {
    const accessorName = utils_default.toCamelCase(" " + header);
    ["get", "set", "has"].forEach((methodName) => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  var AxiosHeaders = class {
    constructor(headers) {
      headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
      const self2 = this;
      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);
        if (!lHeader) {
          throw new Error("header name must be a non-empty string");
        }
        const key = utils_default.findKey(self2, lHeader);
        if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
          self2[key || _header] = normalizeValue(_value);
        }
      }
      const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
      if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders_default(header), valueOrRewrite);
      } else if (utils_default.isHeaders(header)) {
        for (const [key, value] of header.entries()) {
          setHeader(value, key, rewrite);
        }
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }
      return this;
    }
    get(header, parser) {
      header = normalizeHeader(header);
      if (header) {
        const key = utils_default.findKey(this, header);
        if (key) {
          const value = this[key];
          if (!parser) {
            return value;
          }
          if (parser === true) {
            return parseTokens(value);
          }
          if (utils_default.isFunction(parser)) {
            return parser.call(this, value, key);
          }
          if (utils_default.isRegExp(parser)) {
            return parser.exec(value);
          }
          throw new TypeError("parser must be boolean|regexp|function");
        }
      }
    }
    has(header, matcher) {
      header = normalizeHeader(header);
      if (header) {
        const key = utils_default.findKey(this, header);
        return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
      }
      return false;
    }
    delete(header, matcher) {
      const self2 = this;
      let deleted = false;
      function deleteHeader(_header) {
        _header = normalizeHeader(_header);
        if (_header) {
          const key = utils_default.findKey(self2, _header);
          if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
            delete self2[key];
            deleted = true;
          }
        }
      }
      if (utils_default.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }
      return deleted;
    }
    clear(matcher) {
      const keys = Object.keys(this);
      let i = keys.length;
      let deleted = false;
      while (i--) {
        const key = keys[i];
        if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
          delete this[key];
          deleted = true;
        }
      }
      return deleted;
    }
    normalize(format) {
      const self2 = this;
      const headers = {};
      utils_default.forEach(this, (value, header) => {
        const key = utils_default.findKey(headers, header);
        if (key) {
          self2[key] = normalizeValue(value);
          delete self2[header];
          return;
        }
        const normalized = format ? formatHeader(header) : String(header).trim();
        if (normalized !== header) {
          delete self2[header];
        }
        self2[normalized] = normalizeValue(value);
        headers[normalized] = true;
      });
      return this;
    }
    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
      const obj = /* @__PURE__ */ Object.create(null);
      utils_default.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
      });
      return obj;
    }
    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
    }
    get [Symbol.toStringTag]() {
      return "AxiosHeaders";
    }
    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
      const computed = new this(first);
      targets.forEach((target) => computed.set(target));
      return computed;
    }
    static accessor(header) {
      const internals = this[$internals] = this[$internals] = {
        accessors: {}
      };
      const accessors = internals.accessors;
      const prototype3 = this.prototype;
      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);
        if (!accessors[lHeader]) {
          buildAccessors(prototype3, _header);
          accessors[lHeader] = true;
        }
      }
      utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
      return this;
    }
  };
  AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
  utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
    let mapped = key[0].toUpperCase() + key.slice(1);
    return {
      get: () => value,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    };
  });
  utils_default.freezeMethods(AxiosHeaders);
  var AxiosHeaders_default = AxiosHeaders;

  // node_modules/axios/lib/core/transformData.js
  function transformData(fns, response) {
    const config = this || defaults_default;
    const context = response || config;
    const headers = AxiosHeaders_default.from(context.headers);
    let data2 = context.data;
    utils_default.forEach(fns, function transform(fn) {
      data2 = fn.call(config, data2, headers.normalize(), response ? response.status : void 0);
    });
    headers.normalize();
    return data2;
  }

  // node_modules/axios/lib/cancel/isCancel.js
  function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }

  // node_modules/axios/lib/cancel/CanceledError.js
  function CanceledError(message, config, request) {
    AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
    this.name = "CanceledError";
  }
  utils_default.inherits(CanceledError, AxiosError_default, {
    __CANCEL__: true
  });
  var CanceledError_default = CanceledError;

  // node_modules/axios/lib/core/settle.js
  function settle(resolve, reject, response) {
    const validateStatus2 = response.config.validateStatus;
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError_default(
        "Request failed with status code " + response.status,
        [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }

  // node_modules/axios/lib/helpers/parseProtocol.js
  function parseProtocol(url) {
    const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match && match[1] || "";
  }

  // node_modules/axios/lib/helpers/speedometer.js
  function speedometer(samplesCount, min) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min = min !== void 0 ? min : 1e3;
    return function push(chunkLength) {
      const now = Date.now();
      const startedAt = timestamps[tail];
      if (!firstSampleTS) {
        firstSampleTS = now;
      }
      bytes[head] = chunkLength;
      timestamps[head] = now;
      let i = tail;
      let bytesCount = 0;
      while (i !== head) {
        bytesCount += bytes[i++];
        i = i % samplesCount;
      }
      head = (head + 1) % samplesCount;
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
      if (now - firstSampleTS < min) {
        return;
      }
      const passed = startedAt && now - startedAt;
      return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
    };
  }
  var speedometer_default = speedometer;

  // node_modules/axios/lib/helpers/throttle.js
  function throttle(fn, freq) {
    let timestamp = 0;
    let threshold = 1e3 / freq;
    let lastArgs;
    let timer;
    const invoke = (args, now = Date.now()) => {
      timestamp = now;
      lastArgs = null;
      if (timer) {
        clearTimeout(timer);
        timer = null;
      }
      fn.apply(null, args);
    };
    const throttled = (...args) => {
      const now = Date.now();
      const passed = now - timestamp;
      if (passed >= threshold) {
        invoke(args, now);
      } else {
        lastArgs = args;
        if (!timer) {
          timer = setTimeout(() => {
            timer = null;
            invoke(lastArgs);
          }, threshold - passed);
        }
      }
    };
    const flush = () => lastArgs && invoke(lastArgs);
    return [throttled, flush];
  }
  var throttle_default = throttle;

  // node_modules/axios/lib/helpers/progressEventReducer.js
  var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
    let bytesNotified = 0;
    const _speedometer = speedometer_default(50, 250);
    return throttle_default((e) => {
      const loaded = e.loaded;
      const total = e.lengthComputable ? e.total : void 0;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;
      bytesNotified = loaded;
      const data2 = {
        loaded,
        total,
        progress: total ? loaded / total : void 0,
        bytes: progressBytes,
        rate: rate ? rate : void 0,
        estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
        event: e,
        lengthComputable: total != null,
        [isDownloadStream ? "download" : "upload"]: true
      };
      listener(data2);
    }, freq);
  };
  var progressEventDecorator = (total, throttled) => {
    const lengthComputable = total != null;
    return [(loaded) => throttled[0]({
      lengthComputable,
      total,
      loaded
    }), throttled[1]];
  };
  var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function standardBrowserEnv() {
      const msie = platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent);
      const urlParsingNode = document.createElement("a");
      let originURL;
      function resolveURL(url) {
        let href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    /* @__PURE__ */ function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    }()
  );

  // node_modules/axios/lib/helpers/cookies.js
  var cookies_default = platform_default.hasStandardBrowserEnv ? (
    // Standard browser envs support document.cookie
    {
      write(name, value, expires, path, domain, secure) {
        const cookie = [name + "=" + encodeURIComponent(value)];
        utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
        utils_default.isString(path) && cookie.push("path=" + path);
        utils_default.isString(domain) && cookie.push("domain=" + domain);
        secure === true && cookie.push("secure");
        document.cookie = cookie.join("; ");
      },
      read(name) {
        const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
        return match ? decodeURIComponent(match[3]) : null;
      },
      remove(name) {
        this.write(name, "", Date.now() - 864e5);
      }
    }
  ) : (
    // Non-standard browser env (web workers, react-native) lack needed support.
    {
      write() {
      },
      read() {
        return null;
      },
      remove() {
      }
    }
  );

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  function isAbsoluteURL(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  }

  // node_modules/axios/lib/helpers/combineURLs.js
  function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }

  // node_modules/axios/lib/core/buildFullPath.js
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }

  // node_modules/axios/lib/core/mergeConfig.js
  var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
  function mergeConfig(config1, config2) {
    config2 = config2 || {};
    const config = {};
    function getMergedValue(target, source, caseless) {
      if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
        return utils_default.merge.call({ caseless }, target, source);
      } else if (utils_default.isPlainObject(source)) {
        return utils_default.merge({}, source);
      } else if (utils_default.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(a, b, caseless) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(a, b, caseless);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a, caseless);
      }
    }
    function valueFromConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      }
    }
    function defaultToConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a);
      }
    }
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(void 0, a);
      }
    }
    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      withXSRFToken: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
    };
    utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
      const merge3 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge3(config1[prop], config2[prop], prop);
      utils_default.isUndefined(configValue) && merge3 !== mergeDirectKeys || (config[prop] = configValue);
    });
    return config;
  }

  // node_modules/axios/lib/helpers/resolveConfig.js
  var resolveConfig_default = (config) => {
    const newConfig = mergeConfig({}, config);
    let { data: data2, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
    newConfig.headers = headers = AxiosHeaders_default.from(headers);
    newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
    if (auth) {
      headers.set(
        "Authorization",
        "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
      );
    }
    let contentType;
    if (utils_default.isFormData(data2)) {
      if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
        headers.setContentType(void 0);
      } else if ((contentType = headers.getContentType()) !== false) {
        const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
        headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
      }
    }
    if (platform_default.hasStandardBrowserEnv) {
      withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
      if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
        const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
        if (xsrfValue) {
          headers.set(xsrfHeaderName, xsrfValue);
        }
      }
    }
    return newConfig;
  };

  // node_modules/axios/lib/adapters/xhr.js
  var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
  var xhr_default = isXHRAdapterSupported && function(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      const _config = resolveConfig_default(config);
      let requestData = _config.data;
      const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
      let { responseType, onUploadProgress, onDownloadProgress } = _config;
      let onCanceled;
      let uploadThrottled, downloadThrottled;
      let flushUpload, flushDownload;
      function done() {
        flushUpload && flushUpload();
        flushDownload && flushDownload();
        _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
        _config.signal && _config.signal.removeEventListener("abort", onCanceled);
      }
      let request = new XMLHttpRequest();
      request.open(_config.method.toUpperCase(), _config.url, true);
      request.timeout = _config.timeout;
      function onloadend() {
        if (!request) {
          return;
        }
        const responseHeaders = AxiosHeaders_default.from(
          "getAllResponseHeaders" in request && request.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config,
          request
        };
        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request = null;
      }
      if ("onloadend" in request) {
        request.onloadend = onloadend;
      } else {
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }
        reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
        request = null;
      };
      request.onerror = function handleError() {
        reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
        request = null;
      };
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
        const transitional2 = _config.transitional || transitional_default;
        if (_config.timeoutErrorMessage) {
          timeoutErrorMessage = _config.timeoutErrorMessage;
        }
        reject(new AxiosError_default(
          timeoutErrorMessage,
          transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
          config,
          request
        ));
        request = null;
      };
      requestData === void 0 && requestHeaders.setContentType(null);
      if ("setRequestHeader" in request) {
        utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
          request.setRequestHeader(key, val);
        });
      }
      if (!utils_default.isUndefined(_config.withCredentials)) {
        request.withCredentials = !!_config.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request.responseType = _config.responseType;
      }
      if (onDownloadProgress) {
        [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
        request.addEventListener("progress", downloadThrottled);
      }
      if (onUploadProgress && request.upload) {
        [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
        request.upload.addEventListener("progress", uploadThrottled);
        request.upload.addEventListener("loadend", flushUpload);
      }
      if (_config.cancelToken || _config.signal) {
        onCanceled = (cancel) => {
          if (!request) {
            return;
          }
          reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
          request.abort();
          request = null;
        };
        _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
        if (_config.signal) {
          _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
        }
      }
      const protocol = parseProtocol(_config.url);
      if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
        return;
      }
      request.send(requestData || null);
    });
  };

  // node_modules/axios/lib/helpers/composeSignals.js
  var composeSignals = (signals, timeout2) => {
    const { length } = signals = signals ? signals.filter(Boolean) : [];
    if (timeout2 || length) {
      let controller = new AbortController();
      let aborted;
      const onabort = function(reason) {
        if (!aborted) {
          aborted = true;
          unsubscribe();
          const err = reason instanceof Error ? reason : this.reason;
          controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
        }
      };
      let timer = timeout2 && setTimeout(() => {
        timer = null;
        onabort(new AxiosError_default(`timeout ${timeout2} of ms exceeded`, AxiosError_default.ETIMEDOUT));
      }, timeout2);
      const unsubscribe = () => {
        if (signals) {
          timer && clearTimeout(timer);
          timer = null;
          signals.forEach((signal2) => {
            signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
          });
          signals = null;
        }
      };
      signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
      const { signal } = controller;
      signal.unsubscribe = () => utils_default.asap(unsubscribe);
      return signal;
    }
  };
  var composeSignals_default = composeSignals;

  // node_modules/axios/lib/helpers/trackStream.js
  var streamChunk = function* (chunk, chunkSize) {
    let len = chunk.byteLength;
    if (!chunkSize || len < chunkSize) {
      yield chunk;
      return;
    }
    let pos = 0;
    let end;
    while (pos < len) {
      end = pos + chunkSize;
      yield chunk.slice(pos, end);
      pos = end;
    }
  };
  var readBytes = async function* (iterable, chunkSize) {
    for await (const chunk of readStream(iterable)) {
      yield* streamChunk(chunk, chunkSize);
    }
  };
  var readStream = async function* (stream) {
    if (stream[Symbol.asyncIterator]) {
      yield* stream;
      return;
    }
    const reader = stream.getReader();
    try {
      for (; ; ) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        yield value;
      }
    } finally {
      await reader.cancel();
    }
  };
  var trackStream = (stream, chunkSize, onProgress, onFinish) => {
    const iterator = readBytes(stream, chunkSize);
    let bytes = 0;
    let done;
    let _onFinish = (e) => {
      if (!done) {
        done = true;
        onFinish && onFinish(e);
      }
    };
    return new ReadableStream({
      async pull(controller) {
        try {
          const { done: done2, value } = await iterator.next();
          if (done2) {
            _onFinish();
            controller.close();
            return;
          }
          let len = value.byteLength;
          if (onProgress) {
            let loadedBytes = bytes += len;
            onProgress(loadedBytes);
          }
          controller.enqueue(new Uint8Array(value));
        } catch (err) {
          _onFinish(err);
          throw err;
        }
      },
      cancel(reason) {
        _onFinish(reason);
        return iterator.return();
      }
    }, {
      highWaterMark: 2
    });
  };

  // node_modules/axios/lib/adapters/fetch.js
  var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
  var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
  var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder2) => (str) => encoder2.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
  var test = (fn, ...args) => {
    try {
      return !!fn(...args);
    } catch (e) {
      return false;
    }
  };
  var supportsRequestStream = isReadableStreamSupported && test(() => {
    let duplexAccessed = false;
    const hasContentType = new Request(platform_default.origin, {
      body: new ReadableStream(),
      method: "POST",
      get duplex() {
        duplexAccessed = true;
        return "half";
      }
    }).headers.has("Content-Type");
    return duplexAccessed && !hasContentType;
  });
  var DEFAULT_CHUNK_SIZE = 64 * 1024;
  var supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
  var resolvers = {
    stream: supportsResponseStream && ((res) => res.body)
  };
  isFetchSupported && ((res) => {
    ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
      !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
        throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
      });
    });
  })(new Response());
  var getBodyLength = async (body) => {
    if (body == null) {
      return 0;
    }
    if (utils_default.isBlob(body)) {
      return body.size;
    }
    if (utils_default.isSpecCompliantForm(body)) {
      const _request = new Request(platform_default.origin, {
        method: "POST",
        body
      });
      return (await _request.arrayBuffer()).byteLength;
    }
    if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
      return body.byteLength;
    }
    if (utils_default.isURLSearchParams(body)) {
      body = body + "";
    }
    if (utils_default.isString(body)) {
      return (await encodeText(body)).byteLength;
    }
  };
  var resolveBodyLength = async (headers, body) => {
    const length = utils_default.toFiniteNumber(headers.getContentLength());
    return length == null ? getBodyLength(body) : length;
  };
  var fetch_default = isFetchSupported && (async (config) => {
    let {
      url,
      method,
      data: data2,
      signal,
      cancelToken,
      timeout: timeout2,
      onDownloadProgress,
      onUploadProgress,
      responseType,
      headers,
      withCredentials = "same-origin",
      fetchOptions
    } = resolveConfig_default(config);
    responseType = responseType ? (responseType + "").toLowerCase() : "text";
    let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout2);
    let request;
    const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
      composedSignal.unsubscribe();
    });
    let requestContentLength;
    try {
      if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data2)) !== 0) {
        let _request = new Request(url, {
          method: "POST",
          body: data2,
          duplex: "half"
        });
        let contentTypeHeader;
        if (utils_default.isFormData(data2) && (contentTypeHeader = _request.headers.get("content-type"))) {
          headers.setContentType(contentTypeHeader);
        }
        if (_request.body) {
          const [onProgress, flush] = progressEventDecorator(
            requestContentLength,
            progressEventReducer(asyncDecorator(onUploadProgress))
          );
          data2 = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
        }
      }
      if (!utils_default.isString(withCredentials)) {
        withCredentials = withCredentials ? "include" : "omit";
      }
      const isCredentialsSupported = "credentials" in Request.prototype;
      request = new Request(url, {
        ...fetchOptions,
        signal: composedSignal,
        method: method.toUpperCase(),
        headers: headers.normalize().toJSON(),
        body: data2,
        duplex: "half",
        credentials: isCredentialsSupported ? withCredentials : void 0
      });
      let response = await fetch(request);
      const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
      if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
        const options = {};
        ["status", "statusText", "headers"].forEach((prop) => {
          options[prop] = response[prop];
        });
        const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
        const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
          responseContentLength,
          progressEventReducer(asyncDecorator(onDownloadProgress), true)
        ) || [];
        response = new Response(
          trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
            flush && flush();
            unsubscribe && unsubscribe();
          }),
          options
        );
      }
      responseType = responseType || "text";
      let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
      !isStreamResponse && unsubscribe && unsubscribe();
      return await new Promise((resolve, reject) => {
        settle(resolve, reject, {
          data: responseData,
          headers: AxiosHeaders_default.from(response.headers),
          status: response.status,
          statusText: response.statusText,
          config,
          request
        });
      });
    } catch (err) {
      unsubscribe && unsubscribe();
      if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
        throw Object.assign(
          new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request),
          {
            cause: err.cause || err
          }
        );
      }
      throw AxiosError_default.from(err, err && err.code, config, request);
    }
  });

  // node_modules/axios/lib/adapters/adapters.js
  var knownAdapters = {
    http: null_default,
    xhr: xhr_default,
    fetch: fetch_default
  };
  utils_default.forEach(knownAdapters, (fn, value) => {
    if (fn) {
      try {
        Object.defineProperty(fn, "name", { value });
      } catch (e) {
      }
      Object.defineProperty(fn, "adapterName", { value });
    }
  });
  var renderReason = (reason) => `- ${reason}`;
  var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
  var adapters_default = {
    getAdapter: (adapters) => {
      adapters = utils_default.isArray(adapters) ? adapters : [adapters];
      const { length } = adapters;
      let nameOrAdapter;
      let adapter;
      const rejectedReasons = {};
      for (let i = 0; i < length; i++) {
        nameOrAdapter = adapters[i];
        let id;
        adapter = nameOrAdapter;
        if (!isResolvedHandle(nameOrAdapter)) {
          adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
          if (adapter === void 0) {
            throw new AxiosError_default(`Unknown adapter '${id}'`);
          }
        }
        if (adapter) {
          break;
        }
        rejectedReasons[id || "#" + i] = adapter;
      }
      if (!adapter) {
        const reasons = Object.entries(rejectedReasons).map(
          ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
        );
        let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
        throw new AxiosError_default(
          `There is no suitable adapter to dispatch the request ` + s,
          "ERR_NOT_SUPPORT"
        );
      }
      return adapter;
    },
    adapters: knownAdapters
  };

  // node_modules/axios/lib/core/dispatchRequest.js
  function throwIfCancellationRequested(config) {
    if (config.cancelToken) {
      config.cancelToken.throwIfRequested();
    }
    if (config.signal && config.signal.aborted) {
      throw new CanceledError_default(null, config);
    }
  }
  function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    config.headers = AxiosHeaders_default.from(config.headers);
    config.data = transformData.call(
      config,
      config.transformRequest
    );
    if (["post", "put", "patch"].indexOf(config.method) !== -1) {
      config.headers.setContentType("application/x-www-form-urlencoded", false);
    }
    const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
    return adapter(config).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config);
      response.data = transformData.call(
        config,
        config.transformResponse,
        response
      );
      response.headers = AxiosHeaders_default.from(response.headers);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config,
            config.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
        }
      }
      return Promise.reject(reason);
    });
  }

  // node_modules/axios/lib/env/data.js
  var VERSION = "1.7.7";

  // node_modules/axios/lib/helpers/validator.js
  var validators = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
    validators[type] = function validator(thing) {
      return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
  });
  var deprecatedWarnings = {};
  validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
      return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return (value, opt, opts) => {
      if (validator === false) {
        throw new AxiosError_default(
          formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
          AxiosError_default.ERR_DEPRECATED
        );
      }
      if (version && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        console.warn(
          formatMessage(
            opt,
            " has been deprecated since v" + version + " and will be removed in the near future"
          )
        );
      }
      return validator ? validator(value, opt, opts) : true;
    };
  };
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i = keys.length;
    while (i-- > 0) {
      const opt = keys[i];
      const validator = schema[opt];
      if (validator) {
        const value = options[opt];
        const result = value === void 0 || validator(value, opt, options);
        if (result !== true) {
          throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
      }
    }
  }
  var validator_default = {
    assertOptions,
    validators
  };

  // node_modules/axios/lib/core/Axios.js
  var validators2 = validator_default.validators;
  var Axios = class {
    constructor(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_default(),
        response: new InterceptorManager_default()
      };
    }
    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    async request(configOrUrl, config) {
      try {
        return await this._request(configOrUrl, config);
      } catch (err) {
        if (err instanceof Error) {
          let dummy;
          Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
          const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
          try {
            if (!err.stack) {
              err.stack = stack;
            } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
              err.stack += "\n" + stack;
            }
          } catch (e) {
          }
        }
        throw err;
      }
    }
    _request(configOrUrl, config) {
      if (typeof configOrUrl === "string") {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = mergeConfig(this.defaults, config);
      const { transitional: transitional2, paramsSerializer, headers } = config;
      if (transitional2 !== void 0) {
        validator_default.assertOptions(transitional2, {
          silentJSONParsing: validators2.transitional(validators2.boolean),
          forcedJSONParsing: validators2.transitional(validators2.boolean),
          clarifyTimeoutError: validators2.transitional(validators2.boolean)
        }, false);
      }
      if (paramsSerializer != null) {
        if (utils_default.isFunction(paramsSerializer)) {
          config.paramsSerializer = {
            serialize: paramsSerializer
          };
        } else {
          validator_default.assertOptions(paramsSerializer, {
            encode: validators2.function,
            serialize: validators2.function
          }, true);
        }
      }
      config.method = (config.method || this.defaults.method || "get").toLowerCase();
      let contextHeaders = headers && utils_default.merge(
        headers.common,
        headers[config.method]
      );
      headers && utils_default.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        (method) => {
          delete headers[method];
        }
      );
      config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      let promise;
      let i = 0;
      let len;
      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), void 0];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len = chain.length;
        promise = Promise.resolve(config);
        while (i < len) {
          promise = promise.then(chain[i++], chain[i++]);
        }
        return promise;
      }
      len = requestInterceptorChain.length;
      let newConfig = config;
      i = 0;
      while (i < len) {
        const onFulfilled = requestInterceptorChain[i++];
        const onRejected = requestInterceptorChain[i++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error2) {
          onRejected.call(this, error2);
          break;
        }
      }
      try {
        promise = dispatchRequest.call(this, newConfig);
      } catch (error2) {
        return Promise.reject(error2);
      }
      i = 0;
      len = responseInterceptorChain.length;
      while (i < len) {
        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
      }
      return promise;
    }
    getUri(config) {
      config = mergeConfig(this.defaults, config);
      const fullPath = buildFullPath(config.baseURL, config.url);
      return buildURL(fullPath, config.params, config.paramsSerializer);
    }
  };
  utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
    Axios.prototype[method] = function(url, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        url,
        data: (config || {}).data
      }));
    };
  });
  utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url, data2, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url,
          data: data2
        }));
      };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
  });
  var Axios_default = Axios;

  // node_modules/axios/lib/cancel/CancelToken.js
  var CancelToken = class _CancelToken {
    constructor(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      let resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      const token = this;
      this.promise.then((cancel) => {
        if (!token._listeners)
          return;
        let i = token._listeners.length;
        while (i-- > 0) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });
      this.promise.then = (onfulfilled) => {
        let _resolve;
        const promise = new Promise((resolve) => {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message, config, request) {
        if (token.reason) {
          return;
        }
        token.reason = new CanceledError_default(message, config, request);
        resolvePromise(token.reason);
      });
    }
    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
    /**
     * Subscribe to the cancel signal
     */
    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }
    /**
     * Unsubscribe from the cancel signal
     */
    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }
    toAbortSignal() {
      const controller = new AbortController();
      const abort = (err) => {
        controller.abort(err);
      };
      this.subscribe(abort);
      controller.signal.unsubscribe = () => this.unsubscribe(abort);
      return controller.signal;
    }
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel;
      const token = new _CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token,
        cancel
      };
    }
  };
  var CancelToken_default = CancelToken;

  // node_modules/axios/lib/helpers/spread.js
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }

  // node_modules/axios/lib/helpers/isAxiosError.js
  function isAxiosError(payload) {
    return utils_default.isObject(payload) && payload.isAxiosError === true;
  }

  // node_modules/axios/lib/helpers/HttpStatusCode.js
  var HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
  };
  Object.entries(HttpStatusCode).forEach(([key, value]) => {
    HttpStatusCode[value] = key;
  });
  var HttpStatusCode_default = HttpStatusCode;

  // node_modules/axios/lib/axios.js
  function createInstance(defaultConfig) {
    const context = new Axios_default(defaultConfig);
    const instance = bind(Axios_default.prototype.request, context);
    utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
    utils_default.extend(instance, context, null, { allOwnKeys: true });
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
  }
  var axios = createInstance(defaults_default);
  axios.Axios = Axios_default;
  axios.CanceledError = CanceledError_default;
  axios.CancelToken = CancelToken_default;
  axios.isCancel = isCancel;
  axios.VERSION = VERSION;
  axios.toFormData = toFormData_default;
  axios.AxiosError = AxiosError_default;
  axios.Cancel = axios.CanceledError;
  axios.all = function all(promises) {
    return Promise.all(promises);
  };
  axios.spread = spread;
  axios.isAxiosError = isAxiosError;
  axios.mergeConfig = mergeConfig;
  axios.AxiosHeaders = AxiosHeaders_default;
  axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
  axios.getAdapter = adapters_default.getAdapter;
  axios.HttpStatusCode = HttpStatusCode_default;
  axios.default = axios;
  var axios_default = axios;

  // node_modules/axios/index.js
  var {
    Axios: Axios2,
    AxiosError: AxiosError2,
    CanceledError: CanceledError2,
    isCancel: isCancel2,
    CancelToken: CancelToken2,
    VERSION: VERSION2,
    all: all2,
    Cancel,
    isAxiosError: isAxiosError2,
    spread: spread2,
    toFormData: toFormData2,
    AxiosHeaders: AxiosHeaders2,
    HttpStatusCode: HttpStatusCode2,
    formToJSON,
    getAdapter,
    mergeConfig: mergeConfig2
  } = axios_default;

  // app/javascript/components/IndexTable.jsx
  function IndexTableComponent() {
    const [selected, setSelected] = (0, import_react186.useState)(0);
    const [summaryData, setSummaryData] = (0, import_react186.useState)({
      suppliers: 0,
      brands: 0,
      inventory: 0,
      warehouse_locations: 0,
      potential_revenue: 0,
      potential_gross_profit: 0
    });
    const location2 = useLocation();
    const productsUrl = document.getElementById("products-index").getAttribute("data-products-url");
    const ordersUrl = document.getElementById("orders-index").getAttribute("data-orders-url");
    const settingsUrl = document.getElementById("settings-path").getAttribute("data-settings-url");
    (0, import_react186.useEffect)(() => {
      const config = {
        apiKey: "18f4c5132d276a71f8144a6c39129c26",
        host: new URLSearchParams(window.location.search).get("host"),
        forceRedirect: true
      };
      const app = (0, import_app_bridge.createApp)(config);
      const productsLink = import_actions.AppLink.create(app, {
        label: "Products",
        destination: productsUrl
      });
      const ordersLink = import_actions.AppLink.create(app, {
        label: "Orders",
        destination: ordersUrl
      });
      const settingsLink = import_actions.AppLink.create(app, {
        label: "Settings",
        destination: settingsUrl
      });
      import_actions.NavigationMenu.create(app, {
        items: [productsLink, ordersLink, settingsLink],
        active: location2.pathname.includes("") ? productsLink : location2.pathname.includes("orders") ? ordersLink : settingsLink
      });
    }, [location2]);
    (0, import_react186.useEffect)(() => {
      const fetchData = async () => {
        try {
          const response = await axios_default.get("/products_data_summary");
          const data2 = response.data;
          setSummaryData({
            suppliers: data2.suppliers,
            vendors: data2.brands,
            inventory: data2.inventory,
            warehouseLocations: data2.warehouse_locations,
            potentialRevenue: data2.potential_revenue,
            potentialGrossProfit: data2.potential_gross_profit
          });
        } catch (error2) {
          console.error("Failed to fetch summary data", error2);
        }
      };
      fetchData();
      const intervalId = setInterval(fetchData, 6e4);
      return () => clearInterval(intervalId);
    }, []);
    const disambiguateLabel = (key, value) => {
      switch (key) {
        case "type":
          return value.map((val) => `type: ${val}`).join(", ");
        case "tone":
          return value.map((val) => `tone: ${val}`).join(", ");
        default:
          return value;
      }
    };
    const isEmpty = (value) => {
      if (Array.isArray(value)) {
        return value.length === 0;
      } else {
        return value === "" || value == null;
      }
    };
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
    const [itemStrings, setItemStrings] = (0, import_react186.useState)([
      "All",
      "Active",
      "Draft",
      "Due"
    ]);
    const deleteView = (index) => {
      const newItemStrings = [...itemStrings];
      newItemStrings.splice(index, 1);
      setItemStrings(newItemStrings);
      setSelected(0);
    };
    const duplicateView = async (name) => {
      setItemStrings([...itemStrings, name]);
      setSelected(itemStrings.length);
      await sleep(1);
      return true;
    };
    const tabs = itemStrings.map((item, index) => ({
      content: item,
      index,
      onAction: () => {
      },
      id: `${item}-${index}`,
      isLocked: index === 0,
      actions: index === 0 ? [] : [
        {
          type: "rename",
          onAction: () => {
          },
          onPrimaryAction: async (value) => {
            const newItemsStrings = tabs.map((item2, idx) => {
              if (idx === index) {
                return value;
              }
              return item2.content;
            });
            await sleep(1);
            setItemStrings(newItemsStrings);
            return true;
          }
        },
        {
          type: "duplicate",
          onPrimaryAction: async (value) => {
            await sleep(1);
            await duplicateView(value);
            return true;
          }
        },
        {
          type: "edit"
        },
        {
          type: "delete",
          onPrimaryAction: async () => {
            await sleep(1);
            deleteView(index);
            return true;
          }
        }
      ]
    }));
    const onCreateNewView = async (value) => {
      await sleep(500);
      setItemStrings([...itemStrings, value]);
      setSelected(itemStrings.length);
      return true;
    };
    const sortOptions = [
      { label: "Product", value: "product asc", directionLabel: "Ascending" },
      { label: "Product", value: "product desc", directionLabel: "Descending" },
      { label: "Status", value: "tone asc", directionLabel: "A-Z" },
      { label: "Status", value: "tone desc", directionLabel: "Z-A" },
      { label: "Type", value: "type asc", directionLabel: "A-Z" },
      { label: "Type", value: "type desc", directionLabel: "Z-A" },
      { label: "Vendor", value: "vendor asc", directionLabel: "Ascending" },
      { label: "Vendor", value: "vendor desc", directionLabel: "Descending" }
    ];
    const [sortSelected, setSortSelected] = (0, import_react186.useState)(["product asc"]);
    const { mode, setMode } = useSetIndexFiltersMode();
    const onHandleCancel = () => {
    };
    const onHandleSave = async () => {
      await sleep(1);
      return true;
    };
    const primaryAction = selected === 0 ? {
      type: "save-as",
      onAction: onCreateNewView,
      disabled: false,
      loading: false
    } : {
      type: "save",
      onAction: onHandleSave,
      disabled: false,
      loading: false
    };
    const [tone, setStatus] = (0, import_react186.useState)(void 0);
    const [type, setType] = (0, import_react186.useState)(void 0);
    const [queryValue, setQueryValue] = (0, import_react186.useState)("");
    const handleStatusChange = (0, import_react186.useCallback)((value) => setStatus(value), []);
    const handleTypeChange = (0, import_react186.useCallback)((value) => setType(value), []);
    const handleFiltersQueryChange = (0, import_react186.useCallback)((value) => setQueryValue(value), []);
    const handleStatusRemove = (0, import_react186.useCallback)(() => setStatus(void 0), []);
    const handleTypeRemove = (0, import_react186.useCallback)(() => setType(void 0), []);
    const handleQueryValueRemove = (0, import_react186.useCallback)(() => setQueryValue(""), []);
    const handleFiltersClearAll = (0, import_react186.useCallback)(() => {
      handleStatusRemove();
      handleTypeRemove();
      handleQueryValueRemove();
    }, [handleStatusRemove, handleQueryValueRemove, handleTypeRemove]);
    const filters = [
      {
        key: "tone",
        label: "Status",
        filter: /* @__PURE__ */ import_react186.default.createElement(
          ChoiceList,
          {
            title: "tone",
            titleHidden: true,
            choices: [
              { label: "Active", value: "active" },
              { label: "Draft", value: "draft" },
              { label: "Archived", value: "archived" }
            ],
            selected: tone || [],
            onChange: handleStatusChange,
            allowMultiple: true
          }
        ),
        shortcut: true
      },
      {
        key: "type",
        label: "Type",
        filter: /* @__PURE__ */ import_react186.default.createElement(
          ChoiceList,
          {
            title: "Type",
            titleHidden: true,
            choices: [
              { label: "Brew Gear", value: "brew-gear" },
              { label: "Brew Merch", value: "brew-merch" }
            ],
            selected: type || [],
            onChange: handleTypeChange,
            allowMultiple: true
          }
        ),
        shortcut: true
      }
    ];
    const appliedFilters = [];
    if (tone && !isEmpty(tone)) {
      const key = "tone";
      appliedFilters.push({
        key,
        label: disambiguateLabel(key, tone),
        onRemove: handleStatusRemove
      });
    }
    if (type && !isEmpty(type)) {
      const key = "type";
      appliedFilters.push({
        key,
        label: disambiguateLabel(key, type),
        onRemove: handleTypeRemove
      });
    }
    const [products, setProducts] = (0, import_react186.useState)([]);
    const [currentPage, setCurrentPage] = (0, import_react186.useState)(1);
    const [totalPages, setTotalPages] = (0, import_react186.useState)(1);
    const { allResourcesSelected, selectedResources, handleSelectionChange } = useIndexResourceState(products);
    const resourceName = {
      singular: "Product",
      plural: "Products"
    };
    const fetchProducts = async (page = 1) => {
      try {
        const response = await axios_default.get("/rewix_products", {
          params: { page }
        });
        setProducts(response.data.products);
        setCurrentPage(response.data.current_page);
        setTotalPages(response.data.total_pages);
      } catch (error2) {
        console.error("Error fetching products:", error2);
      }
    };
    (0, import_react186.useEffect)(() => {
      fetchProducts(currentPage);
    }, [currentPage]);
    const handlePrevPage = () => {
      if (currentPage > 1) {
        setCurrentPage(currentPage - 1);
      }
    };
    const handleNextPage = () => {
      if (currentPage < totalPages) {
        setCurrentPage(currentPage + 1);
      }
    };
    const rowMarkup = products.map(
      ({
        external_id,
        image_url,
        name,
        inventory,
        category_type,
        vendor,
        dropship_supplier,
        warehouse_location,
        subcategory,
        quantity,
        unit_cost_eur,
        cost_of_dropship_carrier_eur,
        unit_cost_usd,
        unit_cost_egp,
        cost_of_kg,
        cost_of_gram,
        unit_weight_gr,
        actual_weight,
        unit_cost_including_weight_usd,
        unit_cost_including_weight_egp,
        gross_margin,
        final_price,
        tags,
        images
      }, index) => {
        console.log(quantity, "Unit Cost EUR");
        return /* @__PURE__ */ import_react186.default.createElement(IndexTable.Row, { id: external_id, key: external_id, selected: selectedResources.includes(external_id), position: index }, /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, /* @__PURE__ */ import_react186.default.createElement(Box, { style: { display: "flex", alignItems: "center", gap: "10px" } }, /* @__PURE__ */ import_react186.default.createElement(
          Avatar,
          {
            source: `https://griffati.rewix.zero11.org${image_url}`
          }
        ), name)), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, /* @__PURE__ */ import_react186.default.createElement(Badge, { tone: "success" }, "Active")), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, inventory), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, category_type), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, vendor), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, dropship_supplier), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, warehouse_location), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, subcategory), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, quantity), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${unit_cost_eur} EUR`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${unit_cost_usd} USD`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${unit_cost_egp} EGP`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${cost_of_kg} USD`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${cost_of_gram} USD`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${unit_weight_gr} gm`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${actual_weight} gm`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${unit_cost_including_weight_usd} USD`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${unit_cost_including_weight_egp} EGP`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${gross_margin} %`), /* @__PURE__ */ import_react186.default.createElement(IndexTable.Cell, null, `${final_price} EGP`));
      }
    );
    return /* @__PURE__ */ import_react186.default.createElement(Box, null, /* @__PURE__ */ import_react186.default.createElement(Box, { paddingBlockEnd: "800" }, /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingXl", alignment: "start", as: "h1", fontWeight: "bold" }, "Product")), /* @__PURE__ */ import_react186.default.createElement(Box, { maxWidth: "70%", paddingBlockEnd: "600" }, /* @__PURE__ */ import_react186.default.createElement(LegacyCard, { sectioned: true }, /* @__PURE__ */ import_react186.default.createElement(TextContainer, null, /* @__PURE__ */ import_react186.default.createElement("div", null, /* @__PURE__ */ import_react186.default.createElement(LegacyStack, { distribution: "equalSpacing", vertical: false, alignment: "center" }, /* @__PURE__ */ import_react186.default.createElement(LegacyStack.Item, { fill: true }, /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", as: "h2", fontWeight: "bold" }, "Suppliers"), /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", fontWeight: "bold" }, summaryData.suppliers)), /* @__PURE__ */ import_react186.default.createElement(LegacyStack.Item, { fill: true }, /* @__PURE__ */ import_react186.default.createElement(Box, { borderInlineStartWidth: "025", paddingInlineStart: "500", borderColor: "border-subdued" }, /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", as: "h2", fontWeight: "bold" }, "No. Brands"), /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", fontWeight: "bold" }, summaryData.vendors))), /* @__PURE__ */ import_react186.default.createElement(LegacyStack.Item, { fill: true }, /* @__PURE__ */ import_react186.default.createElement(Box, { borderInlineStartWidth: "025", paddingInlineStart: "500", borderColor: "border-subdued" }, /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", as: "h2", fontWeight: "bold" }, "Inventory"), /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", fontWeight: "bold" }, summaryData.inventory))), /* @__PURE__ */ import_react186.default.createElement(LegacyStack.Item, { fill: true }, /* @__PURE__ */ import_react186.default.createElement(Box, { borderInlineStartWidth: "025", paddingInlineStart: "500", borderColor: "border-subdued" }, /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", as: "h2", fontWeight: "bold" }, "Warehouse Locations"), /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", fontWeight: "bold" }, summaryData.warehouseLocations))), /* @__PURE__ */ import_react186.default.createElement(LegacyStack.Item, { fill: true }, /* @__PURE__ */ import_react186.default.createElement(Box, { borderInlineStartWidth: "025", paddingInlineStart: "500", borderColor: "border-subdued" }, /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", as: "h2", fontWeight: "bold" }, "Potential Revenue"), /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", fontWeight: "bold" }, summaryData.potentialRevenue, " EGP"))), /* @__PURE__ */ import_react186.default.createElement(LegacyStack.Item, { fill: true }, /* @__PURE__ */ import_react186.default.createElement(Box, { borderInlineStartWidth: "025", paddingInlineStart: "500", borderColor: "border-subdued" }, /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", as: "h2", fontWeight: "bold" }, "Potential Gross Profit"), /* @__PURE__ */ import_react186.default.createElement(Text, { variant: "headingMd", fontWeight: "bold" }, summaryData.potentialGrossProfit, " EGP")))))))), /* @__PURE__ */ import_react186.default.createElement(LegacyCard, { sectioned: true }, /* @__PURE__ */ import_react186.default.createElement(
      IndexFilters,
      {
        sortOptions,
        sortSelected,
        queryValue,
        queryPlaceholder: "Searching in all",
        onQueryChange: handleFiltersQueryChange,
        onQueryClear: handleQueryValueRemove,
        primaryAction,
        cancelAction: {
          onAction: onHandleCancel,
          disabled: false
        },
        tabs,
        selected,
        onSortChange: setSortSelected,
        onSelect: setSelected,
        canCreateNewView: true,
        filters,
        appliedFilters,
        onClearAll: handleFiltersClearAll,
        mode,
        setMode
      }
    )), /* @__PURE__ */ import_react186.default.createElement(Card, null, /* @__PURE__ */ import_react186.default.createElement(
      IndexTable,
      {
        resourceName,
        itemCount: products.length,
        selectedItemsCount: allResourcesSelected ? "All" : selectedResources.length,
        onSelectionChange: handleSelectionChange,
        headings: [
          { title: "Product" },
          { title: "Status" },
          { title: "Inventory" },
          { title: "Type" },
          { title: "Vendor" },
          { title: "DropShip Supplier" },
          { title: "Warehouse Location" },
          { title: "Subcategory" },
          { title: "Quantity" },
          { title: "Unit Cost" },
          { title: "Unit Cost (USD)" },
          { title: "Unit Cost (EGP)" },
          { title: "Cost of Kg (USD)" },
          { title: "Cost of Gram (USD)" },
          { title: "Volumetric Weight (GR)" },
          { title: "Actual Weight (GR)" },
          { title: "Unit Cost Including Weight (USD)" },
          { title: "Unit Cost Including Weight (EGP)" },
          { title: "Gross Margin" },
          { title: "Final Price" }
        ]
      },
      rowMarkup
    ), /* @__PURE__ */ import_react186.default.createElement("div", { style: { marginTop: "10px", display: "flex", justifyContent: "flex-end" } }, /* @__PURE__ */ import_react186.default.createElement(
      "button",
      {
        onClick: handlePrevPage,
        style: { border: "none", background: "transparent", cursor: "pointer" },
        disabled: currentPage === 1
      },
      /* @__PURE__ */ import_react186.default.createElement(Icon, { source: SvgChevronLeftIcon, color: "base" })
    ), /* @__PURE__ */ import_react186.default.createElement(
      "button",
      {
        onClick: handleNextPage,
        style: { border: "none", background: "transparent", cursor: "pointer" },
        disabled: currentPage === totalPages
      },
      /* @__PURE__ */ import_react186.default.createElement(Icon, { source: SvgChevronRightIcon, color: "base" })
    )), /* @__PURE__ */ import_react186.default.createElement("div", { style: { marginTop: "10px", textAlign: "right" } }, "Page ", currentPage, " of ", totalPages)));
  }
  var IndexTable_default = IndexTableComponent;

  // app/javascript/components/OrderIndexTable.jsx
  var import_react187 = __toESM(require_react());
  function OrderIndexTableComponent() {
    const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
    const [itemStrings, setItemStrings] = (0, import_react187.useState)([
      "All",
      "Paid",
      "Partially Paid",
      "Due"
    ]);
    const [summaryData, setSummaryData] = (0, import_react187.useState)({
      orders: 0,
      paid_orders: 0,
      paid_amount: 0,
      due_amount: 0
    });
    (0, import_react187.useEffect)(() => {
      const fetchData = async () => {
        try {
          const response = await axios_default.get("/orders_data_summary");
          const data2 = response.data;
          setSummaryData({
            orders: data2.orders,
            paid_orders: data2.paid_orders,
            paid_amount: data2.paid_amount,
            due_amount: data2.due_amount
          });
        } catch (error2) {
          console.error("Failed to fetch summary data", error2);
        }
      };
      fetchData();
      const intervalId = setInterval(fetchData, 6e4);
      return () => clearInterval(intervalId);
    }, []);
    const [selected, setSelected] = (0, import_react187.useState)(0);
    const deleteView = (index) => {
      const newItemStrings = [...itemStrings];
      newItemStrings.splice(index, 1);
      setItemStrings(newItemStrings);
      setSelected(0);
    };
    const duplicateView = async (name) => {
      setItemStrings([...itemStrings, name]);
      setSelected(itemStrings.length);
      await sleep(1);
      return true;
    };
    const tabs = itemStrings.map((item, index) => ({
      content: item,
      index,
      onAction: () => {
      },
      id: `${item}-${index}`,
      isLocked: index === 0,
      actions: index === 0 ? [] : [
        {
          type: "rename",
          onAction: () => {
          },
          onPrimaryAction: async (value) => {
            const newItemsStrings = tabs.map((item2, idx) => {
              if (idx === index) {
                return value;
              }
              return item2.content;
            });
            await sleep(1);
            setItemStrings(newItemsStrings);
            return true;
          }
        },
        {
          type: "duplicate",
          onPrimaryAction: async (value) => {
            await sleep(1);
            duplicateView(value);
            return true;
          }
        },
        {
          type: "edit"
        },
        {
          type: "delete",
          onPrimaryAction: async () => {
            await sleep(1);
            deleteView(index);
            return true;
          }
        }
      ]
    }));
    const sortOptions = [
      { label: "Order", value: "order asc", directionLabel: "Ascending" },
      { label: "Order", value: "order desc", directionLabel: "Descending" },
      { label: "Customer", value: "customer asc", directionLabel: "A-Z" },
      { label: "Customer", value: "customer desc", directionLabel: "Z-A" },
      { label: "Date", value: "date asc", directionLabel: "A-Z" },
      { label: "Date", value: "date desc", directionLabel: "Z-A" },
      { label: "Total", value: "total asc", directionLabel: "Ascending" },
      { label: "Total", value: "total desc", directionLabel: "Descending" }
    ];
    const [sortSelected, setSortSelected] = (0, import_react187.useState)(["order asc"]);
    const { mode, setMode } = useSetIndexFiltersMode();
    const primaryAction = selected === 0 ? {
      type: "save-as",
      onAction: async (value) => {
        await sleep(500);
        setItemStrings([...itemStrings, value]);
        setSelected(itemStrings.length);
        return true;
      },
      disabled: false,
      loading: false
    } : {
      type: "save",
      onAction: async () => {
        await sleep(1);
        return true;
      },
      disabled: false,
      loading: false
    };
    const [accountStatus, setAccountStatus] = (0, import_react187.useState)([]);
    const [moneySpent, setMoneySpent] = (0, import_react187.useState)([0, 500]);
    const [taggedWith, setTaggedWith] = (0, import_react187.useState)("");
    const [queryValue, setQueryValue] = (0, import_react187.useState)("");
    const handleAccountStatusChange = (0, import_react187.useCallback)((value) => setAccountStatus(value), []);
    const handleMoneySpentChange = (0, import_react187.useCallback)((value) => setMoneySpent(value), []);
    const handleTaggedWithChange = (0, import_react187.useCallback)((value) => setTaggedWith(value), []);
    const handleFiltersQueryChange = (0, import_react187.useCallback)((value) => setQueryValue(value), []);
    const filters = [
      {
        key: "accountStatus",
        label: "Account status",
        filter: /* @__PURE__ */ import_react187.default.createElement(
          ChoiceList,
          {
            title: "Account status",
            titleHidden: true,
            choices: [
              { label: "Enabled", value: "enabled" },
              { label: "Not invited", value: "not invited" },
              { label: "Invited", value: "invited" },
              { label: "Declined", value: "declined" }
            ],
            selected: accountStatus,
            onChange: handleAccountStatusChange,
            allowMultiple: true
          }
        ),
        shortcut: true
      },
      {
        key: "taggedWith",
        label: "Tagged with",
        filter: /* @__PURE__ */ import_react187.default.createElement(
          TextField,
          {
            label: "Tagged with",
            value: taggedWith,
            onChange: handleTaggedWithChange,
            autoComplete: "off",
            labelHidden: true
          }
        ),
        shortcut: true
      },
      {
        key: "moneySpent",
        label: "Money spent",
        filter: /* @__PURE__ */ import_react187.default.createElement(
          RangeSlider,
          {
            label: "Money spent is between",
            labelHidden: true,
            value: moneySpent,
            prefix: "$",
            output: true,
            min: 0,
            max: 2e3,
            step: 1,
            onChange: handleMoneySpentChange
          }
        )
      }
    ];
    const appliedFilters = [];
    if (accountStatus.length) {
      appliedFilters.push({
        key: "accountStatus",
        label: `Account status: ${accountStatus.join(", ")}`,
        onRemove: () => setAccountStatus([])
      });
    }
    if (moneySpent) {
      appliedFilters.push({
        key: "moneySpent",
        label: `Money spent is between $${moneySpent[0]} and $${moneySpent[1]}`,
        onRemove: () => setMoneySpent([0, 500])
      });
    }
    if (taggedWith) {
      appliedFilters.push({
        key: "taggedWith",
        label: `Tagged with ${taggedWith}`,
        onRemove: () => setTaggedWith("")
      });
    }
    const [orders, setOrders] = (0, import_react187.useState)([]);
    const [currentPage, setCurrentPage] = (0, import_react187.useState)(1);
    const [totalPages, setTotalPages] = (0, import_react187.useState)(1);
    const { selectedResources, allResourcesSelected, handleSelectionChange } = useIndexResourceState(orders);
    const resourceName = {
      singular: "order",
      plural: "orders"
    };
    const fetchOrders = async (page = 1) => {
      try {
        const response = await axios_default.get("/rewix_orders", {
          params: { page }
        });
        setOrders(response.data.orders);
        setCurrentPage(response.data.current_page);
        setTotalPages(response.data.total_pages);
      } catch (error2) {
        console.error("Error fetching orders:", error2);
      }
    };
    (0, import_react187.useEffect)(() => {
      fetchOrders(currentPage);
    }, [currentPage]);
    const handlePrevPage = () => {
      if (currentPage > 1) {
        setCurrentPage(currentPage - 1);
      }
    };
    const handleNextPage = () => {
      if (currentPage < totalPages) {
        setCurrentPage(currentPage + 1);
      }
    };
    console.log(orders);
    const rowMarkup = orders.map(({ id, name, shopify_created_at, customer, cost_of_dropshipping, total_price, financial_status }, index) => /* @__PURE__ */ import_react187.default.createElement(IndexTable.Row, { id, key: id, selected: selectedResources.includes(id), position: index }, /* @__PURE__ */ import_react187.default.createElement(IndexTable.Cell, null, name), /* @__PURE__ */ import_react187.default.createElement(IndexTable.Cell, null, shopify_created_at), /* @__PURE__ */ import_react187.default.createElement(IndexTable.Cell, null, customer), /* @__PURE__ */ import_react187.default.createElement(IndexTable.Cell, null, cost_of_dropshipping), /* @__PURE__ */ import_react187.default.createElement(IndexTable.Cell, null, total_price), /* @__PURE__ */ import_react187.default.createElement(IndexTable.Cell, null, financial_status)));
    return /* @__PURE__ */ import_react187.default.createElement("div", { style: { padding: "16px" } }, /* @__PURE__ */ import_react187.default.createElement(Box, { paddingBlockEnd: "800" }, /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "headingXl", alignment: "start", as: "h1", fontWeight: "bold" }, "Order")), /* @__PURE__ */ import_react187.default.createElement("div", { style: { width: "45%", paddingBottom: "16px" } }, /* @__PURE__ */ import_react187.default.createElement(Card, { sectioned: true }, /* @__PURE__ */ import_react187.default.createElement(LegacyStack, { distribution: "equalSpacing" }, /* @__PURE__ */ import_react187.default.createElement(Box, null, /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "bodyLg", fontWeight: "bold" }, "Orders"), /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "bodyMd" }, summaryData.orders)), /* @__PURE__ */ import_react187.default.createElement(Box, { borderInlineStartWidth: "025", borderColor: "border-subused", paddingInlineStart: "600" }, /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "bodyLg", fontWeight: "bold" }, "Paid Orders"), /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "bodyMd" }, summaryData.paid_orders)), /* @__PURE__ */ import_react187.default.createElement(Box, { borderInlineStartWidth: "025", borderColor: "border-subused", paddingInlineStart: "500" }, /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "bodyLg", fontWeight: "bold" }, "Paid Amounts"), /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "bodyMd" }, summaryData.paid_amount)), /* @__PURE__ */ import_react187.default.createElement(Box, { borderInlineStartWidth: "025", borderColor: "border-subused", paddingInlineStart: "500" }, /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "bodyLg", fontWeight: "bold" }, "Due Amounts"), /* @__PURE__ */ import_react187.default.createElement(Text, { variant: "bodyMd" }, summaryData.due_amount))))), /* @__PURE__ */ import_react187.default.createElement(LegacyCard, null, /* @__PURE__ */ import_react187.default.createElement(
      IndexFilters,
      {
        tabs,
        sortOptions,
        sortSelected,
        onSort: setSortSelected,
        queryValue,
        onQueryChange: handleFiltersQueryChange,
        onQueryClear: () => setQueryValue(""),
        primaryAction,
        cancelAction: {
          type: "cancel",
          onAction: () => {
          }
        },
        filters,
        appliedFilters,
        onClearAll: () => {
          setAccountStatus([]);
          setMoneySpent([0, 500]);
          setTaggedWith("");
          setQueryValue("");
        },
        mode,
        setMode
      }
    ), /* @__PURE__ */ import_react187.default.createElement(
      IndexTable,
      {
        resourceName,
        itemCount: orders.length,
        selectedItemsCount: allResourcesSelected ? "All" : selectedResources.length,
        onSelectionChange: handleSelectionChange,
        headings: [
          { title: "Order" },
          { title: "Date" },
          { title: "Customer" },
          { title: "Cost of Dropshipping Carrier (EUR)" },
          { title: "Total" },
          { title: "Order Status (Supplier)" }
        ]
      },
      rowMarkup
    ), /* @__PURE__ */ import_react187.default.createElement("div", { style: { marginTop: "10px", display: "flex", justifyContent: "flex-end" } }, /* @__PURE__ */ import_react187.default.createElement(
      "button",
      {
        onClick: handlePrevPage,
        style: { border: "none", background: "transparent", cursor: "pointer" },
        disabled: currentPage === 1
      },
      /* @__PURE__ */ import_react187.default.createElement(Icon, { source: SvgChevronLeftIcon, color: "base" })
    ), /* @__PURE__ */ import_react187.default.createElement(
      "button",
      {
        onClick: handleNextPage,
        style: { border: "none", background: "transparent", cursor: "pointer" },
        disabled: currentPage === totalPages
      },
      /* @__PURE__ */ import_react187.default.createElement(Icon, { source: SvgChevronRightIcon, color: "base" })
    )), /* @__PURE__ */ import_react187.default.createElement("div", { style: { marginTop: "10px", textAlign: "right" } }, "Page ", currentPage, " of ", totalPages)));
  }
  var OrderIndexTable_default = OrderIndexTableComponent;

  // app/javascript/components/CurrencySettingsComponent.jsx
  var import_react188 = __toESM(require_react());
  var CurrencySettingsComponent = () => {
    const [costOfKg, setCostOfKg] = (0, import_react188.useState)("");
    const [grossMargin, setGrossMargin] = (0, import_react188.useState)("");
    const [blackmarket, setBlackmarket] = (0, import_react188.useState)("");
    const [finalBlackmarket, setFinalBlackmarket] = (0, import_react188.useState)("");
    (0, import_react188.useEffect)(() => {
      const fetchInitialValues = async () => {
        try {
          const response = await fetch("/get_currency_settings");
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          const data2 = await response.json();
          setCostOfKg(data2.cost_of_kg);
          setGrossMargin(data2.gross_margin);
          setBlackmarket(data2.black_market_egp_markup);
          setFinalBlackmarket(data2.final_black_market_price);
        } catch (error2) {
          console.error("Error fetching initial values:", error2);
        }
      };
      fetchInitialValues();
    }, []);
    const calculateFinalBlackmarket = async () => {
      try {
        const response = await fetch("/calculate_final_black_market_price", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            costOfKg: parseFloat(costOfKg),
            grossMargin: parseFloat(grossMargin),
            blackmarket: parseFloat(blackmarket)
          })
        });
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }
        const data2 = await response.json();
        setFinalBlackmarket(data2.finalPrice);
      } catch (error2) {
        console.error("Error calculating final price:", error2);
      }
    };
    (0, import_react188.useEffect)(() => {
      if (costOfKg && grossMargin && blackmarket) {
        calculateFinalBlackmarket();
      }
    }, [costOfKg, grossMargin, blackmarket]);
    return /* @__PURE__ */ import_react188.default.createElement("div", { style: { width: "60%", margin: "30px" } }, /* @__PURE__ */ import_react188.default.createElement("div", { style: { marginBottom: "20px" } }, /* @__PURE__ */ import_react188.default.createElement(Text, { variant: "headingLg", as: "h2" }, "Clique Settings")), /* @__PURE__ */ import_react188.default.createElement(Card, null, /* @__PURE__ */ import_react188.default.createElement("div", { style: { marginBottom: "20px" } }, /* @__PURE__ */ import_react188.default.createElement(Text, { variant: "headingXl", as: "h1" }, "Price & Currency Settings")), /* @__PURE__ */ import_react188.default.createElement("div", { style: { padding: "13px" } }, /* @__PURE__ */ import_react188.default.createElement("div", { style: { marginBottom: "10px" } }, /* @__PURE__ */ import_react188.default.createElement(Text, { variant: "headingLg", as: "h3" }, "Price & Parameters")), /* @__PURE__ */ import_react188.default.createElement("div", { style: { display: "flex", justifyContent: "flex-start", gap: "10px" } }, /* @__PURE__ */ import_react188.default.createElement(
      TextField,
      {
        label: "Cost of KG",
        value: costOfKg,
        onChange: (value) => setCostOfKg(value),
        prefix: "$",
        type: "number",
        autoComplete: "off"
      }
    ), /* @__PURE__ */ import_react188.default.createElement(
      TextField,
      {
        label: "Gross Margin",
        suffix: "%",
        type: "number",
        autoComplete: "off",
        value: grossMargin,
        onChange: (value) => {
          setGrossMargin(value);
        }
      }
    )), /* @__PURE__ */ import_react188.default.createElement("div", { style: { marginBottom: "10px", marginTop: "10px" } }, /* @__PURE__ */ import_react188.default.createElement(Text, { variant: "headingLg", as: "h1" }, "Currency Parameters")), /* @__PURE__ */ import_react188.default.createElement("div", { style: { display: "flex", justifyContent: "flex-start", gap: "10px" } }, /* @__PURE__ */ import_react188.default.createElement(
      TextField,
      {
        label: "Black Market EGP Markup",
        autoComplete: "off",
        prefix: "E\xA3",
        type: "number",
        value: blackmarket,
        onChange: (value) => {
          setBlackmarket(value);
        }
      }
    ), /* @__PURE__ */ import_react188.default.createElement(
      TextField,
      {
        label: "Final Black Market Price",
        autoComplete: "off",
        prefix: "E\xA3",
        value: finalBlackmarket,
        type: "number",
        disabled: true
      }
    )))));
  };
  var CurrencySettingsComponent_default = CurrencySettingsComponent;

  // app/javascript/application.jsx
  var application = Application.start();
  document.addEventListener("DOMContentLoaded", function() {
    const container = document.getElementById("products-index-path");
    if (container) {
      const root = (0, import_client.createRoot)(container);
      root.render(
        /* @__PURE__ */ import_react189.default.createElement(AppProvider, { i18n: en_default }, /* @__PURE__ */ import_react189.default.createElement(BrowserRouter, null, /* @__PURE__ */ import_react189.default.createElement(IndexTable_default, null)))
      );
    }
    const order_container = document.getElementById("orders-index-path");
    if (order_container) {
      const orderRoot = (0, import_client.createRoot)(order_container);
      orderRoot.render(
        /* @__PURE__ */ import_react189.default.createElement(AppProvider, { i18n: en_default }, /* @__PURE__ */ import_react189.default.createElement(OrderIndexTable_default, null))
      );
    }
    const price_settings_container = document.getElementById("price-settings-path");
    if (price_settings_container) {
      const root = (0, import_client.createRoot)(price_settings_container);
      root.render(
        /* @__PURE__ */ import_react189.default.createElement(AppProvider, { i18n: en_default }, /* @__PURE__ */ import_react189.default.createElement(CurrencySettingsComponent_default, null))
      );
    }
  });
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-router/dist/production/chunk-L6MGG5FJ.mjs:
  (**
   * react-router v7.0.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/production/index.mjs:
  (**
   * react-router v7.0.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
